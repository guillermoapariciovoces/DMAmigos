
Sitema_Control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004dcc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08004f54  08004f54  00014f54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004fb4  08004fb4  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08004fb4  08004fb4  00014fb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004fbc  08004fbc  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004fbc  08004fbc  00014fbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004fc0  08004fc0  00014fc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004fc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          0000028c  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000029c  2000029c  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010326  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002194  00000000  00000000  00030366  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f20  00000000  00000000  00032500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000e50  00000000  00000000  00033420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021b68  00000000  00000000  00034270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001191d  00000000  00000000  00055dd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3d07  00000000  00000000  000676f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0013b3fc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004050  00000000  00000000  0013b450  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004f3c 	.word	0x08004f3c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08004f3c 	.word	0x08004f3c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <Espera>:
/* USER CODE BEGIN 0 */

//Variable para retardos no blaqueantes
uint16_t tickstart;

void Espera(int i){
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
	tickstart = HAL_GetTick();
 80004c8:	f001 f870 	bl	80015ac <HAL_GetTick>
 80004cc:	4603      	mov	r3, r0
 80004ce:	b29a      	uxth	r2, r3
 80004d0:	4b08      	ldr	r3, [pc, #32]	; (80004f4 <Espera+0x34>)
 80004d2:	801a      	strh	r2, [r3, #0]
			while((HAL_GetTick() - tickstart) < i);
 80004d4:	bf00      	nop
 80004d6:	f001 f869 	bl	80015ac <HAL_GetTick>
 80004da:	4603      	mov	r3, r0
 80004dc:	4a05      	ldr	r2, [pc, #20]	; (80004f4 <Espera+0x34>)
 80004de:	8812      	ldrh	r2, [r2, #0]
 80004e0:	1a9a      	subs	r2, r3, r2
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	429a      	cmp	r2, r3
 80004e6:	d3f6      	bcc.n	80004d6 <Espera+0x16>
}
 80004e8:	bf00      	nop
 80004ea:	bf00      	nop
 80004ec:	3708      	adds	r7, #8
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	bf00      	nop
 80004f4:	2000019e 	.word	0x2000019e

080004f8 <HAL_GPIO_EXTI_Callback>:

//Modo de funncionamiento
uint8_t mode = 0;

//Interrupciones de pulsadores
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80004f8:	b480      	push	{r7}
 80004fa:	b083      	sub	sp, #12
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	4603      	mov	r3, r0
 8000500:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_2){
 8000502:	88fb      	ldrh	r3, [r7, #6]
 8000504:	2b04      	cmp	r3, #4
 8000506:	d102      	bne.n	800050e <HAL_GPIO_EXTI_Callback+0x16>
			flag_cambio = 1;
 8000508:	4b0a      	ldr	r3, [pc, #40]	; (8000534 <HAL_GPIO_EXTI_Callback+0x3c>)
 800050a:	2201      	movs	r2, #1
 800050c:	701a      	strb	r2, [r3, #0]
	}
	if(GPIO_Pin == GPIO_PIN_3){
 800050e:	88fb      	ldrh	r3, [r7, #6]
 8000510:	2b08      	cmp	r3, #8
 8000512:	d102      	bne.n	800051a <HAL_GPIO_EXTI_Callback+0x22>
			flag_alerta = 1;
 8000514:	4b08      	ldr	r3, [pc, #32]	; (8000538 <HAL_GPIO_EXTI_Callback+0x40>)
 8000516:	2201      	movs	r2, #1
 8000518:	701a      	strb	r2, [r3, #0]
	}
	if(GPIO_Pin == GPIO_PIN_4){
 800051a:	88fb      	ldrh	r3, [r7, #6]
 800051c:	2b10      	cmp	r3, #16
 800051e:	d102      	bne.n	8000526 <HAL_GPIO_EXTI_Callback+0x2e>
			flag_rearme = 1;
 8000520:	4b06      	ldr	r3, [pc, #24]	; (800053c <HAL_GPIO_EXTI_Callback+0x44>)
 8000522:	2201      	movs	r2, #1
 8000524:	701a      	strb	r2, [r3, #0]
	}
}
 8000526:	bf00      	nop
 8000528:	370c      	adds	r7, #12
 800052a:	46bd      	mov	sp, r7
 800052c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop
 8000534:	200000cc 	.word	0x200000cc
 8000538:	20000120 	.word	0x20000120
 800053c:	2000019c 	.word	0x2000019c

08000540 <HAL_ADC_ConvCpltCallback>:
// Lectura de datos analógicos mediante DMA para el potenciómetro de control y el sensor de nivel

uint32_t adcvalue_pote[2], adcvalue_nivel[2], adcbuffer_pote[2], adcbuffer_nivel[2];
uint32_t valor_pote, valor_nivel;

void HAL_ADC_ConvCpltCallback (ADC_HandleTypeDef * hadc){
 8000540:	b480      	push	{r7}
 8000542:	b083      	sub	sp, #12
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]

	if (hadc->Instance == ADC1){
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	4a13      	ldr	r2, [pc, #76]	; (800059c <HAL_ADC_ConvCpltCallback+0x5c>)
 800054e:	4293      	cmp	r3, r2
 8000550:	d10c      	bne.n	800056c <HAL_ADC_ConvCpltCallback+0x2c>
		adcvalue_pote[0]=adcbuffer_pote[0];
 8000552:	4b13      	ldr	r3, [pc, #76]	; (80005a0 <HAL_ADC_ConvCpltCallback+0x60>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	4a13      	ldr	r2, [pc, #76]	; (80005a4 <HAL_ADC_ConvCpltCallback+0x64>)
 8000558:	6013      	str	r3, [r2, #0]
		adcvalue_pote[1]=adcbuffer_pote[1];
 800055a:	4b11      	ldr	r3, [pc, #68]	; (80005a0 <HAL_ADC_ConvCpltCallback+0x60>)
 800055c:	685b      	ldr	r3, [r3, #4]
 800055e:	4a11      	ldr	r2, [pc, #68]	; (80005a4 <HAL_ADC_ConvCpltCallback+0x64>)
 8000560:	6053      	str	r3, [r2, #4]
		valor_pote = adcvalue_pote[0];
 8000562:	4b10      	ldr	r3, [pc, #64]	; (80005a4 <HAL_ADC_ConvCpltCallback+0x64>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	4a10      	ldr	r2, [pc, #64]	; (80005a8 <HAL_ADC_ConvCpltCallback+0x68>)
 8000568:	6013      	str	r3, [r2, #0]
	else if (hadc->Instance == ADC2){
		adcvalue_nivel[0]=adcbuffer_nivel[0];
		adcvalue_nivel[1]=adcbuffer_nivel[1];
		valor_nivel = adcvalue_nivel[0];
	}
}
 800056a:	e010      	b.n	800058e <HAL_ADC_ConvCpltCallback+0x4e>
	else if (hadc->Instance == ADC2){
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	4a0e      	ldr	r2, [pc, #56]	; (80005ac <HAL_ADC_ConvCpltCallback+0x6c>)
 8000572:	4293      	cmp	r3, r2
 8000574:	d10b      	bne.n	800058e <HAL_ADC_ConvCpltCallback+0x4e>
		adcvalue_nivel[0]=adcbuffer_nivel[0];
 8000576:	4b0e      	ldr	r3, [pc, #56]	; (80005b0 <HAL_ADC_ConvCpltCallback+0x70>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	4a0e      	ldr	r2, [pc, #56]	; (80005b4 <HAL_ADC_ConvCpltCallback+0x74>)
 800057c:	6013      	str	r3, [r2, #0]
		adcvalue_nivel[1]=adcbuffer_nivel[1];
 800057e:	4b0c      	ldr	r3, [pc, #48]	; (80005b0 <HAL_ADC_ConvCpltCallback+0x70>)
 8000580:	685b      	ldr	r3, [r3, #4]
 8000582:	4a0c      	ldr	r2, [pc, #48]	; (80005b4 <HAL_ADC_ConvCpltCallback+0x74>)
 8000584:	6053      	str	r3, [r2, #4]
		valor_nivel = adcvalue_nivel[0];
 8000586:	4b0b      	ldr	r3, [pc, #44]	; (80005b4 <HAL_ADC_ConvCpltCallback+0x74>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	4a0b      	ldr	r2, [pc, #44]	; (80005b8 <HAL_ADC_ConvCpltCallback+0x78>)
 800058c:	6013      	str	r3, [r2, #0]
}
 800058e:	bf00      	nop
 8000590:	370c      	adds	r7, #12
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop
 800059c:	40012000 	.word	0x40012000
 80005a0:	20000124 	.word	0x20000124
 80005a4:	2000012c 	.word	0x2000012c
 80005a8:	20000134 	.word	0x20000134
 80005ac:	40012100 	.word	0x40012100
 80005b0:	20000248 	.word	0x20000248
 80005b4:	20000118 	.word	0x20000118
 80005b8:	20000198 	.word	0x20000198

080005bc <lcd_send_cmd>:

// Funciones basicas para el funcionamiento de la LCD via I2C


void lcd_send_cmd (char cmd)  // envia comandos
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b086      	sub	sp, #24
 80005c0:	af02      	add	r7, sp, #8
 80005c2:	4603      	mov	r3, r0
 80005c4:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80005c6:	79fb      	ldrb	r3, [r7, #7]
 80005c8:	f023 030f 	bic.w	r3, r3, #15
 80005cc:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 80005ce:	79fb      	ldrb	r3, [r7, #7]
 80005d0:	011b      	lsls	r3, r3, #4
 80005d2:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80005d4:	7bfb      	ldrb	r3, [r7, #15]
 80005d6:	f043 030c 	orr.w	r3, r3, #12
 80005da:	b2db      	uxtb	r3, r3
 80005dc:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80005de:	7bfb      	ldrb	r3, [r7, #15]
 80005e0:	f043 0308 	orr.w	r3, r3, #8
 80005e4:	b2db      	uxtb	r3, r3
 80005e6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80005e8:	7bbb      	ldrb	r3, [r7, #14]
 80005ea:	f043 030c 	orr.w	r3, r3, #12
 80005ee:	b2db      	uxtb	r3, r3
 80005f0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80005f2:	7bbb      	ldrb	r3, [r7, #14]
 80005f4:	f043 0308 	orr.w	r3, r3, #8
 80005f8:	b2db      	uxtb	r3, r3
 80005fa:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80005fc:	f107 0208 	add.w	r2, r7, #8
 8000600:	2364      	movs	r3, #100	; 0x64
 8000602:	9300      	str	r3, [sp, #0]
 8000604:	2304      	movs	r3, #4
 8000606:	214e      	movs	r1, #78	; 0x4e
 8000608:	4803      	ldr	r0, [pc, #12]	; (8000618 <lcd_send_cmd+0x5c>)
 800060a:	f002 fc81 	bl	8002f10 <HAL_I2C_Master_Transmit>
}
 800060e:	bf00      	nop
 8000610:	3710      	adds	r7, #16
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	20000078 	.word	0x20000078

0800061c <lcd_send_data>:

void lcd_send_data (char data) // envia datos a la placa, avanza automatico
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b086      	sub	sp, #24
 8000620:	af02      	add	r7, sp, #8
 8000622:	4603      	mov	r3, r0
 8000624:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000626:	79fb      	ldrb	r3, [r7, #7]
 8000628:	f023 030f 	bic.w	r3, r3, #15
 800062c:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 800062e:	79fb      	ldrb	r3, [r7, #7]
 8000630:	011b      	lsls	r3, r3, #4
 8000632:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000634:	7bfb      	ldrb	r3, [r7, #15]
 8000636:	f043 030d 	orr.w	r3, r3, #13
 800063a:	b2db      	uxtb	r3, r3
 800063c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800063e:	7bfb      	ldrb	r3, [r7, #15]
 8000640:	f043 0309 	orr.w	r3, r3, #9
 8000644:	b2db      	uxtb	r3, r3
 8000646:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000648:	7bbb      	ldrb	r3, [r7, #14]
 800064a:	f043 030d 	orr.w	r3, r3, #13
 800064e:	b2db      	uxtb	r3, r3
 8000650:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000652:	7bbb      	ldrb	r3, [r7, #14]
 8000654:	f043 0309 	orr.w	r3, r3, #9
 8000658:	b2db      	uxtb	r3, r3
 800065a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800065c:	f107 0208 	add.w	r2, r7, #8
 8000660:	2364      	movs	r3, #100	; 0x64
 8000662:	9300      	str	r3, [sp, #0]
 8000664:	2304      	movs	r3, #4
 8000666:	214e      	movs	r1, #78	; 0x4e
 8000668:	4803      	ldr	r0, [pc, #12]	; (8000678 <lcd_send_data+0x5c>)
 800066a:	f002 fc51 	bl	8002f10 <HAL_I2C_Master_Transmit>
}
 800066e:	bf00      	nop
 8000670:	3710      	adds	r7, #16
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	20000078 	.word	0x20000078

0800067c <lcd_clear>:

void lcd_clear (void) // vacia la placa
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 8000682:	2080      	movs	r0, #128	; 0x80
 8000684:	f7ff ff9a 	bl	80005bc <lcd_send_cmd>
	for (int i=0; i<70; i++)
 8000688:	2300      	movs	r3, #0
 800068a:	607b      	str	r3, [r7, #4]
 800068c:	e005      	b.n	800069a <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 800068e:	2020      	movs	r0, #32
 8000690:	f7ff ffc4 	bl	800061c <lcd_send_data>
	for (int i=0; i<70; i++)
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	3301      	adds	r3, #1
 8000698:	607b      	str	r3, [r7, #4]
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	2b45      	cmp	r3, #69	; 0x45
 800069e:	ddf6      	ble.n	800068e <lcd_clear+0x12>
	}
}
 80006a0:	bf00      	nop
 80006a2:	bf00      	nop
 80006a4:	3708      	adds	r7, #8
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
	...

080006ac <lcd_put_cur>:

void lcd_put_cur(int row, int col) // Situa el cursor
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
 80006b4:	6039      	str	r1, [r7, #0]
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	2b03      	cmp	r3, #3
 80006ba:	d81f      	bhi.n	80006fc <lcd_put_cur+0x50>
 80006bc:	a201      	add	r2, pc, #4	; (adr r2, 80006c4 <lcd_put_cur+0x18>)
 80006be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006c2:	bf00      	nop
 80006c4:	080006d5 	.word	0x080006d5
 80006c8:	080006df 	.word	0x080006df
 80006cc:	080006e9 	.word	0x080006e9
 80006d0:	080006f3 	.word	0x080006f3
    switch (row)
    {
        case 0:
            col |= 0x80;
 80006d4:	683b      	ldr	r3, [r7, #0]
 80006d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006da:	603b      	str	r3, [r7, #0]
            break;
 80006dc:	e00e      	b.n	80006fc <lcd_put_cur+0x50>
        case 1:
            col |= 0xC0;
 80006de:	683b      	ldr	r3, [r7, #0]
 80006e0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80006e4:	603b      	str	r3, [r7, #0]
            break;
 80006e6:	e009      	b.n	80006fc <lcd_put_cur+0x50>
        case 2:
            col |= 0x94;
 80006e8:	683b      	ldr	r3, [r7, #0]
 80006ea:	f043 0394 	orr.w	r3, r3, #148	; 0x94
 80006ee:	603b      	str	r3, [r7, #0]
            break;
 80006f0:	e004      	b.n	80006fc <lcd_put_cur+0x50>
        case 3:
            col |= 0xE4;
 80006f2:	683b      	ldr	r3, [r7, #0]
 80006f4:	f043 03e4 	orr.w	r3, r3, #228	; 0xe4
 80006f8:	603b      	str	r3, [r7, #0]
            break;
 80006fa:	bf00      	nop

    }

    lcd_send_cmd (col);
 80006fc:	683b      	ldr	r3, [r7, #0]
 80006fe:	b2db      	uxtb	r3, r3
 8000700:	4618      	mov	r0, r3
 8000702:	f7ff ff5b 	bl	80005bc <lcd_send_cmd>
}
 8000706:	bf00      	nop
 8000708:	3708      	adds	r7, #8
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop

08000710 <lcd_init>:


void lcd_init (void) // Inicializacion de la placa
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	Espera(50);  // wait for >40ms
 8000714:	2032      	movs	r0, #50	; 0x32
 8000716:	f7ff fed3 	bl	80004c0 <Espera>
	lcd_send_cmd (0x30);
 800071a:	2030      	movs	r0, #48	; 0x30
 800071c:	f7ff ff4e 	bl	80005bc <lcd_send_cmd>
	Espera(5);  // wait for >4.1ms
 8000720:	2005      	movs	r0, #5
 8000722:	f7ff fecd 	bl	80004c0 <Espera>
	lcd_send_cmd (0x30);
 8000726:	2030      	movs	r0, #48	; 0x30
 8000728:	f7ff ff48 	bl	80005bc <lcd_send_cmd>
	Espera(1);  // wait for >100us
 800072c:	2001      	movs	r0, #1
 800072e:	f7ff fec7 	bl	80004c0 <Espera>
	lcd_send_cmd (0x30);
 8000732:	2030      	movs	r0, #48	; 0x30
 8000734:	f7ff ff42 	bl	80005bc <lcd_send_cmd>
	Espera(10);
 8000738:	200a      	movs	r0, #10
 800073a:	f7ff fec1 	bl	80004c0 <Espera>
	lcd_send_cmd (0x20);  // 4bit mode
 800073e:	2020      	movs	r0, #32
 8000740:	f7ff ff3c 	bl	80005bc <lcd_send_cmd>
	Espera(10);
 8000744:	200a      	movs	r0, #10
 8000746:	f7ff febb 	bl	80004c0 <Espera>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 800074a:	2028      	movs	r0, #40	; 0x28
 800074c:	f7ff ff36 	bl	80005bc <lcd_send_cmd>
	Espera(1);
 8000750:	2001      	movs	r0, #1
 8000752:	f7ff feb5 	bl	80004c0 <Espera>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000756:	2008      	movs	r0, #8
 8000758:	f7ff ff30 	bl	80005bc <lcd_send_cmd>
	Espera(1);
 800075c:	2001      	movs	r0, #1
 800075e:	f7ff feaf 	bl	80004c0 <Espera>
	lcd_send_cmd (0x01);  // clear display
 8000762:	2001      	movs	r0, #1
 8000764:	f7ff ff2a 	bl	80005bc <lcd_send_cmd>
	Espera(1);
 8000768:	2001      	movs	r0, #1
 800076a:	f7ff fea9 	bl	80004c0 <Espera>
	Espera(1);
 800076e:	2001      	movs	r0, #1
 8000770:	f7ff fea6 	bl	80004c0 <Espera>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000774:	2006      	movs	r0, #6
 8000776:	f7ff ff21 	bl	80005bc <lcd_send_cmd>
	Espera(1);
 800077a:	2001      	movs	r0, #1
 800077c:	f7ff fea0 	bl	80004c0 <Espera>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000780:	200c      	movs	r0, #12
 8000782:	f7ff ff1b 	bl	80005bc <lcd_send_cmd>
	lcd_clear ();
 8000786:	f7ff ff79 	bl	800067c <lcd_clear>
}
 800078a:	bf00      	nop
 800078c:	bd80      	pop	{r7, pc}

0800078e <lcd_send_string>:

void lcd_send_string (char *str) // envia cadena de caracteres
{
 800078e:	b580      	push	{r7, lr}
 8000790:	b082      	sub	sp, #8
 8000792:	af00      	add	r7, sp, #0
 8000794:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000796:	e006      	b.n	80007a6 <lcd_send_string+0x18>
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	1c5a      	adds	r2, r3, #1
 800079c:	607a      	str	r2, [r7, #4]
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	4618      	mov	r0, r3
 80007a2:	f7ff ff3b 	bl	800061c <lcd_send_data>
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d1f4      	bne.n	8000798 <lcd_send_string+0xa>
}
 80007ae:	bf00      	nop
 80007b0:	bf00      	nop
 80007b2:	3708      	adds	r7, #8
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}

080007b8 <display>:

void display(int mode){
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
	static int prev_mode = 3;

	if(mode != prev_mode){
 80007c0:	4b40      	ldr	r3, [pc, #256]	; (80008c4 <display+0x10c>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	687a      	ldr	r2, [r7, #4]
 80007c6:	429a      	cmp	r2, r3
 80007c8:	d074      	beq.n	80008b4 <display+0xfc>
		switch(mode){
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d003      	beq.n	80007d8 <display+0x20>
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	2b01      	cmp	r3, #1
 80007d4:	d032      	beq.n	800083c <display+0x84>
 80007d6:	e063      	b.n	80008a0 <display+0xe8>
			case 0:		//Modo automático
			  	lcd_clear ();
 80007d8:	f7ff ff50 	bl	800067c <lcd_clear>
			  	lcd_put_cur(0, 0);
 80007dc:	2100      	movs	r1, #0
 80007de:	2000      	movs	r0, #0
 80007e0:	f7ff ff64 	bl	80006ac <lcd_put_cur>
			  	lcd_send_string ("Modo automatico");
 80007e4:	4838      	ldr	r0, [pc, #224]	; (80008c8 <display+0x110>)
 80007e6:	f7ff ffd2 	bl	800078e <lcd_send_string>
			  	Espera(1);
 80007ea:	2001      	movs	r0, #1
 80007ec:	f7ff fe68 	bl	80004c0 <Espera>
			  	lcd_put_cur(1, 0);
 80007f0:	2100      	movs	r1, #0
 80007f2:	2001      	movs	r0, #1
 80007f4:	f7ff ff5a 	bl	80006ac <lcd_put_cur>
			  	lcd_send_string ("Nvl: ");
 80007f8:	4834      	ldr	r0, [pc, #208]	; (80008cc <display+0x114>)
 80007fa:	f7ff ffc8 	bl	800078e <lcd_send_string>
			  	Espera(1);
 80007fe:	2001      	movs	r0, #1
 8000800:	f7ff fe5e 	bl	80004c0 <Espera>
			  	lcd_put_cur(1, 8);
 8000804:	2108      	movs	r1, #8
 8000806:	2001      	movs	r0, #1
 8000808:	f7ff ff50 	bl	80006ac <lcd_put_cur>
			  	lcd_send_data(1);   // Aqui va la variable de nivel
 800080c:	2001      	movs	r0, #1
 800080e:	f7ff ff05 	bl	800061c <lcd_send_data>
			  	Espera(1);
 8000812:	2001      	movs	r0, #1
 8000814:	f7ff fe54 	bl	80004c0 <Espera>
			  	lcd_put_cur(2, 0);
 8000818:	2100      	movs	r1, #0
 800081a:	2002      	movs	r0, #2
 800081c:	f7ff ff46 	bl	80006ac <lcd_put_cur>
			  	lcd_send_string ("Apra: ");	  	//Necesito una forma corta de escribir apertura
 8000820:	482b      	ldr	r0, [pc, #172]	; (80008d0 <display+0x118>)
 8000822:	f7ff ffb4 	bl	800078e <lcd_send_string>
			  	Espera(1);
 8000826:	2001      	movs	r0, #1
 8000828:	f7ff fe4a 	bl	80004c0 <Espera>
			  	lcd_put_cur(2, 8);
 800082c:	2108      	movs	r1, #8
 800082e:	2002      	movs	r0, #2
 8000830:	f7ff ff3c 	bl	80006ac <lcd_put_cur>
			  	lcd_send_data(1);	  		   //Aqui va la variable de apertura
 8000834:	2001      	movs	r0, #1
 8000836:	f7ff fef1 	bl	800061c <lcd_send_data>
			  	break;
 800083a:	e03c      	b.n	80008b6 <display+0xfe>

			case 1:		//Modo manual
			  	lcd_clear ();
 800083c:	f7ff ff1e 	bl	800067c <lcd_clear>
			  	lcd_put_cur(0, 0);
 8000840:	2100      	movs	r1, #0
 8000842:	2000      	movs	r0, #0
 8000844:	f7ff ff32 	bl	80006ac <lcd_put_cur>
			  	lcd_send_string ("Modo manual");
 8000848:	4822      	ldr	r0, [pc, #136]	; (80008d4 <display+0x11c>)
 800084a:	f7ff ffa0 	bl	800078e <lcd_send_string>
			  	Espera(1);
 800084e:	2001      	movs	r0, #1
 8000850:	f7ff fe36 	bl	80004c0 <Espera>
			  	lcd_put_cur(1, 0);
 8000854:	2100      	movs	r1, #0
 8000856:	2001      	movs	r0, #1
 8000858:	f7ff ff28 	bl	80006ac <lcd_put_cur>
			  	lcd_send_string ("Nvl: ");
 800085c:	481b      	ldr	r0, [pc, #108]	; (80008cc <display+0x114>)
 800085e:	f7ff ff96 	bl	800078e <lcd_send_string>
			  	Espera(1);
 8000862:	2001      	movs	r0, #1
 8000864:	f7ff fe2c 	bl	80004c0 <Espera>
			  	lcd_put_cur(1, 8);
 8000868:	2108      	movs	r1, #8
 800086a:	2001      	movs	r0, #1
 800086c:	f7ff ff1e 	bl	80006ac <lcd_put_cur>
			  	lcd_send_data(1);   // Aqui va la variable de nivel
 8000870:	2001      	movs	r0, #1
 8000872:	f7ff fed3 	bl	800061c <lcd_send_data>
			  	Espera(1);
 8000876:	2001      	movs	r0, #1
 8000878:	f7ff fe22 	bl	80004c0 <Espera>
			  	lcd_put_cur(2, 0);
 800087c:	2100      	movs	r1, #0
 800087e:	2002      	movs	r0, #2
 8000880:	f7ff ff14 	bl	80006ac <lcd_put_cur>
			  	lcd_send_string ("Apra: ");	  	//Necesito una forma corta de escribir apertura
 8000884:	4812      	ldr	r0, [pc, #72]	; (80008d0 <display+0x118>)
 8000886:	f7ff ff82 	bl	800078e <lcd_send_string>
			  	Espera(1);
 800088a:	2001      	movs	r0, #1
 800088c:	f7ff fe18 	bl	80004c0 <Espera>
			  	lcd_put_cur(2, 8);
 8000890:	2108      	movs	r1, #8
 8000892:	2002      	movs	r0, #2
 8000894:	f7ff ff0a 	bl	80006ac <lcd_put_cur>
			  	lcd_send_data(1);	  		   //Aqui va la variable de apertura
 8000898:	2001      	movs	r0, #1
 800089a:	f7ff febf 	bl	800061c <lcd_send_data>
			  	break;
 800089e:	e00a      	b.n	80008b6 <display+0xfe>

			 default:		//Modo de bloqueo de emergencia

			    lcd_clear ();
 80008a0:	f7ff feec 	bl	800067c <lcd_clear>
			    lcd_put_cur(0, 0);
 80008a4:	2100      	movs	r1, #0
 80008a6:	2000      	movs	r0, #0
 80008a8:	f7ff ff00 	bl	80006ac <lcd_put_cur>
			  	lcd_send_string ("EMERGENCIA");
 80008ac:	480a      	ldr	r0, [pc, #40]	; (80008d8 <display+0x120>)
 80008ae:	f7ff ff6e 	bl	800078e <lcd_send_string>
			  	break;
 80008b2:	e000      	b.n	80008b6 <display+0xfe>
		}
	}
 80008b4:	bf00      	nop
	prev_mode = mode;
 80008b6:	4a03      	ldr	r2, [pc, #12]	; (80008c4 <display+0x10c>)
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	6013      	str	r3, [r2, #0]
}
 80008bc:	bf00      	nop
 80008be:	3708      	adds	r7, #8
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	20000000 	.word	0x20000000
 80008c8:	08004f54 	.word	0x08004f54
 80008cc:	08004f64 	.word	0x08004f64
 80008d0:	08004f6c 	.word	0x08004f6c
 80008d4:	08004f74 	.word	0x08004f74
 80008d8:	08004f80 	.word	0x08004f80

080008dc <zumba>:

void zumba(int on){
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
	if (on == 0){
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d104      	bne.n	80008f4 <zumba+0x18>
		htim2.Instance->CCR2 = 0;
 80008ea:	4b0d      	ldr	r3, [pc, #52]	; (8000920 <zumba+0x44>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	2200      	movs	r2, #0
 80008f0:	639a      	str	r2, [r3, #56]	; 0x38
		htim2.Instance->CCR2 = 500;
		Espera(1000);
		htim2.Instance->CCR2 = 1000;
		Espera(1000);
	}
}
 80008f2:	e011      	b.n	8000918 <zumba+0x3c>
		htim2.Instance->CCR2 = 500;
 80008f4:	4b0a      	ldr	r3, [pc, #40]	; (8000920 <zumba+0x44>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80008fc:	639a      	str	r2, [r3, #56]	; 0x38
		Espera(1000);
 80008fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000902:	f7ff fddd 	bl	80004c0 <Espera>
		htim2.Instance->CCR2 = 1000;
 8000906:	4b06      	ldr	r3, [pc, #24]	; (8000920 <zumba+0x44>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800090e:	639a      	str	r2, [r3, #56]	; 0x38
		Espera(1000);
 8000910:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000914:	f7ff fdd4 	bl	80004c0 <Espera>
}
 8000918:	bf00      	nop
 800091a:	3708      	adds	r7, #8
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	200001a0 	.word	0x200001a0

08000924 <esclusa>:

void esclusa(int value){
 8000924:	b480      	push	{r7}
 8000926:	b083      	sub	sp, #12
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
	if((value >= 0) && (value <= 100))
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	2b00      	cmp	r3, #0
 8000930:	db08      	blt.n	8000944 <esclusa+0x20>
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	2b64      	cmp	r3, #100	; 0x64
 8000936:	dc05      	bgt.n	8000944 <esclusa+0x20>
		htim2.Instance->CCR1 = value + 25;
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	f103 0219 	add.w	r2, r3, #25
 800093e:	4b04      	ldr	r3, [pc, #16]	; (8000950 <esclusa+0x2c>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000944:	bf00      	nop
 8000946:	370c      	adds	r7, #12
 8000948:	46bd      	mov	sp, r7
 800094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094e:	4770      	bx	lr
 8000950:	200001a0 	.word	0x200001a0

08000954 <ajuste_pote>:

int ajuste_pote(int* value){	// [MIN MAX] -> [0 100]
 8000954:	b480      	push	{r7}
 8000956:	b083      	sub	sp, #12
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]

}
 800095c:	bf00      	nop
 800095e:	4618      	mov	r0, r3
 8000960:	370c      	adds	r7, #12
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr

0800096a <ajuste_nivel>:

int ajuste_nivel(int* value){  // [MIN MAX] -> [100 0]
 800096a:	b480      	push	{r7}
 800096c:	b083      	sub	sp, #12
 800096e:	af00      	add	r7, sp, #0
 8000970:	6078      	str	r0, [r7, #4]

}
 8000972:	bf00      	nop
 8000974:	4618      	mov	r0, r3
 8000976:	370c      	adds	r7, #12
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr

08000980 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000984:	f000 fddc 	bl	8001540 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000988:	f000 f8aa 	bl	8000ae0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800098c:	f000 fa8e 	bl	8000eac <MX_GPIO_Init>
  MX_DMA_Init();
 8000990:	f000 fa64 	bl	8000e5c <MX_DMA_Init>
  MX_ADC1_Init();
 8000994:	f000 f90e 	bl	8000bb4 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000998:	f000 f95e 	bl	8000c58 <MX_ADC2_Init>
  MX_I2C1_Init();
 800099c:	f000 f9ae 	bl	8000cfc <MX_I2C1_Init>
  MX_TIM2_Init();
 80009a0:	f000 f9da 	bl	8000d58 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start_DMA(&hadc1, adcbuffer_pote, 2);	//Handle, buffer, tamaño del buffer
 80009a4:	2202      	movs	r2, #2
 80009a6:	4942      	ldr	r1, [pc, #264]	; (8000ab0 <main+0x130>)
 80009a8:	4842      	ldr	r0, [pc, #264]	; (8000ab4 <main+0x134>)
 80009aa:	f000 ff8f 	bl	80018cc <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc2, adcbuffer_nivel, 2);
 80009ae:	2202      	movs	r2, #2
 80009b0:	4941      	ldr	r1, [pc, #260]	; (8000ab8 <main+0x138>)
 80009b2:	4842      	ldr	r0, [pc, #264]	; (8000abc <main+0x13c>)
 80009b4:	f000 ff8a 	bl	80018cc <HAL_ADC_Start_DMA>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80009b8:	2100      	movs	r1, #0
 80009ba:	4841      	ldr	r0, [pc, #260]	; (8000ac0 <main+0x140>)
 80009bc:	f003 fb70 	bl	80040a0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80009c0:	2104      	movs	r1, #4
 80009c2:	483f      	ldr	r0, [pc, #252]	; (8000ac0 <main+0x140>)
 80009c4:	f003 fb6c 	bl	80040a0 <HAL_TIM_PWM_Start>

  Espera(500);
 80009c8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009cc:	f7ff fd78 	bl	80004c0 <Espera>
  lcd_init ();
 80009d0:	f7ff fe9e 	bl	8000710 <lcd_init>
  Espera(1000);
 80009d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009d8:	f7ff fd72 	bl	80004c0 <Espera>
  lcd_send_cmd(0x80 || 0x00);
 80009dc:	2001      	movs	r0, #1
 80009de:	f7ff fded 	bl	80005bc <lcd_send_cmd>
  Espera(1000);
 80009e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009e6:	f7ff fd6b 	bl	80004c0 <Espera>
  lcd_send_string("PRUEBA");
 80009ea:	4836      	ldr	r0, [pc, #216]	; (8000ac4 <main+0x144>)
 80009ec:	f7ff fecf 	bl	800078e <lcd_send_string>

  Espera(1000);
 80009f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009f4:	f7ff fd64 	bl	80004c0 <Espera>
	  Espera(2000);
*/


	//Cambio de modo (1-automático 0-manual)
	 if((mode != 2) && flag_cambio /*!debouncer(&flag_cambio, GPIOE, GPIO_PIN_2)*/){
 80009f8:	4b33      	ldr	r3, [pc, #204]	; (8000ac8 <main+0x148>)
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	2b02      	cmp	r3, #2
 80009fe:	d012      	beq.n	8000a26 <main+0xa6>
 8000a00:	4b32      	ldr	r3, [pc, #200]	; (8000acc <main+0x14c>)
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	b2db      	uxtb	r3, r3
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d00d      	beq.n	8000a26 <main+0xa6>
		 flag_cambio = 0;
 8000a0a:	4b30      	ldr	r3, [pc, #192]	; (8000acc <main+0x14c>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	701a      	strb	r2, [r3, #0]
		 mode = (mode + 1) % 2;
 8000a10:	4b2d      	ldr	r3, [pc, #180]	; (8000ac8 <main+0x148>)
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	3301      	adds	r3, #1
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	f003 0301 	and.w	r3, r3, #1
 8000a1c:	bfb8      	it	lt
 8000a1e:	425b      	neglt	r3, r3
 8000a20:	b2da      	uxtb	r2, r3
 8000a22:	4b29      	ldr	r3, [pc, #164]	; (8000ac8 <main+0x148>)
 8000a24:	701a      	strb	r2, [r3, #0]
	 }
	 //Desarme del modo de alerta
	 if(flag_rearme /*!debouncer(&flag_rearme, GPIOE, GPIO_PIN_4)*/){
 8000a26:	4b2a      	ldr	r3, [pc, #168]	; (8000ad0 <main+0x150>)
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	b2db      	uxtb	r3, r3
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d005      	beq.n	8000a3c <main+0xbc>
		 flag_rearme = 0;
 8000a30:	4b27      	ldr	r3, [pc, #156]	; (8000ad0 <main+0x150>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	701a      	strb	r2, [r3, #0]
		 //if(mando de la esclusa totalmente cerrado){
		 	  mode = 1;
 8000a36:	4b24      	ldr	r3, [pc, #144]	; (8000ac8 <main+0x148>)
 8000a38:	2201      	movs	r2, #1
 8000a3a:	701a      	strb	r2, [r3, #0]
	  	 //}
	  }
	  //Armado del modo de alerta PREFERENTE POR ORDEN IMPORTANTE
	  if(flag_alerta /*!debouncer(&flag_alerta, GPIOE, GPIO_PIN_3)*/){
 8000a3c:	4b25      	ldr	r3, [pc, #148]	; (8000ad4 <main+0x154>)
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	b2db      	uxtb	r3, r3
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d005      	beq.n	8000a52 <main+0xd2>
		  flag_alerta = 0;
 8000a46:	4b23      	ldr	r3, [pc, #140]	; (8000ad4 <main+0x154>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	701a      	strb	r2, [r3, #0]
		  mode = 2;
 8000a4c:	4b1e      	ldr	r3, [pc, #120]	; (8000ac8 <main+0x148>)
 8000a4e:	2202      	movs	r2, #2
 8000a50:	701a      	strb	r2, [r3, #0]
	  }

	  //Verificaciones independientes de seguridad (capaces de activar el modo de emergencia)

	  switch(mode){
 8000a52:	4b1d      	ldr	r3, [pc, #116]	; (8000ac8 <main+0x148>)
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d002      	beq.n	8000a60 <main+0xe0>
 8000a5a:	2b01      	cmp	r3, #1
 8000a5c:	d00e      	beq.n	8000a7c <main+0xfc>
 8000a5e:	e01b      	b.n	8000a98 <main+0x118>

	  	  case 0:		//Modo automático
	  		  //Led verde
	  		  //Esclusa obedece al niivel de agua/velocidad de llenado-vaciado
	  		  esclusa(ajuste_nivel(adcvalue_nivel));
 8000a60:	481d      	ldr	r0, [pc, #116]	; (8000ad8 <main+0x158>)
 8000a62:	f7ff ff82 	bl	800096a <ajuste_nivel>
 8000a66:	4603      	mov	r3, r0
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f7ff ff5b 	bl	8000924 <esclusa>
	  		  //Pantalla informa del modo-nivel-apertura
	  		  display(0);
 8000a6e:	2000      	movs	r0, #0
 8000a70:	f7ff fea2 	bl	80007b8 <display>
	  		  zumba(0);
 8000a74:	2000      	movs	r0, #0
 8000a76:	f7ff ff31 	bl	80008dc <zumba>
	  		  break;
 8000a7a:	e018      	b.n	8000aae <main+0x12e>

	  	  case 1:		//Modo manual
	  		  //Led amarillo
	  		  //Esclusa obedece al mando del potenciómetro
	  		  esclusa(ajuste_pote(adcvalue_pote));
 8000a7c:	4817      	ldr	r0, [pc, #92]	; (8000adc <main+0x15c>)
 8000a7e:	f7ff ff69 	bl	8000954 <ajuste_pote>
 8000a82:	4603      	mov	r3, r0
 8000a84:	4618      	mov	r0, r3
 8000a86:	f7ff ff4d 	bl	8000924 <esclusa>
	  		  //Pantalla informa del modo-nivel-apertura
			  display(1);
 8000a8a:	2001      	movs	r0, #1
 8000a8c:	f7ff fe94 	bl	80007b8 <display>
	  		  zumba(0);
 8000a90:	2000      	movs	r0, #0
 8000a92:	f7ff ff23 	bl	80008dc <zumba>
	  		  break;
 8000a96:	e00a      	b.n	8000aae <main+0x12e>

	  	  default:		//Modo de bloqueo de emergencia
	  		  //Cerrar la esclusa totalmente
	  		  htim2.Instance->CCR1 = 25;  // duty cycle is .5 ms, 2.5% of 20ms (0º)
 8000a98:	4b09      	ldr	r3, [pc, #36]	; (8000ac0 <main+0x140>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	2219      	movs	r2, #25
 8000a9e:	635a      	str	r2, [r3, #52]	; 0x34
	  		  //Leds rojo parpadeando
	  		  //Zumbador dando por culo
	  		  display(2);
 8000aa0:	2002      	movs	r0, #2
 8000aa2:	f7ff fe89 	bl	80007b8 <display>
	  		  zumba(1);
 8000aa6:	2001      	movs	r0, #1
 8000aa8:	f7ff ff18 	bl	80008dc <zumba>
	  		  //Pantalla diciento EMERGENCIA
	  		  break;
 8000aac:	bf00      	nop
	 if((mode != 2) && flag_cambio /*!debouncer(&flag_cambio, GPIOE, GPIO_PIN_2)*/){
 8000aae:	e7a3      	b.n	80009f8 <main+0x78>
 8000ab0:	20000124 	.word	0x20000124
 8000ab4:	200000d0 	.word	0x200000d0
 8000ab8:	20000248 	.word	0x20000248
 8000abc:	20000030 	.word	0x20000030
 8000ac0:	200001a0 	.word	0x200001a0
 8000ac4:	08004f8c 	.word	0x08004f8c
 8000ac8:	2000002c 	.word	0x2000002c
 8000acc:	200000cc 	.word	0x200000cc
 8000ad0:	2000019c 	.word	0x2000019c
 8000ad4:	20000120 	.word	0x20000120
 8000ad8:	20000118 	.word	0x20000118
 8000adc:	2000012c 	.word	0x2000012c

08000ae0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b094      	sub	sp, #80	; 0x50
 8000ae4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ae6:	f107 0320 	add.w	r3, r7, #32
 8000aea:	2230      	movs	r2, #48	; 0x30
 8000aec:	2100      	movs	r1, #0
 8000aee:	4618      	mov	r0, r3
 8000af0:	f004 fa1c 	bl	8004f2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000af4:	f107 030c 	add.w	r3, r7, #12
 8000af8:	2200      	movs	r2, #0
 8000afa:	601a      	str	r2, [r3, #0]
 8000afc:	605a      	str	r2, [r3, #4]
 8000afe:	609a      	str	r2, [r3, #8]
 8000b00:	60da      	str	r2, [r3, #12]
 8000b02:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b04:	2300      	movs	r3, #0
 8000b06:	60bb      	str	r3, [r7, #8]
 8000b08:	4b28      	ldr	r3, [pc, #160]	; (8000bac <SystemClock_Config+0xcc>)
 8000b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0c:	4a27      	ldr	r2, [pc, #156]	; (8000bac <SystemClock_Config+0xcc>)
 8000b0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b12:	6413      	str	r3, [r2, #64]	; 0x40
 8000b14:	4b25      	ldr	r3, [pc, #148]	; (8000bac <SystemClock_Config+0xcc>)
 8000b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b1c:	60bb      	str	r3, [r7, #8]
 8000b1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b20:	2300      	movs	r3, #0
 8000b22:	607b      	str	r3, [r7, #4]
 8000b24:	4b22      	ldr	r3, [pc, #136]	; (8000bb0 <SystemClock_Config+0xd0>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a21      	ldr	r2, [pc, #132]	; (8000bb0 <SystemClock_Config+0xd0>)
 8000b2a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b2e:	6013      	str	r3, [r2, #0]
 8000b30:	4b1f      	ldr	r3, [pc, #124]	; (8000bb0 <SystemClock_Config+0xd0>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b38:	607b      	str	r3, [r7, #4]
 8000b3a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b40:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b44:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b46:	2302      	movs	r3, #2
 8000b48:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b4a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b50:	2304      	movs	r3, #4
 8000b52:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 90;
 8000b54:	235a      	movs	r3, #90	; 0x5a
 8000b56:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b58:	2302      	movs	r3, #2
 8000b5a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000b5c:	2307      	movs	r3, #7
 8000b5e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b60:	f107 0320 	add.w	r3, r7, #32
 8000b64:	4618      	mov	r0, r3
 8000b66:	f002 fcdb 	bl	8003520 <HAL_RCC_OscConfig>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000b70:	f000 fa1e 	bl	8000fb0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b74:	230f      	movs	r3, #15
 8000b76:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b78:	2302      	movs	r3, #2
 8000b7a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b80:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b84:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b8a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b8c:	f107 030c 	add.w	r3, r7, #12
 8000b90:	2102      	movs	r1, #2
 8000b92:	4618      	mov	r0, r3
 8000b94:	f002 ff3c 	bl	8003a10 <HAL_RCC_ClockConfig>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000b9e:	f000 fa07 	bl	8000fb0 <Error_Handler>
  }
}
 8000ba2:	bf00      	nop
 8000ba4:	3750      	adds	r7, #80	; 0x50
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	40023800 	.word	0x40023800
 8000bb0:	40007000 	.word	0x40007000

08000bb4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b084      	sub	sp, #16
 8000bb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000bba:	463b      	mov	r3, r7
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	601a      	str	r2, [r3, #0]
 8000bc0:	605a      	str	r2, [r3, #4]
 8000bc2:	609a      	str	r2, [r3, #8]
 8000bc4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000bc6:	4b21      	ldr	r3, [pc, #132]	; (8000c4c <MX_ADC1_Init+0x98>)
 8000bc8:	4a21      	ldr	r2, [pc, #132]	; (8000c50 <MX_ADC1_Init+0x9c>)
 8000bca:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000bcc:	4b1f      	ldr	r3, [pc, #124]	; (8000c4c <MX_ADC1_Init+0x98>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000bd2:	4b1e      	ldr	r3, [pc, #120]	; (8000c4c <MX_ADC1_Init+0x98>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000bd8:	4b1c      	ldr	r3, [pc, #112]	; (8000c4c <MX_ADC1_Init+0x98>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000bde:	4b1b      	ldr	r3, [pc, #108]	; (8000c4c <MX_ADC1_Init+0x98>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000be4:	4b19      	ldr	r3, [pc, #100]	; (8000c4c <MX_ADC1_Init+0x98>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000bec:	4b17      	ldr	r3, [pc, #92]	; (8000c4c <MX_ADC1_Init+0x98>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bf2:	4b16      	ldr	r3, [pc, #88]	; (8000c4c <MX_ADC1_Init+0x98>)
 8000bf4:	4a17      	ldr	r2, [pc, #92]	; (8000c54 <MX_ADC1_Init+0xa0>)
 8000bf6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000bf8:	4b14      	ldr	r3, [pc, #80]	; (8000c4c <MX_ADC1_Init+0x98>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000bfe:	4b13      	ldr	r3, [pc, #76]	; (8000c4c <MX_ADC1_Init+0x98>)
 8000c00:	2201      	movs	r2, #1
 8000c02:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000c04:	4b11      	ldr	r3, [pc, #68]	; (8000c4c <MX_ADC1_Init+0x98>)
 8000c06:	2201      	movs	r2, #1
 8000c08:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c0c:	4b0f      	ldr	r3, [pc, #60]	; (8000c4c <MX_ADC1_Init+0x98>)
 8000c0e:	2201      	movs	r2, #1
 8000c10:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c12:	480e      	ldr	r0, [pc, #56]	; (8000c4c <MX_ADC1_Init+0x98>)
 8000c14:	f000 fcd6 	bl	80015c4 <HAL_ADC_Init>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000c1e:	f000 f9c7 	bl	8000fb0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000c22:	2305      	movs	r3, #5
 8000c24:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000c26:	2301      	movs	r3, #1
 8000c28:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c2e:	463b      	mov	r3, r7
 8000c30:	4619      	mov	r1, r3
 8000c32:	4806      	ldr	r0, [pc, #24]	; (8000c4c <MX_ADC1_Init+0x98>)
 8000c34:	f000 ff78 	bl	8001b28 <HAL_ADC_ConfigChannel>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000c3e:	f000 f9b7 	bl	8000fb0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c42:	bf00      	nop
 8000c44:	3710      	adds	r7, #16
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	200000d0 	.word	0x200000d0
 8000c50:	40012000 	.word	0x40012000
 8000c54:	0f000001 	.word	0x0f000001

08000c58 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b084      	sub	sp, #16
 8000c5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c5e:	463b      	mov	r3, r7
 8000c60:	2200      	movs	r2, #0
 8000c62:	601a      	str	r2, [r3, #0]
 8000c64:	605a      	str	r2, [r3, #4]
 8000c66:	609a      	str	r2, [r3, #8]
 8000c68:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8000c6a:	4b21      	ldr	r3, [pc, #132]	; (8000cf0 <MX_ADC2_Init+0x98>)
 8000c6c:	4a21      	ldr	r2, [pc, #132]	; (8000cf4 <MX_ADC2_Init+0x9c>)
 8000c6e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000c70:	4b1f      	ldr	r3, [pc, #124]	; (8000cf0 <MX_ADC2_Init+0x98>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000c76:	4b1e      	ldr	r3, [pc, #120]	; (8000cf0 <MX_ADC2_Init+0x98>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8000c7c:	4b1c      	ldr	r3, [pc, #112]	; (8000cf0 <MX_ADC2_Init+0x98>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000c82:	4b1b      	ldr	r3, [pc, #108]	; (8000cf0 <MX_ADC2_Init+0x98>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000c88:	4b19      	ldr	r3, [pc, #100]	; (8000cf0 <MX_ADC2_Init+0x98>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c90:	4b17      	ldr	r3, [pc, #92]	; (8000cf0 <MX_ADC2_Init+0x98>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c96:	4b16      	ldr	r3, [pc, #88]	; (8000cf0 <MX_ADC2_Init+0x98>)
 8000c98:	4a17      	ldr	r2, [pc, #92]	; (8000cf8 <MX_ADC2_Init+0xa0>)
 8000c9a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c9c:	4b14      	ldr	r3, [pc, #80]	; (8000cf0 <MX_ADC2_Init+0x98>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000ca2:	4b13      	ldr	r3, [pc, #76]	; (8000cf0 <MX_ADC2_Init+0x98>)
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8000ca8:	4b11      	ldr	r3, [pc, #68]	; (8000cf0 <MX_ADC2_Init+0x98>)
 8000caa:	2201      	movs	r2, #1
 8000cac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cb0:	4b0f      	ldr	r3, [pc, #60]	; (8000cf0 <MX_ADC2_Init+0x98>)
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000cb6:	480e      	ldr	r0, [pc, #56]	; (8000cf0 <MX_ADC2_Init+0x98>)
 8000cb8:	f000 fc84 	bl	80015c4 <HAL_ADC_Init>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 8000cc2:	f000 f975 	bl	8000fb0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000cc6:	2306      	movs	r3, #6
 8000cc8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000cd2:	463b      	mov	r3, r7
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4806      	ldr	r0, [pc, #24]	; (8000cf0 <MX_ADC2_Init+0x98>)
 8000cd8:	f000 ff26 	bl	8001b28 <HAL_ADC_ConfigChannel>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8000ce2:	f000 f965 	bl	8000fb0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000ce6:	bf00      	nop
 8000ce8:	3710      	adds	r7, #16
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	20000030 	.word	0x20000030
 8000cf4:	40012100 	.word	0x40012100
 8000cf8:	0f000001 	.word	0x0f000001

08000cfc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d00:	4b13      	ldr	r3, [pc, #76]	; (8000d50 <MX_I2C1_Init+0x54>)
 8000d02:	4a14      	ldr	r2, [pc, #80]	; (8000d54 <MX_I2C1_Init+0x58>)
 8000d04:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 50000;
 8000d06:	4b12      	ldr	r3, [pc, #72]	; (8000d50 <MX_I2C1_Init+0x54>)
 8000d08:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000d0c:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d0e:	4b10      	ldr	r3, [pc, #64]	; (8000d50 <MX_I2C1_Init+0x54>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000d14:	4b0e      	ldr	r3, [pc, #56]	; (8000d50 <MX_I2C1_Init+0x54>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d1a:	4b0d      	ldr	r3, [pc, #52]	; (8000d50 <MX_I2C1_Init+0x54>)
 8000d1c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d20:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d22:	4b0b      	ldr	r3, [pc, #44]	; (8000d50 <MX_I2C1_Init+0x54>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000d28:	4b09      	ldr	r3, [pc, #36]	; (8000d50 <MX_I2C1_Init+0x54>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d2e:	4b08      	ldr	r3, [pc, #32]	; (8000d50 <MX_I2C1_Init+0x54>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d34:	4b06      	ldr	r3, [pc, #24]	; (8000d50 <MX_I2C1_Init+0x54>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d3a:	4805      	ldr	r0, [pc, #20]	; (8000d50 <MX_I2C1_Init+0x54>)
 8000d3c:	f001 ffa4 	bl	8002c88 <HAL_I2C_Init>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 8000d46:	f000 f933 	bl	8000fb0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d4a:	bf00      	nop
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	20000078 	.word	0x20000078
 8000d54:	40005400 	.word	0x40005400

08000d58 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b08e      	sub	sp, #56	; 0x38
 8000d5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d5e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d62:	2200      	movs	r2, #0
 8000d64:	601a      	str	r2, [r3, #0]
 8000d66:	605a      	str	r2, [r3, #4]
 8000d68:	609a      	str	r2, [r3, #8]
 8000d6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d6c:	f107 0320 	add.w	r3, r7, #32
 8000d70:	2200      	movs	r2, #0
 8000d72:	601a      	str	r2, [r3, #0]
 8000d74:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d76:	1d3b      	adds	r3, r7, #4
 8000d78:	2200      	movs	r2, #0
 8000d7a:	601a      	str	r2, [r3, #0]
 8000d7c:	605a      	str	r2, [r3, #4]
 8000d7e:	609a      	str	r2, [r3, #8]
 8000d80:	60da      	str	r2, [r3, #12]
 8000d82:	611a      	str	r2, [r3, #16]
 8000d84:	615a      	str	r2, [r3, #20]
 8000d86:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d88:	4b33      	ldr	r3, [pc, #204]	; (8000e58 <MX_TIM2_Init+0x100>)
 8000d8a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d8e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 900-1;
 8000d90:	4b31      	ldr	r3, [pc, #196]	; (8000e58 <MX_TIM2_Init+0x100>)
 8000d92:	f240 3283 	movw	r2, #899	; 0x383
 8000d96:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d98:	4b2f      	ldr	r3, [pc, #188]	; (8000e58 <MX_TIM2_Init+0x100>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000d9e:	4b2e      	ldr	r3, [pc, #184]	; (8000e58 <MX_TIM2_Init+0x100>)
 8000da0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000da4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000da6:	4b2c      	ldr	r3, [pc, #176]	; (8000e58 <MX_TIM2_Init+0x100>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dac:	4b2a      	ldr	r3, [pc, #168]	; (8000e58 <MX_TIM2_Init+0x100>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000db2:	4829      	ldr	r0, [pc, #164]	; (8000e58 <MX_TIM2_Init+0x100>)
 8000db4:	f003 f85a 	bl	8003e6c <HAL_TIM_Base_Init>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000dbe:	f000 f8f7 	bl	8000fb0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dc6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000dc8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dcc:	4619      	mov	r1, r3
 8000dce:	4822      	ldr	r0, [pc, #136]	; (8000e58 <MX_TIM2_Init+0x100>)
 8000dd0:	f003 fbf8 	bl	80045c4 <HAL_TIM_ConfigClockSource>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000dda:	f000 f8e9 	bl	8000fb0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000dde:	481e      	ldr	r0, [pc, #120]	; (8000e58 <MX_TIM2_Init+0x100>)
 8000de0:	f003 f904 	bl	8003fec <HAL_TIM_PWM_Init>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000dea:	f000 f8e1 	bl	8000fb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dee:	2300      	movs	r3, #0
 8000df0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000df2:	2300      	movs	r3, #0
 8000df4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000df6:	f107 0320 	add.w	r3, r7, #32
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	4816      	ldr	r0, [pc, #88]	; (8000e58 <MX_TIM2_Init+0x100>)
 8000dfe:	f003 ffe1 	bl	8004dc4 <HAL_TIMEx_MasterConfigSynchronization>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000e08:	f000 f8d2 	bl	8000fb0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e0c:	2360      	movs	r3, #96	; 0x60
 8000e0e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000e10:	2300      	movs	r3, #0
 8000e12:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e14:	2300      	movs	r3, #0
 8000e16:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e1c:	1d3b      	adds	r3, r7, #4
 8000e1e:	2200      	movs	r2, #0
 8000e20:	4619      	mov	r1, r3
 8000e22:	480d      	ldr	r0, [pc, #52]	; (8000e58 <MX_TIM2_Init+0x100>)
 8000e24:	f003 fb0c 	bl	8004440 <HAL_TIM_PWM_ConfigChannel>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000e2e:	f000 f8bf 	bl	8000fb0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e32:	1d3b      	adds	r3, r7, #4
 8000e34:	2204      	movs	r2, #4
 8000e36:	4619      	mov	r1, r3
 8000e38:	4807      	ldr	r0, [pc, #28]	; (8000e58 <MX_TIM2_Init+0x100>)
 8000e3a:	f003 fb01 	bl	8004440 <HAL_TIM_PWM_ConfigChannel>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8000e44:	f000 f8b4 	bl	8000fb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000e48:	4803      	ldr	r0, [pc, #12]	; (8000e58 <MX_TIM2_Init+0x100>)
 8000e4a:	f000 fa35 	bl	80012b8 <HAL_TIM_MspPostInit>

}
 8000e4e:	bf00      	nop
 8000e50:	3738      	adds	r7, #56	; 0x38
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	200001a0 	.word	0x200001a0

08000e5c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000e62:	2300      	movs	r3, #0
 8000e64:	607b      	str	r3, [r7, #4]
 8000e66:	4b10      	ldr	r3, [pc, #64]	; (8000ea8 <MX_DMA_Init+0x4c>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6a:	4a0f      	ldr	r2, [pc, #60]	; (8000ea8 <MX_DMA_Init+0x4c>)
 8000e6c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e70:	6313      	str	r3, [r2, #48]	; 0x30
 8000e72:	4b0d      	ldr	r3, [pc, #52]	; (8000ea8 <MX_DMA_Init+0x4c>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e7a:	607b      	str	r3, [r7, #4]
 8000e7c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000e7e:	2200      	movs	r2, #0
 8000e80:	2100      	movs	r1, #0
 8000e82:	2038      	movs	r0, #56	; 0x38
 8000e84:	f001 f9b2 	bl	80021ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000e88:	2038      	movs	r0, #56	; 0x38
 8000e8a:	f001 f9cb 	bl	8002224 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000e8e:	2200      	movs	r2, #0
 8000e90:	2100      	movs	r1, #0
 8000e92:	203a      	movs	r0, #58	; 0x3a
 8000e94:	f001 f9aa 	bl	80021ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000e98:	203a      	movs	r0, #58	; 0x3a
 8000e9a:	f001 f9c3 	bl	8002224 <HAL_NVIC_EnableIRQ>

}
 8000e9e:	bf00      	nop
 8000ea0:	3708      	adds	r7, #8
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	40023800 	.word	0x40023800

08000eac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b08a      	sub	sp, #40	; 0x28
 8000eb0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb2:	f107 0314 	add.w	r3, r7, #20
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	601a      	str	r2, [r3, #0]
 8000eba:	605a      	str	r2, [r3, #4]
 8000ebc:	609a      	str	r2, [r3, #8]
 8000ebe:	60da      	str	r2, [r3, #12]
 8000ec0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	613b      	str	r3, [r7, #16]
 8000ec6:	4b2f      	ldr	r3, [pc, #188]	; (8000f84 <MX_GPIO_Init+0xd8>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eca:	4a2e      	ldr	r2, [pc, #184]	; (8000f84 <MX_GPIO_Init+0xd8>)
 8000ecc:	f043 0310 	orr.w	r3, r3, #16
 8000ed0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed2:	4b2c      	ldr	r3, [pc, #176]	; (8000f84 <MX_GPIO_Init+0xd8>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed6:	f003 0310 	and.w	r3, r3, #16
 8000eda:	613b      	str	r3, [r7, #16]
 8000edc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ede:	2300      	movs	r3, #0
 8000ee0:	60fb      	str	r3, [r7, #12]
 8000ee2:	4b28      	ldr	r3, [pc, #160]	; (8000f84 <MX_GPIO_Init+0xd8>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee6:	4a27      	ldr	r2, [pc, #156]	; (8000f84 <MX_GPIO_Init+0xd8>)
 8000ee8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000eec:	6313      	str	r3, [r2, #48]	; 0x30
 8000eee:	4b25      	ldr	r3, [pc, #148]	; (8000f84 <MX_GPIO_Init+0xd8>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ef6:	60fb      	str	r3, [r7, #12]
 8000ef8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000efa:	2300      	movs	r3, #0
 8000efc:	60bb      	str	r3, [r7, #8]
 8000efe:	4b21      	ldr	r3, [pc, #132]	; (8000f84 <MX_GPIO_Init+0xd8>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f02:	4a20      	ldr	r2, [pc, #128]	; (8000f84 <MX_GPIO_Init+0xd8>)
 8000f04:	f043 0301 	orr.w	r3, r3, #1
 8000f08:	6313      	str	r3, [r2, #48]	; 0x30
 8000f0a:	4b1e      	ldr	r3, [pc, #120]	; (8000f84 <MX_GPIO_Init+0xd8>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0e:	f003 0301 	and.w	r3, r3, #1
 8000f12:	60bb      	str	r3, [r7, #8]
 8000f14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f16:	2300      	movs	r3, #0
 8000f18:	607b      	str	r3, [r7, #4]
 8000f1a:	4b1a      	ldr	r3, [pc, #104]	; (8000f84 <MX_GPIO_Init+0xd8>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1e:	4a19      	ldr	r2, [pc, #100]	; (8000f84 <MX_GPIO_Init+0xd8>)
 8000f20:	f043 0302 	orr.w	r3, r3, #2
 8000f24:	6313      	str	r3, [r2, #48]	; 0x30
 8000f26:	4b17      	ldr	r3, [pc, #92]	; (8000f84 <MX_GPIO_Init+0xd8>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2a:	f003 0302 	and.w	r3, r3, #2
 8000f2e:	607b      	str	r3, [r7, #4]
 8000f30:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PE2 PE3 PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8000f32:	231c      	movs	r3, #28
 8000f34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f36:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f40:	f107 0314 	add.w	r3, r7, #20
 8000f44:	4619      	mov	r1, r3
 8000f46:	4810      	ldr	r0, [pc, #64]	; (8000f88 <MX_GPIO_Init+0xdc>)
 8000f48:	f001 fcea 	bl	8002920 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	2100      	movs	r1, #0
 8000f50:	2008      	movs	r0, #8
 8000f52:	f001 f94b 	bl	80021ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000f56:	2008      	movs	r0, #8
 8000f58:	f001 f964 	bl	8002224 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	2100      	movs	r1, #0
 8000f60:	2009      	movs	r0, #9
 8000f62:	f001 f943 	bl	80021ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000f66:	2009      	movs	r0, #9
 8000f68:	f001 f95c 	bl	8002224 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	2100      	movs	r1, #0
 8000f70:	200a      	movs	r0, #10
 8000f72:	f001 f93b 	bl	80021ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000f76:	200a      	movs	r0, #10
 8000f78:	f001 f954 	bl	8002224 <HAL_NVIC_EnableIRQ>

}
 8000f7c:	bf00      	nop
 8000f7e:	3728      	adds	r7, #40	; 0x28
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	40023800 	.word	0x40023800
 8000f88:	40021000 	.word	0x40021000

08000f8c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a04      	ldr	r2, [pc, #16]	; (8000fac <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d101      	bne.n	8000fa2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000f9e:	f000 faf1 	bl	8001584 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000fa2:	bf00      	nop
 8000fa4:	3708      	adds	r7, #8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	40010000 	.word	0x40010000

08000fb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fb4:	b672      	cpsid	i
}
 8000fb6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fb8:	e7fe      	b.n	8000fb8 <Error_Handler+0x8>
	...

08000fbc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	607b      	str	r3, [r7, #4]
 8000fc6:	4b10      	ldr	r3, [pc, #64]	; (8001008 <HAL_MspInit+0x4c>)
 8000fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fca:	4a0f      	ldr	r2, [pc, #60]	; (8001008 <HAL_MspInit+0x4c>)
 8000fcc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fd0:	6453      	str	r3, [r2, #68]	; 0x44
 8000fd2:	4b0d      	ldr	r3, [pc, #52]	; (8001008 <HAL_MspInit+0x4c>)
 8000fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fda:	607b      	str	r3, [r7, #4]
 8000fdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fde:	2300      	movs	r3, #0
 8000fe0:	603b      	str	r3, [r7, #0]
 8000fe2:	4b09      	ldr	r3, [pc, #36]	; (8001008 <HAL_MspInit+0x4c>)
 8000fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe6:	4a08      	ldr	r2, [pc, #32]	; (8001008 <HAL_MspInit+0x4c>)
 8000fe8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fec:	6413      	str	r3, [r2, #64]	; 0x40
 8000fee:	4b06      	ldr	r3, [pc, #24]	; (8001008 <HAL_MspInit+0x4c>)
 8000ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ff6:	603b      	str	r3, [r7, #0]
 8000ff8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ffa:	2007      	movs	r0, #7
 8000ffc:	f001 f8eb 	bl	80021d6 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001000:	bf00      	nop
 8001002:	3708      	adds	r7, #8
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	40023800 	.word	0x40023800

0800100c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b08c      	sub	sp, #48	; 0x30
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001014:	f107 031c 	add.w	r3, r7, #28
 8001018:	2200      	movs	r2, #0
 800101a:	601a      	str	r2, [r3, #0]
 800101c:	605a      	str	r2, [r3, #4]
 800101e:	609a      	str	r2, [r3, #8]
 8001020:	60da      	str	r2, [r3, #12]
 8001022:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a64      	ldr	r2, [pc, #400]	; (80011bc <HAL_ADC_MspInit+0x1b0>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d15e      	bne.n	80010ec <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800102e:	2300      	movs	r3, #0
 8001030:	61bb      	str	r3, [r7, #24]
 8001032:	4b63      	ldr	r3, [pc, #396]	; (80011c0 <HAL_ADC_MspInit+0x1b4>)
 8001034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001036:	4a62      	ldr	r2, [pc, #392]	; (80011c0 <HAL_ADC_MspInit+0x1b4>)
 8001038:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800103c:	6453      	str	r3, [r2, #68]	; 0x44
 800103e:	4b60      	ldr	r3, [pc, #384]	; (80011c0 <HAL_ADC_MspInit+0x1b4>)
 8001040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001042:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001046:	61bb      	str	r3, [r7, #24]
 8001048:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800104a:	2300      	movs	r3, #0
 800104c:	617b      	str	r3, [r7, #20]
 800104e:	4b5c      	ldr	r3, [pc, #368]	; (80011c0 <HAL_ADC_MspInit+0x1b4>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001052:	4a5b      	ldr	r2, [pc, #364]	; (80011c0 <HAL_ADC_MspInit+0x1b4>)
 8001054:	f043 0301 	orr.w	r3, r3, #1
 8001058:	6313      	str	r3, [r2, #48]	; 0x30
 800105a:	4b59      	ldr	r3, [pc, #356]	; (80011c0 <HAL_ADC_MspInit+0x1b4>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105e:	f003 0301 	and.w	r3, r3, #1
 8001062:	617b      	str	r3, [r7, #20]
 8001064:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001066:	2320      	movs	r3, #32
 8001068:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800106a:	2303      	movs	r3, #3
 800106c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106e:	2300      	movs	r3, #0
 8001070:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001072:	f107 031c 	add.w	r3, r7, #28
 8001076:	4619      	mov	r1, r3
 8001078:	4852      	ldr	r0, [pc, #328]	; (80011c4 <HAL_ADC_MspInit+0x1b8>)
 800107a:	f001 fc51 	bl	8002920 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800107e:	4b52      	ldr	r3, [pc, #328]	; (80011c8 <HAL_ADC_MspInit+0x1bc>)
 8001080:	4a52      	ldr	r2, [pc, #328]	; (80011cc <HAL_ADC_MspInit+0x1c0>)
 8001082:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001084:	4b50      	ldr	r3, [pc, #320]	; (80011c8 <HAL_ADC_MspInit+0x1bc>)
 8001086:	2200      	movs	r2, #0
 8001088:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800108a:	4b4f      	ldr	r3, [pc, #316]	; (80011c8 <HAL_ADC_MspInit+0x1bc>)
 800108c:	2200      	movs	r2, #0
 800108e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001090:	4b4d      	ldr	r3, [pc, #308]	; (80011c8 <HAL_ADC_MspInit+0x1bc>)
 8001092:	2200      	movs	r2, #0
 8001094:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_DISABLE;
 8001096:	4b4c      	ldr	r3, [pc, #304]	; (80011c8 <HAL_ADC_MspInit+0x1bc>)
 8001098:	2200      	movs	r2, #0
 800109a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800109c:	4b4a      	ldr	r3, [pc, #296]	; (80011c8 <HAL_ADC_MspInit+0x1bc>)
 800109e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80010a2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80010a4:	4b48      	ldr	r3, [pc, #288]	; (80011c8 <HAL_ADC_MspInit+0x1bc>)
 80010a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010aa:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80010ac:	4b46      	ldr	r3, [pc, #280]	; (80011c8 <HAL_ADC_MspInit+0x1bc>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80010b2:	4b45      	ldr	r3, [pc, #276]	; (80011c8 <HAL_ADC_MspInit+0x1bc>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010b8:	4b43      	ldr	r3, [pc, #268]	; (80011c8 <HAL_ADC_MspInit+0x1bc>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80010be:	4842      	ldr	r0, [pc, #264]	; (80011c8 <HAL_ADC_MspInit+0x1bc>)
 80010c0:	f001 f8be 	bl	8002240 <HAL_DMA_Init>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <HAL_ADC_MspInit+0xc2>
    {
      Error_Handler();
 80010ca:	f7ff ff71 	bl	8000fb0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4a3d      	ldr	r2, [pc, #244]	; (80011c8 <HAL_ADC_MspInit+0x1bc>)
 80010d2:	639a      	str	r2, [r3, #56]	; 0x38
 80010d4:	4a3c      	ldr	r2, [pc, #240]	; (80011c8 <HAL_ADC_MspInit+0x1bc>)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80010da:	2200      	movs	r2, #0
 80010dc:	2100      	movs	r1, #0
 80010de:	2012      	movs	r0, #18
 80010e0:	f001 f884 	bl	80021ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80010e4:	2012      	movs	r0, #18
 80010e6:	f001 f89d 	bl	8002224 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80010ea:	e063      	b.n	80011b4 <HAL_ADC_MspInit+0x1a8>
  else if(hadc->Instance==ADC2)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a37      	ldr	r2, [pc, #220]	; (80011d0 <HAL_ADC_MspInit+0x1c4>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d15e      	bne.n	80011b4 <HAL_ADC_MspInit+0x1a8>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80010f6:	2300      	movs	r3, #0
 80010f8:	613b      	str	r3, [r7, #16]
 80010fa:	4b31      	ldr	r3, [pc, #196]	; (80011c0 <HAL_ADC_MspInit+0x1b4>)
 80010fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010fe:	4a30      	ldr	r2, [pc, #192]	; (80011c0 <HAL_ADC_MspInit+0x1b4>)
 8001100:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001104:	6453      	str	r3, [r2, #68]	; 0x44
 8001106:	4b2e      	ldr	r3, [pc, #184]	; (80011c0 <HAL_ADC_MspInit+0x1b4>)
 8001108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800110a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800110e:	613b      	str	r3, [r7, #16]
 8001110:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001112:	2300      	movs	r3, #0
 8001114:	60fb      	str	r3, [r7, #12]
 8001116:	4b2a      	ldr	r3, [pc, #168]	; (80011c0 <HAL_ADC_MspInit+0x1b4>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111a:	4a29      	ldr	r2, [pc, #164]	; (80011c0 <HAL_ADC_MspInit+0x1b4>)
 800111c:	f043 0301 	orr.w	r3, r3, #1
 8001120:	6313      	str	r3, [r2, #48]	; 0x30
 8001122:	4b27      	ldr	r3, [pc, #156]	; (80011c0 <HAL_ADC_MspInit+0x1b4>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001126:	f003 0301 	and.w	r3, r3, #1
 800112a:	60fb      	str	r3, [r7, #12]
 800112c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800112e:	2340      	movs	r3, #64	; 0x40
 8001130:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001132:	2303      	movs	r3, #3
 8001134:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001136:	2300      	movs	r3, #0
 8001138:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800113a:	f107 031c 	add.w	r3, r7, #28
 800113e:	4619      	mov	r1, r3
 8001140:	4820      	ldr	r0, [pc, #128]	; (80011c4 <HAL_ADC_MspInit+0x1b8>)
 8001142:	f001 fbed 	bl	8002920 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8001146:	4b23      	ldr	r3, [pc, #140]	; (80011d4 <HAL_ADC_MspInit+0x1c8>)
 8001148:	4a23      	ldr	r2, [pc, #140]	; (80011d8 <HAL_ADC_MspInit+0x1cc>)
 800114a:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 800114c:	4b21      	ldr	r3, [pc, #132]	; (80011d4 <HAL_ADC_MspInit+0x1c8>)
 800114e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001152:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001154:	4b1f      	ldr	r3, [pc, #124]	; (80011d4 <HAL_ADC_MspInit+0x1c8>)
 8001156:	2200      	movs	r2, #0
 8001158:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800115a:	4b1e      	ldr	r3, [pc, #120]	; (80011d4 <HAL_ADC_MspInit+0x1c8>)
 800115c:	2200      	movs	r2, #0
 800115e:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_DISABLE;
 8001160:	4b1c      	ldr	r3, [pc, #112]	; (80011d4 <HAL_ADC_MspInit+0x1c8>)
 8001162:	2200      	movs	r2, #0
 8001164:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001166:	4b1b      	ldr	r3, [pc, #108]	; (80011d4 <HAL_ADC_MspInit+0x1c8>)
 8001168:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800116c:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800116e:	4b19      	ldr	r3, [pc, #100]	; (80011d4 <HAL_ADC_MspInit+0x1c8>)
 8001170:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001174:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 8001176:	4b17      	ldr	r3, [pc, #92]	; (80011d4 <HAL_ADC_MspInit+0x1c8>)
 8001178:	2200      	movs	r2, #0
 800117a:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800117c:	4b15      	ldr	r3, [pc, #84]	; (80011d4 <HAL_ADC_MspInit+0x1c8>)
 800117e:	2200      	movs	r2, #0
 8001180:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001182:	4b14      	ldr	r3, [pc, #80]	; (80011d4 <HAL_ADC_MspInit+0x1c8>)
 8001184:	2200      	movs	r2, #0
 8001186:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001188:	4812      	ldr	r0, [pc, #72]	; (80011d4 <HAL_ADC_MspInit+0x1c8>)
 800118a:	f001 f859 	bl	8002240 <HAL_DMA_Init>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <HAL_ADC_MspInit+0x18c>
      Error_Handler();
 8001194:	f7ff ff0c 	bl	8000fb0 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	4a0e      	ldr	r2, [pc, #56]	; (80011d4 <HAL_ADC_MspInit+0x1c8>)
 800119c:	639a      	str	r2, [r3, #56]	; 0x38
 800119e:	4a0d      	ldr	r2, [pc, #52]	; (80011d4 <HAL_ADC_MspInit+0x1c8>)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80011a4:	2200      	movs	r2, #0
 80011a6:	2100      	movs	r1, #0
 80011a8:	2012      	movs	r0, #18
 80011aa:	f001 f81f 	bl	80021ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80011ae:	2012      	movs	r0, #18
 80011b0:	f001 f838 	bl	8002224 <HAL_NVIC_EnableIRQ>
}
 80011b4:	bf00      	nop
 80011b6:	3730      	adds	r7, #48	; 0x30
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	40012000 	.word	0x40012000
 80011c0:	40023800 	.word	0x40023800
 80011c4:	40020000 	.word	0x40020000
 80011c8:	20000138 	.word	0x20000138
 80011cc:	40026410 	.word	0x40026410
 80011d0:	40012100 	.word	0x40012100
 80011d4:	200001e8 	.word	0x200001e8
 80011d8:	40026440 	.word	0x40026440

080011dc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b08a      	sub	sp, #40	; 0x28
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e4:	f107 0314 	add.w	r3, r7, #20
 80011e8:	2200      	movs	r2, #0
 80011ea:	601a      	str	r2, [r3, #0]
 80011ec:	605a      	str	r2, [r3, #4]
 80011ee:	609a      	str	r2, [r3, #8]
 80011f0:	60da      	str	r2, [r3, #12]
 80011f2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a19      	ldr	r2, [pc, #100]	; (8001260 <HAL_I2C_MspInit+0x84>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d12b      	bne.n	8001256 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011fe:	2300      	movs	r3, #0
 8001200:	613b      	str	r3, [r7, #16]
 8001202:	4b18      	ldr	r3, [pc, #96]	; (8001264 <HAL_I2C_MspInit+0x88>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001206:	4a17      	ldr	r2, [pc, #92]	; (8001264 <HAL_I2C_MspInit+0x88>)
 8001208:	f043 0302 	orr.w	r3, r3, #2
 800120c:	6313      	str	r3, [r2, #48]	; 0x30
 800120e:	4b15      	ldr	r3, [pc, #84]	; (8001264 <HAL_I2C_MspInit+0x88>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001212:	f003 0302 	and.w	r3, r3, #2
 8001216:	613b      	str	r3, [r7, #16]
 8001218:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800121a:	23c0      	movs	r3, #192	; 0xc0
 800121c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800121e:	2312      	movs	r3, #18
 8001220:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001222:	2301      	movs	r3, #1
 8001224:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001226:	2303      	movs	r3, #3
 8001228:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800122a:	2304      	movs	r3, #4
 800122c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800122e:	f107 0314 	add.w	r3, r7, #20
 8001232:	4619      	mov	r1, r3
 8001234:	480c      	ldr	r0, [pc, #48]	; (8001268 <HAL_I2C_MspInit+0x8c>)
 8001236:	f001 fb73 	bl	8002920 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800123a:	2300      	movs	r3, #0
 800123c:	60fb      	str	r3, [r7, #12]
 800123e:	4b09      	ldr	r3, [pc, #36]	; (8001264 <HAL_I2C_MspInit+0x88>)
 8001240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001242:	4a08      	ldr	r2, [pc, #32]	; (8001264 <HAL_I2C_MspInit+0x88>)
 8001244:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001248:	6413      	str	r3, [r2, #64]	; 0x40
 800124a:	4b06      	ldr	r3, [pc, #24]	; (8001264 <HAL_I2C_MspInit+0x88>)
 800124c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001252:	60fb      	str	r3, [r7, #12]
 8001254:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001256:	bf00      	nop
 8001258:	3728      	adds	r7, #40	; 0x28
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	40005400 	.word	0x40005400
 8001264:	40023800 	.word	0x40023800
 8001268:	40020400 	.word	0x40020400

0800126c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b084      	sub	sp, #16
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800127c:	d115      	bne.n	80012aa <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800127e:	2300      	movs	r3, #0
 8001280:	60fb      	str	r3, [r7, #12]
 8001282:	4b0c      	ldr	r3, [pc, #48]	; (80012b4 <HAL_TIM_Base_MspInit+0x48>)
 8001284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001286:	4a0b      	ldr	r2, [pc, #44]	; (80012b4 <HAL_TIM_Base_MspInit+0x48>)
 8001288:	f043 0301 	orr.w	r3, r3, #1
 800128c:	6413      	str	r3, [r2, #64]	; 0x40
 800128e:	4b09      	ldr	r3, [pc, #36]	; (80012b4 <HAL_TIM_Base_MspInit+0x48>)
 8001290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001292:	f003 0301 	and.w	r3, r3, #1
 8001296:	60fb      	str	r3, [r7, #12]
 8001298:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800129a:	2200      	movs	r2, #0
 800129c:	2100      	movs	r1, #0
 800129e:	201c      	movs	r0, #28
 80012a0:	f000 ffa4 	bl	80021ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80012a4:	201c      	movs	r0, #28
 80012a6:	f000 ffbd 	bl	8002224 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80012aa:	bf00      	nop
 80012ac:	3710      	adds	r7, #16
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	40023800 	.word	0x40023800

080012b8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b088      	sub	sp, #32
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c0:	f107 030c 	add.w	r3, r7, #12
 80012c4:	2200      	movs	r2, #0
 80012c6:	601a      	str	r2, [r3, #0]
 80012c8:	605a      	str	r2, [r3, #4]
 80012ca:	609a      	str	r2, [r3, #8]
 80012cc:	60da      	str	r2, [r3, #12]
 80012ce:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012d8:	d11d      	bne.n	8001316 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012da:	2300      	movs	r3, #0
 80012dc:	60bb      	str	r3, [r7, #8]
 80012de:	4b10      	ldr	r3, [pc, #64]	; (8001320 <HAL_TIM_MspPostInit+0x68>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	4a0f      	ldr	r2, [pc, #60]	; (8001320 <HAL_TIM_MspPostInit+0x68>)
 80012e4:	f043 0301 	orr.w	r3, r3, #1
 80012e8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ea:	4b0d      	ldr	r3, [pc, #52]	; (8001320 <HAL_TIM_MspPostInit+0x68>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	f003 0301 	and.w	r3, r3, #1
 80012f2:	60bb      	str	r3, [r7, #8]
 80012f4:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80012f6:	2303      	movs	r3, #3
 80012f8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012fa:	2302      	movs	r3, #2
 80012fc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fe:	2300      	movs	r3, #0
 8001300:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001302:	2300      	movs	r3, #0
 8001304:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001306:	2301      	movs	r3, #1
 8001308:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800130a:	f107 030c 	add.w	r3, r7, #12
 800130e:	4619      	mov	r1, r3
 8001310:	4804      	ldr	r0, [pc, #16]	; (8001324 <HAL_TIM_MspPostInit+0x6c>)
 8001312:	f001 fb05 	bl	8002920 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001316:	bf00      	nop
 8001318:	3720      	adds	r7, #32
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	40023800 	.word	0x40023800
 8001324:	40020000 	.word	0x40020000

08001328 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b08c      	sub	sp, #48	; 0x30
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001330:	2300      	movs	r3, #0
 8001332:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001334:	2300      	movs	r3, #0
 8001336:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8001338:	2200      	movs	r2, #0
 800133a:	6879      	ldr	r1, [r7, #4]
 800133c:	2019      	movs	r0, #25
 800133e:	f000 ff55 	bl	80021ec <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001342:	2019      	movs	r0, #25
 8001344:	f000 ff6e 	bl	8002224 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001348:	2300      	movs	r3, #0
 800134a:	60fb      	str	r3, [r7, #12]
 800134c:	4b1f      	ldr	r3, [pc, #124]	; (80013cc <HAL_InitTick+0xa4>)
 800134e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001350:	4a1e      	ldr	r2, [pc, #120]	; (80013cc <HAL_InitTick+0xa4>)
 8001352:	f043 0301 	orr.w	r3, r3, #1
 8001356:	6453      	str	r3, [r2, #68]	; 0x44
 8001358:	4b1c      	ldr	r3, [pc, #112]	; (80013cc <HAL_InitTick+0xa4>)
 800135a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800135c:	f003 0301 	and.w	r3, r3, #1
 8001360:	60fb      	str	r3, [r7, #12]
 8001362:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001364:	f107 0210 	add.w	r2, r7, #16
 8001368:	f107 0314 	add.w	r3, r7, #20
 800136c:	4611      	mov	r1, r2
 800136e:	4618      	mov	r0, r3
 8001370:	f002 fd4a 	bl	8003e08 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001374:	f002 fd34 	bl	8003de0 <HAL_RCC_GetPCLK2Freq>
 8001378:	4603      	mov	r3, r0
 800137a:	005b      	lsls	r3, r3, #1
 800137c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800137e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001380:	4a13      	ldr	r2, [pc, #76]	; (80013d0 <HAL_InitTick+0xa8>)
 8001382:	fba2 2303 	umull	r2, r3, r2, r3
 8001386:	0c9b      	lsrs	r3, r3, #18
 8001388:	3b01      	subs	r3, #1
 800138a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800138c:	4b11      	ldr	r3, [pc, #68]	; (80013d4 <HAL_InitTick+0xac>)
 800138e:	4a12      	ldr	r2, [pc, #72]	; (80013d8 <HAL_InitTick+0xb0>)
 8001390:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001392:	4b10      	ldr	r3, [pc, #64]	; (80013d4 <HAL_InitTick+0xac>)
 8001394:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001398:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800139a:	4a0e      	ldr	r2, [pc, #56]	; (80013d4 <HAL_InitTick+0xac>)
 800139c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800139e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80013a0:	4b0c      	ldr	r3, [pc, #48]	; (80013d4 <HAL_InitTick+0xac>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013a6:	4b0b      	ldr	r3, [pc, #44]	; (80013d4 <HAL_InitTick+0xac>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80013ac:	4809      	ldr	r0, [pc, #36]	; (80013d4 <HAL_InitTick+0xac>)
 80013ae:	f002 fd5d 	bl	8003e6c <HAL_TIM_Base_Init>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d104      	bne.n	80013c2 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80013b8:	4806      	ldr	r0, [pc, #24]	; (80013d4 <HAL_InitTick+0xac>)
 80013ba:	f002 fda7 	bl	8003f0c <HAL_TIM_Base_Start_IT>
 80013be:	4603      	mov	r3, r0
 80013c0:	e000      	b.n	80013c4 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3730      	adds	r7, #48	; 0x30
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	40023800 	.word	0x40023800
 80013d0:	431bde83 	.word	0x431bde83
 80013d4:	20000250 	.word	0x20000250
 80013d8:	40010000 	.word	0x40010000

080013dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013e0:	e7fe      	b.n	80013e0 <NMI_Handler+0x4>

080013e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013e2:	b480      	push	{r7}
 80013e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013e6:	e7fe      	b.n	80013e6 <HardFault_Handler+0x4>

080013e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013ec:	e7fe      	b.n	80013ec <MemManage_Handler+0x4>

080013ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013ee:	b480      	push	{r7}
 80013f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013f2:	e7fe      	b.n	80013f2 <BusFault_Handler+0x4>

080013f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013f8:	e7fe      	b.n	80013f8 <UsageFault_Handler+0x4>

080013fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013fa:	b480      	push	{r7}
 80013fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013fe:	bf00      	nop
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr

08001408 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800140c:	bf00      	nop
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr

08001416 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001416:	b480      	push	{r7}
 8001418:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800141a:	bf00      	nop
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr

08001424 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001428:	bf00      	nop
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr

08001432 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001432:	b580      	push	{r7, lr}
 8001434:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001436:	2004      	movs	r0, #4
 8001438:	f001 fc0e 	bl	8002c58 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800143c:	bf00      	nop
 800143e:	bd80      	pop	{r7, pc}

08001440 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001444:	2008      	movs	r0, #8
 8001446:	f001 fc07 	bl	8002c58 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800144a:	bf00      	nop
 800144c:	bd80      	pop	{r7, pc}

0800144e <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800144e:	b580      	push	{r7, lr}
 8001450:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001452:	2010      	movs	r0, #16
 8001454:	f001 fc00 	bl	8002c58 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001458:	bf00      	nop
 800145a:	bd80      	pop	{r7, pc}

0800145c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001460:	4803      	ldr	r0, [pc, #12]	; (8001470 <ADC_IRQHandler+0x14>)
 8001462:	f000 f8f2 	bl	800164a <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8001466:	4803      	ldr	r0, [pc, #12]	; (8001474 <ADC_IRQHandler+0x18>)
 8001468:	f000 f8ef 	bl	800164a <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800146c:	bf00      	nop
 800146e:	bd80      	pop	{r7, pc}
 8001470:	200000d0 	.word	0x200000d0
 8001474:	20000030 	.word	0x20000030

08001478 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800147c:	4802      	ldr	r0, [pc, #8]	; (8001488 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800147e:	f002 fed7 	bl	8004230 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001482:	bf00      	nop
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	20000250 	.word	0x20000250

0800148c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001490:	4802      	ldr	r0, [pc, #8]	; (800149c <TIM2_IRQHandler+0x10>)
 8001492:	f002 fecd 	bl	8004230 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001496:	bf00      	nop
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	200001a0 	.word	0x200001a0

080014a0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80014a4:	4802      	ldr	r0, [pc, #8]	; (80014b0 <DMA2_Stream0_IRQHandler+0x10>)
 80014a6:	f000 ffd1 	bl	800244c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80014aa:	bf00      	nop
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	20000138 	.word	0x20000138

080014b4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80014b8:	4802      	ldr	r0, [pc, #8]	; (80014c4 <DMA2_Stream2_IRQHandler+0x10>)
 80014ba:	f000 ffc7 	bl	800244c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80014be:	bf00      	nop
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	200001e8 	.word	0x200001e8

080014c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014cc:	4b06      	ldr	r3, [pc, #24]	; (80014e8 <SystemInit+0x20>)
 80014ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014d2:	4a05      	ldr	r2, [pc, #20]	; (80014e8 <SystemInit+0x20>)
 80014d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014dc:	bf00      	nop
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	e000ed00 	.word	0xe000ed00

080014ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80014ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001524 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014f0:	480d      	ldr	r0, [pc, #52]	; (8001528 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80014f2:	490e      	ldr	r1, [pc, #56]	; (800152c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80014f4:	4a0e      	ldr	r2, [pc, #56]	; (8001530 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014f8:	e002      	b.n	8001500 <LoopCopyDataInit>

080014fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014fe:	3304      	adds	r3, #4

08001500 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001500:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001502:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001504:	d3f9      	bcc.n	80014fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001506:	4a0b      	ldr	r2, [pc, #44]	; (8001534 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001508:	4c0b      	ldr	r4, [pc, #44]	; (8001538 <LoopFillZerobss+0x26>)
  movs r3, #0
 800150a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800150c:	e001      	b.n	8001512 <LoopFillZerobss>

0800150e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800150e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001510:	3204      	adds	r2, #4

08001512 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001512:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001514:	d3fb      	bcc.n	800150e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001516:	f7ff ffd7 	bl	80014c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800151a:	f003 fce3 	bl	8004ee4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800151e:	f7ff fa2f 	bl	8000980 <main>
  bx  lr    
 8001522:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001524:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001528:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800152c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001530:	08004fc4 	.word	0x08004fc4
  ldr r2, =_sbss
 8001534:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001538:	2000029c 	.word	0x2000029c

0800153c <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800153c:	e7fe      	b.n	800153c <CAN1_RX0_IRQHandler>
	...

08001540 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001544:	4b0e      	ldr	r3, [pc, #56]	; (8001580 <HAL_Init+0x40>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a0d      	ldr	r2, [pc, #52]	; (8001580 <HAL_Init+0x40>)
 800154a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800154e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001550:	4b0b      	ldr	r3, [pc, #44]	; (8001580 <HAL_Init+0x40>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a0a      	ldr	r2, [pc, #40]	; (8001580 <HAL_Init+0x40>)
 8001556:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800155a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800155c:	4b08      	ldr	r3, [pc, #32]	; (8001580 <HAL_Init+0x40>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a07      	ldr	r2, [pc, #28]	; (8001580 <HAL_Init+0x40>)
 8001562:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001566:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001568:	2003      	movs	r0, #3
 800156a:	f000 fe34 	bl	80021d6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800156e:	2000      	movs	r0, #0
 8001570:	f7ff feda 	bl	8001328 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001574:	f7ff fd22 	bl	8000fbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001578:	2300      	movs	r3, #0
}
 800157a:	4618      	mov	r0, r3
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	40023c00 	.word	0x40023c00

08001584 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001588:	4b06      	ldr	r3, [pc, #24]	; (80015a4 <HAL_IncTick+0x20>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	461a      	mov	r2, r3
 800158e:	4b06      	ldr	r3, [pc, #24]	; (80015a8 <HAL_IncTick+0x24>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4413      	add	r3, r2
 8001594:	4a04      	ldr	r2, [pc, #16]	; (80015a8 <HAL_IncTick+0x24>)
 8001596:	6013      	str	r3, [r2, #0]
}
 8001598:	bf00      	nop
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	2000000c 	.word	0x2000000c
 80015a8:	20000298 	.word	0x20000298

080015ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  return uwTick;
 80015b0:	4b03      	ldr	r3, [pc, #12]	; (80015c0 <HAL_GetTick+0x14>)
 80015b2:	681b      	ldr	r3, [r3, #0]
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	20000298 	.word	0x20000298

080015c4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b084      	sub	sp, #16
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015cc:	2300      	movs	r3, #0
 80015ce:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d101      	bne.n	80015da <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	e033      	b.n	8001642 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d109      	bne.n	80015f6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	f7ff fd12 	bl	800100c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2200      	movs	r2, #0
 80015ec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2200      	movs	r2, #0
 80015f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fa:	f003 0310 	and.w	r3, r3, #16
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d118      	bne.n	8001634 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001606:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800160a:	f023 0302 	bic.w	r3, r3, #2
 800160e:	f043 0202 	orr.w	r2, r3, #2
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	f000 fba8 	bl	8001d6c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2200      	movs	r2, #0
 8001620:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001626:	f023 0303 	bic.w	r3, r3, #3
 800162a:	f043 0201 	orr.w	r2, r3, #1
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	641a      	str	r2, [r3, #64]	; 0x40
 8001632:	e001      	b.n	8001638 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001634:	2301      	movs	r3, #1
 8001636:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2200      	movs	r2, #0
 800163c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001640:	7bfb      	ldrb	r3, [r7, #15]
}
 8001642:	4618      	mov	r0, r3
 8001644:	3710      	adds	r7, #16
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}

0800164a <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800164a:	b580      	push	{r7, lr}
 800164c:	b084      	sub	sp, #16
 800164e:	af00      	add	r7, sp, #0
 8001650:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001652:	2300      	movs	r3, #0
 8001654:	60fb      	str	r3, [r7, #12]
 8001656:	2300      	movs	r3, #0
 8001658:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f003 0302 	and.w	r3, r3, #2
 8001664:	2b02      	cmp	r3, #2
 8001666:	bf0c      	ite	eq
 8001668:	2301      	moveq	r3, #1
 800166a:	2300      	movne	r3, #0
 800166c:	b2db      	uxtb	r3, r3
 800166e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	f003 0320 	and.w	r3, r3, #32
 800167a:	2b20      	cmp	r3, #32
 800167c:	bf0c      	ite	eq
 800167e:	2301      	moveq	r3, #1
 8001680:	2300      	movne	r3, #0
 8001682:	b2db      	uxtb	r3, r3
 8001684:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d049      	beq.n	8001720 <HAL_ADC_IRQHandler+0xd6>
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d046      	beq.n	8001720 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001696:	f003 0310 	and.w	r3, r3, #16
 800169a:	2b00      	cmp	r3, #0
 800169c:	d105      	bne.n	80016aa <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d12b      	bne.n	8001710 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d127      	bne.n	8001710 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016c6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d006      	beq.n	80016dc <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d119      	bne.n	8001710 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	685a      	ldr	r2, [r3, #4]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f022 0220 	bic.w	r2, r2, #32
 80016ea:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001700:	2b00      	cmp	r3, #0
 8001702:	d105      	bne.n	8001710 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001708:	f043 0201 	orr.w	r2, r3, #1
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001710:	6878      	ldr	r0, [r7, #4]
 8001712:	f7fe ff15 	bl	8000540 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f06f 0212 	mvn.w	r2, #18
 800171e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 0304 	and.w	r3, r3, #4
 800172a:	2b04      	cmp	r3, #4
 800172c:	bf0c      	ite	eq
 800172e:	2301      	moveq	r3, #1
 8001730:	2300      	movne	r3, #0
 8001732:	b2db      	uxtb	r3, r3
 8001734:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001740:	2b80      	cmp	r3, #128	; 0x80
 8001742:	bf0c      	ite	eq
 8001744:	2301      	moveq	r3, #1
 8001746:	2300      	movne	r3, #0
 8001748:	b2db      	uxtb	r3, r3
 800174a:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d057      	beq.n	8001802 <HAL_ADC_IRQHandler+0x1b8>
 8001752:	68bb      	ldr	r3, [r7, #8]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d054      	beq.n	8001802 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175c:	f003 0310 	and.w	r3, r3, #16
 8001760:	2b00      	cmp	r3, #0
 8001762:	d105      	bne.n	8001770 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001768:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800177a:	2b00      	cmp	r3, #0
 800177c:	d139      	bne.n	80017f2 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001784:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001788:	2b00      	cmp	r3, #0
 800178a:	d006      	beq.n	800179a <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001796:	2b00      	cmp	r3, #0
 8001798:	d12b      	bne.n	80017f2 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d124      	bne.n	80017f2 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d11d      	bne.n	80017f2 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d119      	bne.n	80017f2 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	685a      	ldr	r2, [r3, #4]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80017cc:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d105      	bne.n	80017f2 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ea:	f043 0201 	orr.w	r2, r3, #1
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f000 fc38 	bl	8002068 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f06f 020c 	mvn.w	r2, #12
 8001800:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f003 0301 	and.w	r3, r3, #1
 800180c:	2b01      	cmp	r3, #1
 800180e:	bf0c      	ite	eq
 8001810:	2301      	moveq	r3, #1
 8001812:	2300      	movne	r3, #0
 8001814:	b2db      	uxtb	r3, r3
 8001816:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001822:	2b40      	cmp	r3, #64	; 0x40
 8001824:	bf0c      	ite	eq
 8001826:	2301      	moveq	r3, #1
 8001828:	2300      	movne	r3, #0
 800182a:	b2db      	uxtb	r3, r3
 800182c:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d017      	beq.n	8001864 <HAL_ADC_IRQHandler+0x21a>
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d014      	beq.n	8001864 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f003 0301 	and.w	r3, r3, #1
 8001844:	2b01      	cmp	r3, #1
 8001846:	d10d      	bne.n	8001864 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001854:	6878      	ldr	r0, [r7, #4]
 8001856:	f000 f953 	bl	8001b00 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f06f 0201 	mvn.w	r2, #1
 8001862:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 0320 	and.w	r3, r3, #32
 800186e:	2b20      	cmp	r3, #32
 8001870:	bf0c      	ite	eq
 8001872:	2301      	moveq	r3, #1
 8001874:	2300      	movne	r3, #0
 8001876:	b2db      	uxtb	r3, r3
 8001878:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001884:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001888:	bf0c      	ite	eq
 800188a:	2301      	moveq	r3, #1
 800188c:	2300      	movne	r3, #0
 800188e:	b2db      	uxtb	r3, r3
 8001890:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d015      	beq.n	80018c4 <HAL_ADC_IRQHandler+0x27a>
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d012      	beq.n	80018c4 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018a2:	f043 0202 	orr.w	r2, r3, #2
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f06f 0220 	mvn.w	r2, #32
 80018b2:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80018b4:	6878      	ldr	r0, [r7, #4]
 80018b6:	f000 f92d 	bl	8001b14 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f06f 0220 	mvn.w	r2, #32
 80018c2:	601a      	str	r2, [r3, #0]
  }
}
 80018c4:	bf00      	nop
 80018c6:	3710      	adds	r7, #16
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}

080018cc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b086      	sub	sp, #24
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	60f8      	str	r0, [r7, #12]
 80018d4:	60b9      	str	r1, [r7, #8]
 80018d6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80018d8:	2300      	movs	r3, #0
 80018da:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	d101      	bne.n	80018ea <HAL_ADC_Start_DMA+0x1e>
 80018e6:	2302      	movs	r3, #2
 80018e8:	e0e9      	b.n	8001abe <HAL_ADC_Start_DMA+0x1f2>
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	2201      	movs	r2, #1
 80018ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	f003 0301 	and.w	r3, r3, #1
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d018      	beq.n	8001932 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	689a      	ldr	r2, [r3, #8]
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f042 0201 	orr.w	r2, r2, #1
 800190e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001910:	4b6d      	ldr	r3, [pc, #436]	; (8001ac8 <HAL_ADC_Start_DMA+0x1fc>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a6d      	ldr	r2, [pc, #436]	; (8001acc <HAL_ADC_Start_DMA+0x200>)
 8001916:	fba2 2303 	umull	r2, r3, r2, r3
 800191a:	0c9a      	lsrs	r2, r3, #18
 800191c:	4613      	mov	r3, r2
 800191e:	005b      	lsls	r3, r3, #1
 8001920:	4413      	add	r3, r2
 8001922:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001924:	e002      	b.n	800192c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	3b01      	subs	r3, #1
 800192a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d1f9      	bne.n	8001926 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800193c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001940:	d107      	bne.n	8001952 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	689a      	ldr	r2, [r3, #8]
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001950:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	f003 0301 	and.w	r3, r3, #1
 800195c:	2b01      	cmp	r3, #1
 800195e:	f040 80a1 	bne.w	8001aa4 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001966:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800196a:	f023 0301 	bic.w	r3, r3, #1
 800196e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001980:	2b00      	cmp	r3, #0
 8001982:	d007      	beq.n	8001994 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001988:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800198c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001998:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800199c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80019a0:	d106      	bne.n	80019b0 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a6:	f023 0206 	bic.w	r2, r3, #6
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	645a      	str	r2, [r3, #68]	; 0x44
 80019ae:	e002      	b.n	80019b6 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	2200      	movs	r2, #0
 80019b4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	2200      	movs	r2, #0
 80019ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80019be:	4b44      	ldr	r3, [pc, #272]	; (8001ad0 <HAL_ADC_Start_DMA+0x204>)
 80019c0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019c6:	4a43      	ldr	r2, [pc, #268]	; (8001ad4 <HAL_ADC_Start_DMA+0x208>)
 80019c8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019ce:	4a42      	ldr	r2, [pc, #264]	; (8001ad8 <HAL_ADC_Start_DMA+0x20c>)
 80019d0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019d6:	4a41      	ldr	r2, [pc, #260]	; (8001adc <HAL_ADC_Start_DMA+0x210>)
 80019d8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80019e2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	685a      	ldr	r2, [r3, #4]
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80019f2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	689a      	ldr	r2, [r3, #8]
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a02:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	334c      	adds	r3, #76	; 0x4c
 8001a0e:	4619      	mov	r1, r3
 8001a10:	68ba      	ldr	r2, [r7, #8]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	f000 fcc2 	bl	800239c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	f003 031f 	and.w	r3, r3, #31
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d12a      	bne.n	8001a7a <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a2d      	ldr	r2, [pc, #180]	; (8001ae0 <HAL_ADC_Start_DMA+0x214>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d015      	beq.n	8001a5a <HAL_ADC_Start_DMA+0x18e>
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a2c      	ldr	r2, [pc, #176]	; (8001ae4 <HAL_ADC_Start_DMA+0x218>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d105      	bne.n	8001a44 <HAL_ADC_Start_DMA+0x178>
 8001a38:	4b25      	ldr	r3, [pc, #148]	; (8001ad0 <HAL_ADC_Start_DMA+0x204>)
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f003 031f 	and.w	r3, r3, #31
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d00a      	beq.n	8001a5a <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a27      	ldr	r2, [pc, #156]	; (8001ae8 <HAL_ADC_Start_DMA+0x21c>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d136      	bne.n	8001abc <HAL_ADC_Start_DMA+0x1f0>
 8001a4e:	4b20      	ldr	r3, [pc, #128]	; (8001ad0 <HAL_ADC_Start_DMA+0x204>)
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	f003 0310 	and.w	r3, r3, #16
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d130      	bne.n	8001abc <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d129      	bne.n	8001abc <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	689a      	ldr	r2, [r3, #8]
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001a76:	609a      	str	r2, [r3, #8]
 8001a78:	e020      	b.n	8001abc <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a18      	ldr	r2, [pc, #96]	; (8001ae0 <HAL_ADC_Start_DMA+0x214>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d11b      	bne.n	8001abc <HAL_ADC_Start_DMA+0x1f0>
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d114      	bne.n	8001abc <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	689a      	ldr	r2, [r3, #8]
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001aa0:	609a      	str	r2, [r3, #8]
 8001aa2:	e00b      	b.n	8001abc <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa8:	f043 0210 	orr.w	r2, r3, #16
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ab4:	f043 0201 	orr.w	r2, r3, #1
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001abc:	2300      	movs	r3, #0
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3718      	adds	r7, #24
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	20000004 	.word	0x20000004
 8001acc:	431bde83 	.word	0x431bde83
 8001ad0:	40012300 	.word	0x40012300
 8001ad4:	08001f65 	.word	0x08001f65
 8001ad8:	0800201f 	.word	0x0800201f
 8001adc:	0800203b 	.word	0x0800203b
 8001ae0:	40012000 	.word	0x40012000
 8001ae4:	40012100 	.word	0x40012100
 8001ae8:	40012200 	.word	0x40012200

08001aec <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001af4:	bf00      	nop
 8001af6:	370c      	adds	r7, #12
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr

08001b00 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001b08:	bf00      	nop
 8001b0a:	370c      	adds	r7, #12
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr

08001b14 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001b1c:	bf00      	nop
 8001b1e:	370c      	adds	r7, #12
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr

08001b28 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b085      	sub	sp, #20
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001b32:	2300      	movs	r3, #0
 8001b34:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d101      	bne.n	8001b44 <HAL_ADC_ConfigChannel+0x1c>
 8001b40:	2302      	movs	r3, #2
 8001b42:	e105      	b.n	8001d50 <HAL_ADC_ConfigChannel+0x228>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2201      	movs	r2, #1
 8001b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	2b09      	cmp	r3, #9
 8001b52:	d925      	bls.n	8001ba0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	68d9      	ldr	r1, [r3, #12]
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	b29b      	uxth	r3, r3
 8001b60:	461a      	mov	r2, r3
 8001b62:	4613      	mov	r3, r2
 8001b64:	005b      	lsls	r3, r3, #1
 8001b66:	4413      	add	r3, r2
 8001b68:	3b1e      	subs	r3, #30
 8001b6a:	2207      	movs	r2, #7
 8001b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b70:	43da      	mvns	r2, r3
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	400a      	ands	r2, r1
 8001b78:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	68d9      	ldr	r1, [r3, #12]
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	689a      	ldr	r2, [r3, #8]
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	b29b      	uxth	r3, r3
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	005b      	lsls	r3, r3, #1
 8001b90:	4403      	add	r3, r0
 8001b92:	3b1e      	subs	r3, #30
 8001b94:	409a      	lsls	r2, r3
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	430a      	orrs	r2, r1
 8001b9c:	60da      	str	r2, [r3, #12]
 8001b9e:	e022      	b.n	8001be6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	6919      	ldr	r1, [r3, #16]
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	b29b      	uxth	r3, r3
 8001bac:	461a      	mov	r2, r3
 8001bae:	4613      	mov	r3, r2
 8001bb0:	005b      	lsls	r3, r3, #1
 8001bb2:	4413      	add	r3, r2
 8001bb4:	2207      	movs	r2, #7
 8001bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bba:	43da      	mvns	r2, r3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	400a      	ands	r2, r1
 8001bc2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	6919      	ldr	r1, [r3, #16]
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	689a      	ldr	r2, [r3, #8]
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	b29b      	uxth	r3, r3
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	005b      	lsls	r3, r3, #1
 8001bda:	4403      	add	r3, r0
 8001bdc:	409a      	lsls	r2, r3
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	430a      	orrs	r2, r1
 8001be4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	2b06      	cmp	r3, #6
 8001bec:	d824      	bhi.n	8001c38 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	685a      	ldr	r2, [r3, #4]
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	4413      	add	r3, r2
 8001bfe:	3b05      	subs	r3, #5
 8001c00:	221f      	movs	r2, #31
 8001c02:	fa02 f303 	lsl.w	r3, r2, r3
 8001c06:	43da      	mvns	r2, r3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	400a      	ands	r2, r1
 8001c0e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	b29b      	uxth	r3, r3
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	685a      	ldr	r2, [r3, #4]
 8001c22:	4613      	mov	r3, r2
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	4413      	add	r3, r2
 8001c28:	3b05      	subs	r3, #5
 8001c2a:	fa00 f203 	lsl.w	r2, r0, r3
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	430a      	orrs	r2, r1
 8001c34:	635a      	str	r2, [r3, #52]	; 0x34
 8001c36:	e04c      	b.n	8001cd2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	2b0c      	cmp	r3, #12
 8001c3e:	d824      	bhi.n	8001c8a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	685a      	ldr	r2, [r3, #4]
 8001c4a:	4613      	mov	r3, r2
 8001c4c:	009b      	lsls	r3, r3, #2
 8001c4e:	4413      	add	r3, r2
 8001c50:	3b23      	subs	r3, #35	; 0x23
 8001c52:	221f      	movs	r2, #31
 8001c54:	fa02 f303 	lsl.w	r3, r2, r3
 8001c58:	43da      	mvns	r2, r3
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	400a      	ands	r2, r1
 8001c60:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	b29b      	uxth	r3, r3
 8001c6e:	4618      	mov	r0, r3
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	685a      	ldr	r2, [r3, #4]
 8001c74:	4613      	mov	r3, r2
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	4413      	add	r3, r2
 8001c7a:	3b23      	subs	r3, #35	; 0x23
 8001c7c:	fa00 f203 	lsl.w	r2, r0, r3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	430a      	orrs	r2, r1
 8001c86:	631a      	str	r2, [r3, #48]	; 0x30
 8001c88:	e023      	b.n	8001cd2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	685a      	ldr	r2, [r3, #4]
 8001c94:	4613      	mov	r3, r2
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	4413      	add	r3, r2
 8001c9a:	3b41      	subs	r3, #65	; 0x41
 8001c9c:	221f      	movs	r2, #31
 8001c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca2:	43da      	mvns	r2, r3
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	400a      	ands	r2, r1
 8001caa:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	b29b      	uxth	r3, r3
 8001cb8:	4618      	mov	r0, r3
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	685a      	ldr	r2, [r3, #4]
 8001cbe:	4613      	mov	r3, r2
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	4413      	add	r3, r2
 8001cc4:	3b41      	subs	r3, #65	; 0x41
 8001cc6:	fa00 f203 	lsl.w	r2, r0, r3
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	430a      	orrs	r2, r1
 8001cd0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001cd2:	4b22      	ldr	r3, [pc, #136]	; (8001d5c <HAL_ADC_ConfigChannel+0x234>)
 8001cd4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a21      	ldr	r2, [pc, #132]	; (8001d60 <HAL_ADC_ConfigChannel+0x238>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d109      	bne.n	8001cf4 <HAL_ADC_ConfigChannel+0x1cc>
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	2b12      	cmp	r3, #18
 8001ce6:	d105      	bne.n	8001cf4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a19      	ldr	r2, [pc, #100]	; (8001d60 <HAL_ADC_ConfigChannel+0x238>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d123      	bne.n	8001d46 <HAL_ADC_ConfigChannel+0x21e>
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	2b10      	cmp	r3, #16
 8001d04:	d003      	beq.n	8001d0e <HAL_ADC_ConfigChannel+0x1e6>
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	2b11      	cmp	r3, #17
 8001d0c:	d11b      	bne.n	8001d46 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	2b10      	cmp	r3, #16
 8001d20:	d111      	bne.n	8001d46 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d22:	4b10      	ldr	r3, [pc, #64]	; (8001d64 <HAL_ADC_ConfigChannel+0x23c>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a10      	ldr	r2, [pc, #64]	; (8001d68 <HAL_ADC_ConfigChannel+0x240>)
 8001d28:	fba2 2303 	umull	r2, r3, r2, r3
 8001d2c:	0c9a      	lsrs	r2, r3, #18
 8001d2e:	4613      	mov	r3, r2
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	4413      	add	r3, r2
 8001d34:	005b      	lsls	r3, r3, #1
 8001d36:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001d38:	e002      	b.n	8001d40 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	3b01      	subs	r3, #1
 8001d3e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d1f9      	bne.n	8001d3a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001d4e:	2300      	movs	r3, #0
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3714      	adds	r7, #20
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr
 8001d5c:	40012300 	.word	0x40012300
 8001d60:	40012000 	.word	0x40012000
 8001d64:	20000004 	.word	0x20000004
 8001d68:	431bde83 	.word	0x431bde83

08001d6c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b085      	sub	sp, #20
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d74:	4b79      	ldr	r3, [pc, #484]	; (8001f5c <ADC_Init+0x1f0>)
 8001d76:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	685a      	ldr	r2, [r3, #4]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	431a      	orrs	r2, r3
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	685a      	ldr	r2, [r3, #4]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001da0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	6859      	ldr	r1, [r3, #4]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	691b      	ldr	r3, [r3, #16]
 8001dac:	021a      	lsls	r2, r3, #8
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	430a      	orrs	r2, r1
 8001db4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	685a      	ldr	r2, [r3, #4]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001dc4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	6859      	ldr	r1, [r3, #4]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	689a      	ldr	r2, [r3, #8]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	430a      	orrs	r2, r1
 8001dd6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	689a      	ldr	r2, [r3, #8]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001de6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	6899      	ldr	r1, [r3, #8]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	68da      	ldr	r2, [r3, #12]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	430a      	orrs	r2, r1
 8001df8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dfe:	4a58      	ldr	r2, [pc, #352]	; (8001f60 <ADC_Init+0x1f4>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d022      	beq.n	8001e4a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	689a      	ldr	r2, [r3, #8]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e12:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	6899      	ldr	r1, [r3, #8]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	430a      	orrs	r2, r1
 8001e24:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	689a      	ldr	r2, [r3, #8]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001e34:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	6899      	ldr	r1, [r3, #8]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	430a      	orrs	r2, r1
 8001e46:	609a      	str	r2, [r3, #8]
 8001e48:	e00f      	b.n	8001e6a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	689a      	ldr	r2, [r3, #8]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e58:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	689a      	ldr	r2, [r3, #8]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001e68:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	689a      	ldr	r2, [r3, #8]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f022 0202 	bic.w	r2, r2, #2
 8001e78:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	6899      	ldr	r1, [r3, #8]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	7e1b      	ldrb	r3, [r3, #24]
 8001e84:	005a      	lsls	r2, r3, #1
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	430a      	orrs	r2, r1
 8001e8c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d01b      	beq.n	8001ed0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	685a      	ldr	r2, [r3, #4]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ea6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	685a      	ldr	r2, [r3, #4]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001eb6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	6859      	ldr	r1, [r3, #4]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec2:	3b01      	subs	r3, #1
 8001ec4:	035a      	lsls	r2, r3, #13
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	430a      	orrs	r2, r1
 8001ecc:	605a      	str	r2, [r3, #4]
 8001ece:	e007      	b.n	8001ee0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	685a      	ldr	r2, [r3, #4]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ede:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001eee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	69db      	ldr	r3, [r3, #28]
 8001efa:	3b01      	subs	r3, #1
 8001efc:	051a      	lsls	r2, r3, #20
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	430a      	orrs	r2, r1
 8001f04:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	689a      	ldr	r2, [r3, #8]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001f14:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	6899      	ldr	r1, [r3, #8]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001f22:	025a      	lsls	r2, r3, #9
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	430a      	orrs	r2, r1
 8001f2a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	689a      	ldr	r2, [r3, #8]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f3a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	6899      	ldr	r1, [r3, #8]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	695b      	ldr	r3, [r3, #20]
 8001f46:	029a      	lsls	r2, r3, #10
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	430a      	orrs	r2, r1
 8001f4e:	609a      	str	r2, [r3, #8]
}
 8001f50:	bf00      	nop
 8001f52:	3714      	adds	r7, #20
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr
 8001f5c:	40012300 	.word	0x40012300
 8001f60:	0f000001 	.word	0x0f000001

08001f64 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b084      	sub	sp, #16
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f70:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f76:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d13c      	bne.n	8001ff8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f82:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d12b      	bne.n	8001ff0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d127      	bne.n	8001ff0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fa6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d006      	beq.n	8001fbc <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d119      	bne.n	8001ff0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	685a      	ldr	r2, [r3, #4]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f022 0220 	bic.w	r2, r2, #32
 8001fca:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fdc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d105      	bne.n	8001ff0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe8:	f043 0201 	orr.w	r2, r3, #1
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001ff0:	68f8      	ldr	r0, [r7, #12]
 8001ff2:	f7fe faa5 	bl	8000540 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001ff6:	e00e      	b.n	8002016 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffc:	f003 0310 	and.w	r3, r3, #16
 8002000:	2b00      	cmp	r3, #0
 8002002:	d003      	beq.n	800200c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002004:	68f8      	ldr	r0, [r7, #12]
 8002006:	f7ff fd85 	bl	8001b14 <HAL_ADC_ErrorCallback>
}
 800200a:	e004      	b.n	8002016 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	4798      	blx	r3
}
 8002016:	bf00      	nop
 8002018:	3710      	adds	r7, #16
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}

0800201e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800201e:	b580      	push	{r7, lr}
 8002020:	b084      	sub	sp, #16
 8002022:	af00      	add	r7, sp, #0
 8002024:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800202a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800202c:	68f8      	ldr	r0, [r7, #12]
 800202e:	f7ff fd5d 	bl	8001aec <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002032:	bf00      	nop
 8002034:	3710      	adds	r7, #16
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}

0800203a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800203a:	b580      	push	{r7, lr}
 800203c:	b084      	sub	sp, #16
 800203e:	af00      	add	r7, sp, #0
 8002040:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002046:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	2240      	movs	r2, #64	; 0x40
 800204c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002052:	f043 0204 	orr.w	r2, r3, #4
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800205a:	68f8      	ldr	r0, [r7, #12]
 800205c:	f7ff fd5a 	bl	8001b14 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002060:	bf00      	nop
 8002062:	3710      	adds	r7, #16
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}

08002068 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002070:	bf00      	nop
 8002072:	370c      	adds	r7, #12
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr

0800207c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800207c:	b480      	push	{r7}
 800207e:	b085      	sub	sp, #20
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	f003 0307 	and.w	r3, r3, #7
 800208a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800208c:	4b0c      	ldr	r3, [pc, #48]	; (80020c0 <__NVIC_SetPriorityGrouping+0x44>)
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002092:	68ba      	ldr	r2, [r7, #8]
 8002094:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002098:	4013      	ands	r3, r2
 800209a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020ae:	4a04      	ldr	r2, [pc, #16]	; (80020c0 <__NVIC_SetPriorityGrouping+0x44>)
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	60d3      	str	r3, [r2, #12]
}
 80020b4:	bf00      	nop
 80020b6:	3714      	adds	r7, #20
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr
 80020c0:	e000ed00 	.word	0xe000ed00

080020c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020c8:	4b04      	ldr	r3, [pc, #16]	; (80020dc <__NVIC_GetPriorityGrouping+0x18>)
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	0a1b      	lsrs	r3, r3, #8
 80020ce:	f003 0307 	and.w	r3, r3, #7
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr
 80020dc:	e000ed00 	.word	0xe000ed00

080020e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	4603      	mov	r3, r0
 80020e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	db0b      	blt.n	800210a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020f2:	79fb      	ldrb	r3, [r7, #7]
 80020f4:	f003 021f 	and.w	r2, r3, #31
 80020f8:	4907      	ldr	r1, [pc, #28]	; (8002118 <__NVIC_EnableIRQ+0x38>)
 80020fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020fe:	095b      	lsrs	r3, r3, #5
 8002100:	2001      	movs	r0, #1
 8002102:	fa00 f202 	lsl.w	r2, r0, r2
 8002106:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800210a:	bf00      	nop
 800210c:	370c      	adds	r7, #12
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr
 8002116:	bf00      	nop
 8002118:	e000e100 	.word	0xe000e100

0800211c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	4603      	mov	r3, r0
 8002124:	6039      	str	r1, [r7, #0]
 8002126:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002128:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800212c:	2b00      	cmp	r3, #0
 800212e:	db0a      	blt.n	8002146 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	b2da      	uxtb	r2, r3
 8002134:	490c      	ldr	r1, [pc, #48]	; (8002168 <__NVIC_SetPriority+0x4c>)
 8002136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800213a:	0112      	lsls	r2, r2, #4
 800213c:	b2d2      	uxtb	r2, r2
 800213e:	440b      	add	r3, r1
 8002140:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002144:	e00a      	b.n	800215c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	b2da      	uxtb	r2, r3
 800214a:	4908      	ldr	r1, [pc, #32]	; (800216c <__NVIC_SetPriority+0x50>)
 800214c:	79fb      	ldrb	r3, [r7, #7]
 800214e:	f003 030f 	and.w	r3, r3, #15
 8002152:	3b04      	subs	r3, #4
 8002154:	0112      	lsls	r2, r2, #4
 8002156:	b2d2      	uxtb	r2, r2
 8002158:	440b      	add	r3, r1
 800215a:	761a      	strb	r2, [r3, #24]
}
 800215c:	bf00      	nop
 800215e:	370c      	adds	r7, #12
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr
 8002168:	e000e100 	.word	0xe000e100
 800216c:	e000ed00 	.word	0xe000ed00

08002170 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002170:	b480      	push	{r7}
 8002172:	b089      	sub	sp, #36	; 0x24
 8002174:	af00      	add	r7, sp, #0
 8002176:	60f8      	str	r0, [r7, #12]
 8002178:	60b9      	str	r1, [r7, #8]
 800217a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	f003 0307 	and.w	r3, r3, #7
 8002182:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002184:	69fb      	ldr	r3, [r7, #28]
 8002186:	f1c3 0307 	rsb	r3, r3, #7
 800218a:	2b04      	cmp	r3, #4
 800218c:	bf28      	it	cs
 800218e:	2304      	movcs	r3, #4
 8002190:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002192:	69fb      	ldr	r3, [r7, #28]
 8002194:	3304      	adds	r3, #4
 8002196:	2b06      	cmp	r3, #6
 8002198:	d902      	bls.n	80021a0 <NVIC_EncodePriority+0x30>
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	3b03      	subs	r3, #3
 800219e:	e000      	b.n	80021a2 <NVIC_EncodePriority+0x32>
 80021a0:	2300      	movs	r3, #0
 80021a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021a4:	f04f 32ff 	mov.w	r2, #4294967295
 80021a8:	69bb      	ldr	r3, [r7, #24]
 80021aa:	fa02 f303 	lsl.w	r3, r2, r3
 80021ae:	43da      	mvns	r2, r3
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	401a      	ands	r2, r3
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021b8:	f04f 31ff 	mov.w	r1, #4294967295
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	fa01 f303 	lsl.w	r3, r1, r3
 80021c2:	43d9      	mvns	r1, r3
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021c8:	4313      	orrs	r3, r2
         );
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3724      	adds	r7, #36	; 0x24
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr

080021d6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021d6:	b580      	push	{r7, lr}
 80021d8:	b082      	sub	sp, #8
 80021da:	af00      	add	r7, sp, #0
 80021dc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f7ff ff4c 	bl	800207c <__NVIC_SetPriorityGrouping>
}
 80021e4:	bf00      	nop
 80021e6:	3708      	adds	r7, #8
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}

080021ec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b086      	sub	sp, #24
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	4603      	mov	r3, r0
 80021f4:	60b9      	str	r1, [r7, #8]
 80021f6:	607a      	str	r2, [r7, #4]
 80021f8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021fa:	2300      	movs	r3, #0
 80021fc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021fe:	f7ff ff61 	bl	80020c4 <__NVIC_GetPriorityGrouping>
 8002202:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002204:	687a      	ldr	r2, [r7, #4]
 8002206:	68b9      	ldr	r1, [r7, #8]
 8002208:	6978      	ldr	r0, [r7, #20]
 800220a:	f7ff ffb1 	bl	8002170 <NVIC_EncodePriority>
 800220e:	4602      	mov	r2, r0
 8002210:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002214:	4611      	mov	r1, r2
 8002216:	4618      	mov	r0, r3
 8002218:	f7ff ff80 	bl	800211c <__NVIC_SetPriority>
}
 800221c:	bf00      	nop
 800221e:	3718      	adds	r7, #24
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}

08002224 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b082      	sub	sp, #8
 8002228:	af00      	add	r7, sp, #0
 800222a:	4603      	mov	r3, r0
 800222c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800222e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002232:	4618      	mov	r0, r3
 8002234:	f7ff ff54 	bl	80020e0 <__NVIC_EnableIRQ>
}
 8002238:	bf00      	nop
 800223a:	3708      	adds	r7, #8
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}

08002240 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b086      	sub	sp, #24
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002248:	2300      	movs	r3, #0
 800224a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800224c:	f7ff f9ae 	bl	80015ac <HAL_GetTick>
 8002250:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d101      	bne.n	800225c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	e099      	b.n	8002390 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2202      	movs	r2, #2
 8002260:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2200      	movs	r2, #0
 8002268:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f022 0201 	bic.w	r2, r2, #1
 800227a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800227c:	e00f      	b.n	800229e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800227e:	f7ff f995 	bl	80015ac <HAL_GetTick>
 8002282:	4602      	mov	r2, r0
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	1ad3      	subs	r3, r2, r3
 8002288:	2b05      	cmp	r3, #5
 800228a:	d908      	bls.n	800229e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2220      	movs	r2, #32
 8002290:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2203      	movs	r2, #3
 8002296:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800229a:	2303      	movs	r3, #3
 800229c:	e078      	b.n	8002390 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0301 	and.w	r3, r3, #1
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d1e8      	bne.n	800227e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80022b4:	697a      	ldr	r2, [r7, #20]
 80022b6:	4b38      	ldr	r3, [pc, #224]	; (8002398 <HAL_DMA_Init+0x158>)
 80022b8:	4013      	ands	r3, r2
 80022ba:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	685a      	ldr	r2, [r3, #4]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	691b      	ldr	r3, [r3, #16]
 80022d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	699b      	ldr	r3, [r3, #24]
 80022dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6a1b      	ldr	r3, [r3, #32]
 80022e8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022ea:	697a      	ldr	r2, [r7, #20]
 80022ec:	4313      	orrs	r3, r2
 80022ee:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f4:	2b04      	cmp	r3, #4
 80022f6:	d107      	bne.n	8002308 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002300:	4313      	orrs	r3, r2
 8002302:	697a      	ldr	r2, [r7, #20]
 8002304:	4313      	orrs	r3, r2
 8002306:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	697a      	ldr	r2, [r7, #20]
 800230e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	695b      	ldr	r3, [r3, #20]
 8002316:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	f023 0307 	bic.w	r3, r3, #7
 800231e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002324:	697a      	ldr	r2, [r7, #20]
 8002326:	4313      	orrs	r3, r2
 8002328:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800232e:	2b04      	cmp	r3, #4
 8002330:	d117      	bne.n	8002362 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002336:	697a      	ldr	r2, [r7, #20]
 8002338:	4313      	orrs	r3, r2
 800233a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002340:	2b00      	cmp	r3, #0
 8002342:	d00e      	beq.n	8002362 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002344:	6878      	ldr	r0, [r7, #4]
 8002346:	f000 fa6f 	bl	8002828 <DMA_CheckFifoParam>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d008      	beq.n	8002362 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2240      	movs	r2, #64	; 0x40
 8002354:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2201      	movs	r2, #1
 800235a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800235e:	2301      	movs	r3, #1
 8002360:	e016      	b.n	8002390 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	697a      	ldr	r2, [r7, #20]
 8002368:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f000 fa26 	bl	80027bc <DMA_CalcBaseAndBitshift>
 8002370:	4603      	mov	r3, r0
 8002372:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002378:	223f      	movs	r2, #63	; 0x3f
 800237a:	409a      	lsls	r2, r3
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2200      	movs	r2, #0
 8002384:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2201      	movs	r2, #1
 800238a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800238e:	2300      	movs	r3, #0
}
 8002390:	4618      	mov	r0, r3
 8002392:	3718      	adds	r7, #24
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}
 8002398:	f010803f 	.word	0xf010803f

0800239c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b086      	sub	sp, #24
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	60f8      	str	r0, [r7, #12]
 80023a4:	60b9      	str	r1, [r7, #8]
 80023a6:	607a      	str	r2, [r7, #4]
 80023a8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80023aa:	2300      	movs	r3, #0
 80023ac:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023b2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d101      	bne.n	80023c2 <HAL_DMA_Start_IT+0x26>
 80023be:	2302      	movs	r3, #2
 80023c0:	e040      	b.n	8002444 <HAL_DMA_Start_IT+0xa8>
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2201      	movs	r2, #1
 80023c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d12f      	bne.n	8002436 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2202      	movs	r2, #2
 80023da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2200      	movs	r2, #0
 80023e2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	687a      	ldr	r2, [r7, #4]
 80023e8:	68b9      	ldr	r1, [r7, #8]
 80023ea:	68f8      	ldr	r0, [r7, #12]
 80023ec:	f000 f9b8 	bl	8002760 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023f4:	223f      	movs	r2, #63	; 0x3f
 80023f6:	409a      	lsls	r2, r3
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f042 0216 	orr.w	r2, r2, #22
 800240a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002410:	2b00      	cmp	r3, #0
 8002412:	d007      	beq.n	8002424 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f042 0208 	orr.w	r2, r2, #8
 8002422:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f042 0201 	orr.w	r2, r2, #1
 8002432:	601a      	str	r2, [r3, #0]
 8002434:	e005      	b.n	8002442 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	2200      	movs	r2, #0
 800243a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800243e:	2302      	movs	r3, #2
 8002440:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002442:	7dfb      	ldrb	r3, [r7, #23]
}
 8002444:	4618      	mov	r0, r3
 8002446:	3718      	adds	r7, #24
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}

0800244c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b086      	sub	sp, #24
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002454:	2300      	movs	r3, #0
 8002456:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002458:	4b92      	ldr	r3, [pc, #584]	; (80026a4 <HAL_DMA_IRQHandler+0x258>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a92      	ldr	r2, [pc, #584]	; (80026a8 <HAL_DMA_IRQHandler+0x25c>)
 800245e:	fba2 2303 	umull	r2, r3, r2, r3
 8002462:	0a9b      	lsrs	r3, r3, #10
 8002464:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800246a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002476:	2208      	movs	r2, #8
 8002478:	409a      	lsls	r2, r3
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	4013      	ands	r3, r2
 800247e:	2b00      	cmp	r3, #0
 8002480:	d01a      	beq.n	80024b8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 0304 	and.w	r3, r3, #4
 800248c:	2b00      	cmp	r3, #0
 800248e:	d013      	beq.n	80024b8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f022 0204 	bic.w	r2, r2, #4
 800249e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024a4:	2208      	movs	r2, #8
 80024a6:	409a      	lsls	r2, r3
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024b0:	f043 0201 	orr.w	r2, r3, #1
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024bc:	2201      	movs	r2, #1
 80024be:	409a      	lsls	r2, r3
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	4013      	ands	r3, r2
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d012      	beq.n	80024ee <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	695b      	ldr	r3, [r3, #20]
 80024ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d00b      	beq.n	80024ee <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024da:	2201      	movs	r2, #1
 80024dc:	409a      	lsls	r2, r3
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024e6:	f043 0202 	orr.w	r2, r3, #2
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024f2:	2204      	movs	r2, #4
 80024f4:	409a      	lsls	r2, r3
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	4013      	ands	r3, r2
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d012      	beq.n	8002524 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 0302 	and.w	r3, r3, #2
 8002508:	2b00      	cmp	r3, #0
 800250a:	d00b      	beq.n	8002524 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002510:	2204      	movs	r2, #4
 8002512:	409a      	lsls	r2, r3
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800251c:	f043 0204 	orr.w	r2, r3, #4
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002528:	2210      	movs	r2, #16
 800252a:	409a      	lsls	r2, r3
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	4013      	ands	r3, r2
 8002530:	2b00      	cmp	r3, #0
 8002532:	d043      	beq.n	80025bc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 0308 	and.w	r3, r3, #8
 800253e:	2b00      	cmp	r3, #0
 8002540:	d03c      	beq.n	80025bc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002546:	2210      	movs	r2, #16
 8002548:	409a      	lsls	r2, r3
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002558:	2b00      	cmp	r3, #0
 800255a:	d018      	beq.n	800258e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d108      	bne.n	800257c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256e:	2b00      	cmp	r3, #0
 8002570:	d024      	beq.n	80025bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	4798      	blx	r3
 800257a:	e01f      	b.n	80025bc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002580:	2b00      	cmp	r3, #0
 8002582:	d01b      	beq.n	80025bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	4798      	blx	r3
 800258c:	e016      	b.n	80025bc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002598:	2b00      	cmp	r3, #0
 800259a:	d107      	bne.n	80025ac <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f022 0208 	bic.w	r2, r2, #8
 80025aa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d003      	beq.n	80025bc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b8:	6878      	ldr	r0, [r7, #4]
 80025ba:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025c0:	2220      	movs	r2, #32
 80025c2:	409a      	lsls	r2, r3
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	4013      	ands	r3, r2
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	f000 808e 	beq.w	80026ea <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 0310 	and.w	r3, r3, #16
 80025d8:	2b00      	cmp	r3, #0
 80025da:	f000 8086 	beq.w	80026ea <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025e2:	2220      	movs	r2, #32
 80025e4:	409a      	lsls	r2, r3
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	2b05      	cmp	r3, #5
 80025f4:	d136      	bne.n	8002664 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f022 0216 	bic.w	r2, r2, #22
 8002604:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	695a      	ldr	r2, [r3, #20]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002614:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261a:	2b00      	cmp	r3, #0
 800261c:	d103      	bne.n	8002626 <HAL_DMA_IRQHandler+0x1da>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002622:	2b00      	cmp	r3, #0
 8002624:	d007      	beq.n	8002636 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f022 0208 	bic.w	r2, r2, #8
 8002634:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800263a:	223f      	movs	r2, #63	; 0x3f
 800263c:	409a      	lsls	r2, r3
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2201      	movs	r2, #1
 8002646:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2200      	movs	r2, #0
 800264e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002656:	2b00      	cmp	r3, #0
 8002658:	d07d      	beq.n	8002756 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	4798      	blx	r3
        }
        return;
 8002662:	e078      	b.n	8002756 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d01c      	beq.n	80026ac <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800267c:	2b00      	cmp	r3, #0
 800267e:	d108      	bne.n	8002692 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002684:	2b00      	cmp	r3, #0
 8002686:	d030      	beq.n	80026ea <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	4798      	blx	r3
 8002690:	e02b      	b.n	80026ea <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002696:	2b00      	cmp	r3, #0
 8002698:	d027      	beq.n	80026ea <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	4798      	blx	r3
 80026a2:	e022      	b.n	80026ea <HAL_DMA_IRQHandler+0x29e>
 80026a4:	20000004 	.word	0x20000004
 80026a8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d10f      	bne.n	80026da <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f022 0210 	bic.w	r2, r2, #16
 80026c8:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2201      	movs	r2, #1
 80026ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2200      	movs	r2, #0
 80026d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d003      	beq.n	80026ea <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d032      	beq.n	8002758 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026f6:	f003 0301 	and.w	r3, r3, #1
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d022      	beq.n	8002744 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2205      	movs	r2, #5
 8002702:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f022 0201 	bic.w	r2, r2, #1
 8002714:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	3301      	adds	r3, #1
 800271a:	60bb      	str	r3, [r7, #8]
 800271c:	697a      	ldr	r2, [r7, #20]
 800271e:	429a      	cmp	r2, r3
 8002720:	d307      	bcc.n	8002732 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 0301 	and.w	r3, r3, #1
 800272c:	2b00      	cmp	r3, #0
 800272e:	d1f2      	bne.n	8002716 <HAL_DMA_IRQHandler+0x2ca>
 8002730:	e000      	b.n	8002734 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002732:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2201      	movs	r2, #1
 8002738:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2200      	movs	r2, #0
 8002740:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002748:	2b00      	cmp	r3, #0
 800274a:	d005      	beq.n	8002758 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002750:	6878      	ldr	r0, [r7, #4]
 8002752:	4798      	blx	r3
 8002754:	e000      	b.n	8002758 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002756:	bf00      	nop
    }
  }
}
 8002758:	3718      	adds	r7, #24
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop

08002760 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002760:	b480      	push	{r7}
 8002762:	b085      	sub	sp, #20
 8002764:	af00      	add	r7, sp, #0
 8002766:	60f8      	str	r0, [r7, #12]
 8002768:	60b9      	str	r1, [r7, #8]
 800276a:	607a      	str	r2, [r7, #4]
 800276c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800277c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	683a      	ldr	r2, [r7, #0]
 8002784:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	2b40      	cmp	r3, #64	; 0x40
 800278c:	d108      	bne.n	80027a0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	68ba      	ldr	r2, [r7, #8]
 800279c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800279e:	e007      	b.n	80027b0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	68ba      	ldr	r2, [r7, #8]
 80027a6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	687a      	ldr	r2, [r7, #4]
 80027ae:	60da      	str	r2, [r3, #12]
}
 80027b0:	bf00      	nop
 80027b2:	3714      	adds	r7, #20
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr

080027bc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80027bc:	b480      	push	{r7}
 80027be:	b085      	sub	sp, #20
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	3b10      	subs	r3, #16
 80027cc:	4a14      	ldr	r2, [pc, #80]	; (8002820 <DMA_CalcBaseAndBitshift+0x64>)
 80027ce:	fba2 2303 	umull	r2, r3, r2, r3
 80027d2:	091b      	lsrs	r3, r3, #4
 80027d4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80027d6:	4a13      	ldr	r2, [pc, #76]	; (8002824 <DMA_CalcBaseAndBitshift+0x68>)
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	4413      	add	r3, r2
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	461a      	mov	r2, r3
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2b03      	cmp	r3, #3
 80027e8:	d909      	bls.n	80027fe <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80027f2:	f023 0303 	bic.w	r3, r3, #3
 80027f6:	1d1a      	adds	r2, r3, #4
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	659a      	str	r2, [r3, #88]	; 0x58
 80027fc:	e007      	b.n	800280e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002806:	f023 0303 	bic.w	r3, r3, #3
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002812:	4618      	mov	r0, r3
 8002814:	3714      	adds	r7, #20
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr
 800281e:	bf00      	nop
 8002820:	aaaaaaab 	.word	0xaaaaaaab
 8002824:	08004fac 	.word	0x08004fac

08002828 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002828:	b480      	push	{r7}
 800282a:	b085      	sub	sp, #20
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002830:	2300      	movs	r3, #0
 8002832:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002838:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	699b      	ldr	r3, [r3, #24]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d11f      	bne.n	8002882 <DMA_CheckFifoParam+0x5a>
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	2b03      	cmp	r3, #3
 8002846:	d856      	bhi.n	80028f6 <DMA_CheckFifoParam+0xce>
 8002848:	a201      	add	r2, pc, #4	; (adr r2, 8002850 <DMA_CheckFifoParam+0x28>)
 800284a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800284e:	bf00      	nop
 8002850:	08002861 	.word	0x08002861
 8002854:	08002873 	.word	0x08002873
 8002858:	08002861 	.word	0x08002861
 800285c:	080028f7 	.word	0x080028f7
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002864:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002868:	2b00      	cmp	r3, #0
 800286a:	d046      	beq.n	80028fa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002870:	e043      	b.n	80028fa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002876:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800287a:	d140      	bne.n	80028fe <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002880:	e03d      	b.n	80028fe <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	699b      	ldr	r3, [r3, #24]
 8002886:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800288a:	d121      	bne.n	80028d0 <DMA_CheckFifoParam+0xa8>
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	2b03      	cmp	r3, #3
 8002890:	d837      	bhi.n	8002902 <DMA_CheckFifoParam+0xda>
 8002892:	a201      	add	r2, pc, #4	; (adr r2, 8002898 <DMA_CheckFifoParam+0x70>)
 8002894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002898:	080028a9 	.word	0x080028a9
 800289c:	080028af 	.word	0x080028af
 80028a0:	080028a9 	.word	0x080028a9
 80028a4:	080028c1 	.word	0x080028c1
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	73fb      	strb	r3, [r7, #15]
      break;
 80028ac:	e030      	b.n	8002910 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d025      	beq.n	8002906 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028be:	e022      	b.n	8002906 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028c4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80028c8:	d11f      	bne.n	800290a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80028ce:	e01c      	b.n	800290a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	d903      	bls.n	80028de <DMA_CheckFifoParam+0xb6>
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	2b03      	cmp	r3, #3
 80028da:	d003      	beq.n	80028e4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80028dc:	e018      	b.n	8002910 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	73fb      	strb	r3, [r7, #15]
      break;
 80028e2:	e015      	b.n	8002910 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d00e      	beq.n	800290e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	73fb      	strb	r3, [r7, #15]
      break;
 80028f4:	e00b      	b.n	800290e <DMA_CheckFifoParam+0xe6>
      break;
 80028f6:	bf00      	nop
 80028f8:	e00a      	b.n	8002910 <DMA_CheckFifoParam+0xe8>
      break;
 80028fa:	bf00      	nop
 80028fc:	e008      	b.n	8002910 <DMA_CheckFifoParam+0xe8>
      break;
 80028fe:	bf00      	nop
 8002900:	e006      	b.n	8002910 <DMA_CheckFifoParam+0xe8>
      break;
 8002902:	bf00      	nop
 8002904:	e004      	b.n	8002910 <DMA_CheckFifoParam+0xe8>
      break;
 8002906:	bf00      	nop
 8002908:	e002      	b.n	8002910 <DMA_CheckFifoParam+0xe8>
      break;   
 800290a:	bf00      	nop
 800290c:	e000      	b.n	8002910 <DMA_CheckFifoParam+0xe8>
      break;
 800290e:	bf00      	nop
    }
  } 
  
  return status; 
 8002910:	7bfb      	ldrb	r3, [r7, #15]
}
 8002912:	4618      	mov	r0, r3
 8002914:	3714      	adds	r7, #20
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr
 800291e:	bf00      	nop

08002920 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002920:	b480      	push	{r7}
 8002922:	b089      	sub	sp, #36	; 0x24
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800292a:	2300      	movs	r3, #0
 800292c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800292e:	2300      	movs	r3, #0
 8002930:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002932:	2300      	movs	r3, #0
 8002934:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002936:	2300      	movs	r3, #0
 8002938:	61fb      	str	r3, [r7, #28]
 800293a:	e16b      	b.n	8002c14 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800293c:	2201      	movs	r2, #1
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	fa02 f303 	lsl.w	r3, r2, r3
 8002944:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	697a      	ldr	r2, [r7, #20]
 800294c:	4013      	ands	r3, r2
 800294e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002950:	693a      	ldr	r2, [r7, #16]
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	429a      	cmp	r2, r3
 8002956:	f040 815a 	bne.w	8002c0e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	f003 0303 	and.w	r3, r3, #3
 8002962:	2b01      	cmp	r3, #1
 8002964:	d005      	beq.n	8002972 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800296e:	2b02      	cmp	r3, #2
 8002970:	d130      	bne.n	80029d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002978:	69fb      	ldr	r3, [r7, #28]
 800297a:	005b      	lsls	r3, r3, #1
 800297c:	2203      	movs	r2, #3
 800297e:	fa02 f303 	lsl.w	r3, r2, r3
 8002982:	43db      	mvns	r3, r3
 8002984:	69ba      	ldr	r2, [r7, #24]
 8002986:	4013      	ands	r3, r2
 8002988:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	68da      	ldr	r2, [r3, #12]
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	005b      	lsls	r3, r3, #1
 8002992:	fa02 f303 	lsl.w	r3, r2, r3
 8002996:	69ba      	ldr	r2, [r7, #24]
 8002998:	4313      	orrs	r3, r2
 800299a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	69ba      	ldr	r2, [r7, #24]
 80029a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029a8:	2201      	movs	r2, #1
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	fa02 f303 	lsl.w	r3, r2, r3
 80029b0:	43db      	mvns	r3, r3
 80029b2:	69ba      	ldr	r2, [r7, #24]
 80029b4:	4013      	ands	r3, r2
 80029b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	091b      	lsrs	r3, r3, #4
 80029be:	f003 0201 	and.w	r2, r3, #1
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	fa02 f303 	lsl.w	r3, r2, r3
 80029c8:	69ba      	ldr	r2, [r7, #24]
 80029ca:	4313      	orrs	r3, r2
 80029cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	69ba      	ldr	r2, [r7, #24]
 80029d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f003 0303 	and.w	r3, r3, #3
 80029dc:	2b03      	cmp	r3, #3
 80029de:	d017      	beq.n	8002a10 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	005b      	lsls	r3, r3, #1
 80029ea:	2203      	movs	r2, #3
 80029ec:	fa02 f303 	lsl.w	r3, r2, r3
 80029f0:	43db      	mvns	r3, r3
 80029f2:	69ba      	ldr	r2, [r7, #24]
 80029f4:	4013      	ands	r3, r2
 80029f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	689a      	ldr	r2, [r3, #8]
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	005b      	lsls	r3, r3, #1
 8002a00:	fa02 f303 	lsl.w	r3, r2, r3
 8002a04:	69ba      	ldr	r2, [r7, #24]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	69ba      	ldr	r2, [r7, #24]
 8002a0e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f003 0303 	and.w	r3, r3, #3
 8002a18:	2b02      	cmp	r3, #2
 8002a1a:	d123      	bne.n	8002a64 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	08da      	lsrs	r2, r3, #3
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	3208      	adds	r2, #8
 8002a24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a28:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	f003 0307 	and.w	r3, r3, #7
 8002a30:	009b      	lsls	r3, r3, #2
 8002a32:	220f      	movs	r2, #15
 8002a34:	fa02 f303 	lsl.w	r3, r2, r3
 8002a38:	43db      	mvns	r3, r3
 8002a3a:	69ba      	ldr	r2, [r7, #24]
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	691a      	ldr	r2, [r3, #16]
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	f003 0307 	and.w	r3, r3, #7
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a50:	69ba      	ldr	r2, [r7, #24]
 8002a52:	4313      	orrs	r3, r2
 8002a54:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	08da      	lsrs	r2, r3, #3
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	3208      	adds	r2, #8
 8002a5e:	69b9      	ldr	r1, [r7, #24]
 8002a60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	005b      	lsls	r3, r3, #1
 8002a6e:	2203      	movs	r2, #3
 8002a70:	fa02 f303 	lsl.w	r3, r2, r3
 8002a74:	43db      	mvns	r3, r3
 8002a76:	69ba      	ldr	r2, [r7, #24]
 8002a78:	4013      	ands	r3, r2
 8002a7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	f003 0203 	and.w	r2, r3, #3
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	005b      	lsls	r3, r3, #1
 8002a88:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8c:	69ba      	ldr	r2, [r7, #24]
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	69ba      	ldr	r2, [r7, #24]
 8002a96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	f000 80b4 	beq.w	8002c0e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	60fb      	str	r3, [r7, #12]
 8002aaa:	4b60      	ldr	r3, [pc, #384]	; (8002c2c <HAL_GPIO_Init+0x30c>)
 8002aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aae:	4a5f      	ldr	r2, [pc, #380]	; (8002c2c <HAL_GPIO_Init+0x30c>)
 8002ab0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ab4:	6453      	str	r3, [r2, #68]	; 0x44
 8002ab6:	4b5d      	ldr	r3, [pc, #372]	; (8002c2c <HAL_GPIO_Init+0x30c>)
 8002ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002abe:	60fb      	str	r3, [r7, #12]
 8002ac0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ac2:	4a5b      	ldr	r2, [pc, #364]	; (8002c30 <HAL_GPIO_Init+0x310>)
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	089b      	lsrs	r3, r3, #2
 8002ac8:	3302      	adds	r3, #2
 8002aca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ace:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ad0:	69fb      	ldr	r3, [r7, #28]
 8002ad2:	f003 0303 	and.w	r3, r3, #3
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	220f      	movs	r2, #15
 8002ada:	fa02 f303 	lsl.w	r3, r2, r3
 8002ade:	43db      	mvns	r3, r3
 8002ae0:	69ba      	ldr	r2, [r7, #24]
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4a52      	ldr	r2, [pc, #328]	; (8002c34 <HAL_GPIO_Init+0x314>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d02b      	beq.n	8002b46 <HAL_GPIO_Init+0x226>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4a51      	ldr	r2, [pc, #324]	; (8002c38 <HAL_GPIO_Init+0x318>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d025      	beq.n	8002b42 <HAL_GPIO_Init+0x222>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	4a50      	ldr	r2, [pc, #320]	; (8002c3c <HAL_GPIO_Init+0x31c>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d01f      	beq.n	8002b3e <HAL_GPIO_Init+0x21e>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4a4f      	ldr	r2, [pc, #316]	; (8002c40 <HAL_GPIO_Init+0x320>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d019      	beq.n	8002b3a <HAL_GPIO_Init+0x21a>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	4a4e      	ldr	r2, [pc, #312]	; (8002c44 <HAL_GPIO_Init+0x324>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d013      	beq.n	8002b36 <HAL_GPIO_Init+0x216>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4a4d      	ldr	r2, [pc, #308]	; (8002c48 <HAL_GPIO_Init+0x328>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d00d      	beq.n	8002b32 <HAL_GPIO_Init+0x212>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4a4c      	ldr	r2, [pc, #304]	; (8002c4c <HAL_GPIO_Init+0x32c>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d007      	beq.n	8002b2e <HAL_GPIO_Init+0x20e>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4a4b      	ldr	r2, [pc, #300]	; (8002c50 <HAL_GPIO_Init+0x330>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d101      	bne.n	8002b2a <HAL_GPIO_Init+0x20a>
 8002b26:	2307      	movs	r3, #7
 8002b28:	e00e      	b.n	8002b48 <HAL_GPIO_Init+0x228>
 8002b2a:	2308      	movs	r3, #8
 8002b2c:	e00c      	b.n	8002b48 <HAL_GPIO_Init+0x228>
 8002b2e:	2306      	movs	r3, #6
 8002b30:	e00a      	b.n	8002b48 <HAL_GPIO_Init+0x228>
 8002b32:	2305      	movs	r3, #5
 8002b34:	e008      	b.n	8002b48 <HAL_GPIO_Init+0x228>
 8002b36:	2304      	movs	r3, #4
 8002b38:	e006      	b.n	8002b48 <HAL_GPIO_Init+0x228>
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e004      	b.n	8002b48 <HAL_GPIO_Init+0x228>
 8002b3e:	2302      	movs	r3, #2
 8002b40:	e002      	b.n	8002b48 <HAL_GPIO_Init+0x228>
 8002b42:	2301      	movs	r3, #1
 8002b44:	e000      	b.n	8002b48 <HAL_GPIO_Init+0x228>
 8002b46:	2300      	movs	r3, #0
 8002b48:	69fa      	ldr	r2, [r7, #28]
 8002b4a:	f002 0203 	and.w	r2, r2, #3
 8002b4e:	0092      	lsls	r2, r2, #2
 8002b50:	4093      	lsls	r3, r2
 8002b52:	69ba      	ldr	r2, [r7, #24]
 8002b54:	4313      	orrs	r3, r2
 8002b56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b58:	4935      	ldr	r1, [pc, #212]	; (8002c30 <HAL_GPIO_Init+0x310>)
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	089b      	lsrs	r3, r3, #2
 8002b5e:	3302      	adds	r3, #2
 8002b60:	69ba      	ldr	r2, [r7, #24]
 8002b62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b66:	4b3b      	ldr	r3, [pc, #236]	; (8002c54 <HAL_GPIO_Init+0x334>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	43db      	mvns	r3, r3
 8002b70:	69ba      	ldr	r2, [r7, #24]
 8002b72:	4013      	ands	r3, r2
 8002b74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d003      	beq.n	8002b8a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002b82:	69ba      	ldr	r2, [r7, #24]
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	4313      	orrs	r3, r2
 8002b88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b8a:	4a32      	ldr	r2, [pc, #200]	; (8002c54 <HAL_GPIO_Init+0x334>)
 8002b8c:	69bb      	ldr	r3, [r7, #24]
 8002b8e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002b90:	4b30      	ldr	r3, [pc, #192]	; (8002c54 <HAL_GPIO_Init+0x334>)
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	43db      	mvns	r3, r3
 8002b9a:	69ba      	ldr	r2, [r7, #24]
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d003      	beq.n	8002bb4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002bac:	69ba      	ldr	r2, [r7, #24]
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002bb4:	4a27      	ldr	r2, [pc, #156]	; (8002c54 <HAL_GPIO_Init+0x334>)
 8002bb6:	69bb      	ldr	r3, [r7, #24]
 8002bb8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002bba:	4b26      	ldr	r3, [pc, #152]	; (8002c54 <HAL_GPIO_Init+0x334>)
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	43db      	mvns	r3, r3
 8002bc4:	69ba      	ldr	r2, [r7, #24]
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d003      	beq.n	8002bde <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002bd6:	69ba      	ldr	r2, [r7, #24]
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002bde:	4a1d      	ldr	r2, [pc, #116]	; (8002c54 <HAL_GPIO_Init+0x334>)
 8002be0:	69bb      	ldr	r3, [r7, #24]
 8002be2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002be4:	4b1b      	ldr	r3, [pc, #108]	; (8002c54 <HAL_GPIO_Init+0x334>)
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	43db      	mvns	r3, r3
 8002bee:	69ba      	ldr	r2, [r7, #24]
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d003      	beq.n	8002c08 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002c00:	69ba      	ldr	r2, [r7, #24]
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	4313      	orrs	r3, r2
 8002c06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c08:	4a12      	ldr	r2, [pc, #72]	; (8002c54 <HAL_GPIO_Init+0x334>)
 8002c0a:	69bb      	ldr	r3, [r7, #24]
 8002c0c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	3301      	adds	r3, #1
 8002c12:	61fb      	str	r3, [r7, #28]
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	2b0f      	cmp	r3, #15
 8002c18:	f67f ae90 	bls.w	800293c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c1c:	bf00      	nop
 8002c1e:	bf00      	nop
 8002c20:	3724      	adds	r7, #36	; 0x24
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr
 8002c2a:	bf00      	nop
 8002c2c:	40023800 	.word	0x40023800
 8002c30:	40013800 	.word	0x40013800
 8002c34:	40020000 	.word	0x40020000
 8002c38:	40020400 	.word	0x40020400
 8002c3c:	40020800 	.word	0x40020800
 8002c40:	40020c00 	.word	0x40020c00
 8002c44:	40021000 	.word	0x40021000
 8002c48:	40021400 	.word	0x40021400
 8002c4c:	40021800 	.word	0x40021800
 8002c50:	40021c00 	.word	0x40021c00
 8002c54:	40013c00 	.word	0x40013c00

08002c58 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b082      	sub	sp, #8
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	4603      	mov	r3, r0
 8002c60:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002c62:	4b08      	ldr	r3, [pc, #32]	; (8002c84 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c64:	695a      	ldr	r2, [r3, #20]
 8002c66:	88fb      	ldrh	r3, [r7, #6]
 8002c68:	4013      	ands	r3, r2
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d006      	beq.n	8002c7c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002c6e:	4a05      	ldr	r2, [pc, #20]	; (8002c84 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c70:	88fb      	ldrh	r3, [r7, #6]
 8002c72:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002c74:	88fb      	ldrh	r3, [r7, #6]
 8002c76:	4618      	mov	r0, r3
 8002c78:	f7fd fc3e 	bl	80004f8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002c7c:	bf00      	nop
 8002c7e:	3708      	adds	r7, #8
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	40013c00 	.word	0x40013c00

08002c88 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b084      	sub	sp, #16
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d101      	bne.n	8002c9a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e12b      	b.n	8002ef2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d106      	bne.n	8002cb4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f7fe fa94 	bl	80011dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2224      	movs	r2, #36	; 0x24
 8002cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f022 0201 	bic.w	r2, r2, #1
 8002cca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002cda:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002cea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002cec:	f001 f864 	bl	8003db8 <HAL_RCC_GetPCLK1Freq>
 8002cf0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	4a81      	ldr	r2, [pc, #516]	; (8002efc <HAL_I2C_Init+0x274>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d807      	bhi.n	8002d0c <HAL_I2C_Init+0x84>
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	4a80      	ldr	r2, [pc, #512]	; (8002f00 <HAL_I2C_Init+0x278>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	bf94      	ite	ls
 8002d04:	2301      	movls	r3, #1
 8002d06:	2300      	movhi	r3, #0
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	e006      	b.n	8002d1a <HAL_I2C_Init+0x92>
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	4a7d      	ldr	r2, [pc, #500]	; (8002f04 <HAL_I2C_Init+0x27c>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	bf94      	ite	ls
 8002d14:	2301      	movls	r3, #1
 8002d16:	2300      	movhi	r3, #0
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d001      	beq.n	8002d22 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e0e7      	b.n	8002ef2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	4a78      	ldr	r2, [pc, #480]	; (8002f08 <HAL_I2C_Init+0x280>)
 8002d26:	fba2 2303 	umull	r2, r3, r2, r3
 8002d2a:	0c9b      	lsrs	r3, r3, #18
 8002d2c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	68ba      	ldr	r2, [r7, #8]
 8002d3e:	430a      	orrs	r2, r1
 8002d40:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	6a1b      	ldr	r3, [r3, #32]
 8002d48:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	4a6a      	ldr	r2, [pc, #424]	; (8002efc <HAL_I2C_Init+0x274>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d802      	bhi.n	8002d5c <HAL_I2C_Init+0xd4>
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	3301      	adds	r3, #1
 8002d5a:	e009      	b.n	8002d70 <HAL_I2C_Init+0xe8>
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002d62:	fb02 f303 	mul.w	r3, r2, r3
 8002d66:	4a69      	ldr	r2, [pc, #420]	; (8002f0c <HAL_I2C_Init+0x284>)
 8002d68:	fba2 2303 	umull	r2, r3, r2, r3
 8002d6c:	099b      	lsrs	r3, r3, #6
 8002d6e:	3301      	adds	r3, #1
 8002d70:	687a      	ldr	r2, [r7, #4]
 8002d72:	6812      	ldr	r2, [r2, #0]
 8002d74:	430b      	orrs	r3, r1
 8002d76:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	69db      	ldr	r3, [r3, #28]
 8002d7e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002d82:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	495c      	ldr	r1, [pc, #368]	; (8002efc <HAL_I2C_Init+0x274>)
 8002d8c:	428b      	cmp	r3, r1
 8002d8e:	d819      	bhi.n	8002dc4 <HAL_I2C_Init+0x13c>
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	1e59      	subs	r1, r3, #1
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	005b      	lsls	r3, r3, #1
 8002d9a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d9e:	1c59      	adds	r1, r3, #1
 8002da0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002da4:	400b      	ands	r3, r1
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d00a      	beq.n	8002dc0 <HAL_I2C_Init+0x138>
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	1e59      	subs	r1, r3, #1
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	005b      	lsls	r3, r3, #1
 8002db4:	fbb1 f3f3 	udiv	r3, r1, r3
 8002db8:	3301      	adds	r3, #1
 8002dba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dbe:	e051      	b.n	8002e64 <HAL_I2C_Init+0x1dc>
 8002dc0:	2304      	movs	r3, #4
 8002dc2:	e04f      	b.n	8002e64 <HAL_I2C_Init+0x1dc>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d111      	bne.n	8002df0 <HAL_I2C_Init+0x168>
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	1e58      	subs	r0, r3, #1
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6859      	ldr	r1, [r3, #4]
 8002dd4:	460b      	mov	r3, r1
 8002dd6:	005b      	lsls	r3, r3, #1
 8002dd8:	440b      	add	r3, r1
 8002dda:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dde:	3301      	adds	r3, #1
 8002de0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	bf0c      	ite	eq
 8002de8:	2301      	moveq	r3, #1
 8002dea:	2300      	movne	r3, #0
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	e012      	b.n	8002e16 <HAL_I2C_Init+0x18e>
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	1e58      	subs	r0, r3, #1
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6859      	ldr	r1, [r3, #4]
 8002df8:	460b      	mov	r3, r1
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	440b      	add	r3, r1
 8002dfe:	0099      	lsls	r1, r3, #2
 8002e00:	440b      	add	r3, r1
 8002e02:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e06:	3301      	adds	r3, #1
 8002e08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	bf0c      	ite	eq
 8002e10:	2301      	moveq	r3, #1
 8002e12:	2300      	movne	r3, #0
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d001      	beq.n	8002e1e <HAL_I2C_Init+0x196>
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e022      	b.n	8002e64 <HAL_I2C_Init+0x1dc>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d10e      	bne.n	8002e44 <HAL_I2C_Init+0x1bc>
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	1e58      	subs	r0, r3, #1
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6859      	ldr	r1, [r3, #4]
 8002e2e:	460b      	mov	r3, r1
 8002e30:	005b      	lsls	r3, r3, #1
 8002e32:	440b      	add	r3, r1
 8002e34:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e38:	3301      	adds	r3, #1
 8002e3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e42:	e00f      	b.n	8002e64 <HAL_I2C_Init+0x1dc>
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	1e58      	subs	r0, r3, #1
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6859      	ldr	r1, [r3, #4]
 8002e4c:	460b      	mov	r3, r1
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	440b      	add	r3, r1
 8002e52:	0099      	lsls	r1, r3, #2
 8002e54:	440b      	add	r3, r1
 8002e56:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e5a:	3301      	adds	r3, #1
 8002e5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e60:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e64:	6879      	ldr	r1, [r7, #4]
 8002e66:	6809      	ldr	r1, [r1, #0]
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	69da      	ldr	r2, [r3, #28]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6a1b      	ldr	r3, [r3, #32]
 8002e7e:	431a      	orrs	r2, r3
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	430a      	orrs	r2, r1
 8002e86:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002e92:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002e96:	687a      	ldr	r2, [r7, #4]
 8002e98:	6911      	ldr	r1, [r2, #16]
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	68d2      	ldr	r2, [r2, #12]
 8002e9e:	4311      	orrs	r1, r2
 8002ea0:	687a      	ldr	r2, [r7, #4]
 8002ea2:	6812      	ldr	r2, [r2, #0]
 8002ea4:	430b      	orrs	r3, r1
 8002ea6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	68db      	ldr	r3, [r3, #12]
 8002eae:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	695a      	ldr	r2, [r3, #20]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	699b      	ldr	r3, [r3, #24]
 8002eba:	431a      	orrs	r2, r3
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	430a      	orrs	r2, r1
 8002ec2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f042 0201 	orr.w	r2, r2, #1
 8002ed2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2220      	movs	r2, #32
 8002ede:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2200      	movs	r2, #0
 8002eec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ef0:	2300      	movs	r3, #0
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3710      	adds	r7, #16
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop
 8002efc:	000186a0 	.word	0x000186a0
 8002f00:	001e847f 	.word	0x001e847f
 8002f04:	003d08ff 	.word	0x003d08ff
 8002f08:	431bde83 	.word	0x431bde83
 8002f0c:	10624dd3 	.word	0x10624dd3

08002f10 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b088      	sub	sp, #32
 8002f14:	af02      	add	r7, sp, #8
 8002f16:	60f8      	str	r0, [r7, #12]
 8002f18:	607a      	str	r2, [r7, #4]
 8002f1a:	461a      	mov	r2, r3
 8002f1c:	460b      	mov	r3, r1
 8002f1e:	817b      	strh	r3, [r7, #10]
 8002f20:	4613      	mov	r3, r2
 8002f22:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002f24:	f7fe fb42 	bl	80015ac <HAL_GetTick>
 8002f28:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	2b20      	cmp	r3, #32
 8002f34:	f040 80e0 	bne.w	80030f8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	9300      	str	r3, [sp, #0]
 8002f3c:	2319      	movs	r3, #25
 8002f3e:	2201      	movs	r2, #1
 8002f40:	4970      	ldr	r1, [pc, #448]	; (8003104 <HAL_I2C_Master_Transmit+0x1f4>)
 8002f42:	68f8      	ldr	r0, [r7, #12]
 8002f44:	f000 f964 	bl	8003210 <I2C_WaitOnFlagUntilTimeout>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d001      	beq.n	8002f52 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002f4e:	2302      	movs	r3, #2
 8002f50:	e0d3      	b.n	80030fa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d101      	bne.n	8002f60 <HAL_I2C_Master_Transmit+0x50>
 8002f5c:	2302      	movs	r3, #2
 8002f5e:	e0cc      	b.n	80030fa <HAL_I2C_Master_Transmit+0x1ea>
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2201      	movs	r2, #1
 8002f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0301 	and.w	r3, r3, #1
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d007      	beq.n	8002f86 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f042 0201 	orr.w	r2, r2, #1
 8002f84:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f94:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2221      	movs	r2, #33	; 0x21
 8002f9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2210      	movs	r2, #16
 8002fa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	687a      	ldr	r2, [r7, #4]
 8002fb0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	893a      	ldrh	r2, [r7, #8]
 8002fb6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fbc:	b29a      	uxth	r2, r3
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	4a50      	ldr	r2, [pc, #320]	; (8003108 <HAL_I2C_Master_Transmit+0x1f8>)
 8002fc6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002fc8:	8979      	ldrh	r1, [r7, #10]
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	6a3a      	ldr	r2, [r7, #32]
 8002fce:	68f8      	ldr	r0, [r7, #12]
 8002fd0:	f000 f89c 	bl	800310c <I2C_MasterRequestWrite>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d001      	beq.n	8002fde <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e08d      	b.n	80030fa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fde:	2300      	movs	r3, #0
 8002fe0:	613b      	str	r3, [r7, #16]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	695b      	ldr	r3, [r3, #20]
 8002fe8:	613b      	str	r3, [r7, #16]
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	699b      	ldr	r3, [r3, #24]
 8002ff0:	613b      	str	r3, [r7, #16]
 8002ff2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002ff4:	e066      	b.n	80030c4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ff6:	697a      	ldr	r2, [r7, #20]
 8002ff8:	6a39      	ldr	r1, [r7, #32]
 8002ffa:	68f8      	ldr	r0, [r7, #12]
 8002ffc:	f000 f9de 	bl	80033bc <I2C_WaitOnTXEFlagUntilTimeout>
 8003000:	4603      	mov	r3, r0
 8003002:	2b00      	cmp	r3, #0
 8003004:	d00d      	beq.n	8003022 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300a:	2b04      	cmp	r3, #4
 800300c:	d107      	bne.n	800301e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800301c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e06b      	b.n	80030fa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003026:	781a      	ldrb	r2, [r3, #0]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003032:	1c5a      	adds	r2, r3, #1
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800303c:	b29b      	uxth	r3, r3
 800303e:	3b01      	subs	r3, #1
 8003040:	b29a      	uxth	r2, r3
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800304a:	3b01      	subs	r3, #1
 800304c:	b29a      	uxth	r2, r3
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	695b      	ldr	r3, [r3, #20]
 8003058:	f003 0304 	and.w	r3, r3, #4
 800305c:	2b04      	cmp	r3, #4
 800305e:	d11b      	bne.n	8003098 <HAL_I2C_Master_Transmit+0x188>
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003064:	2b00      	cmp	r3, #0
 8003066:	d017      	beq.n	8003098 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306c:	781a      	ldrb	r2, [r3, #0]
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003078:	1c5a      	adds	r2, r3, #1
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003082:	b29b      	uxth	r3, r3
 8003084:	3b01      	subs	r3, #1
 8003086:	b29a      	uxth	r2, r3
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003090:	3b01      	subs	r3, #1
 8003092:	b29a      	uxth	r2, r3
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003098:	697a      	ldr	r2, [r7, #20]
 800309a:	6a39      	ldr	r1, [r7, #32]
 800309c:	68f8      	ldr	r0, [r7, #12]
 800309e:	f000 f9ce 	bl	800343e <I2C_WaitOnBTFFlagUntilTimeout>
 80030a2:	4603      	mov	r3, r0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d00d      	beq.n	80030c4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ac:	2b04      	cmp	r3, #4
 80030ae:	d107      	bne.n	80030c0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030be:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e01a      	b.n	80030fa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d194      	bne.n	8002ff6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2220      	movs	r2, #32
 80030e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2200      	movs	r2, #0
 80030e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2200      	movs	r2, #0
 80030f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80030f4:	2300      	movs	r3, #0
 80030f6:	e000      	b.n	80030fa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80030f8:	2302      	movs	r3, #2
  }
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3718      	adds	r7, #24
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	00100002 	.word	0x00100002
 8003108:	ffff0000 	.word	0xffff0000

0800310c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b088      	sub	sp, #32
 8003110:	af02      	add	r7, sp, #8
 8003112:	60f8      	str	r0, [r7, #12]
 8003114:	607a      	str	r2, [r7, #4]
 8003116:	603b      	str	r3, [r7, #0]
 8003118:	460b      	mov	r3, r1
 800311a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003120:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	2b08      	cmp	r3, #8
 8003126:	d006      	beq.n	8003136 <I2C_MasterRequestWrite+0x2a>
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	2b01      	cmp	r3, #1
 800312c:	d003      	beq.n	8003136 <I2C_MasterRequestWrite+0x2a>
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003134:	d108      	bne.n	8003148 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003144:	601a      	str	r2, [r3, #0]
 8003146:	e00b      	b.n	8003160 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800314c:	2b12      	cmp	r3, #18
 800314e:	d107      	bne.n	8003160 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800315e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	9300      	str	r3, [sp, #0]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2200      	movs	r2, #0
 8003168:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800316c:	68f8      	ldr	r0, [r7, #12]
 800316e:	f000 f84f 	bl	8003210 <I2C_WaitOnFlagUntilTimeout>
 8003172:	4603      	mov	r3, r0
 8003174:	2b00      	cmp	r3, #0
 8003176:	d00d      	beq.n	8003194 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003182:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003186:	d103      	bne.n	8003190 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800318e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003190:	2303      	movs	r3, #3
 8003192:	e035      	b.n	8003200 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	691b      	ldr	r3, [r3, #16]
 8003198:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800319c:	d108      	bne.n	80031b0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800319e:	897b      	ldrh	r3, [r7, #10]
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	461a      	mov	r2, r3
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80031ac:	611a      	str	r2, [r3, #16]
 80031ae:	e01b      	b.n	80031e8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80031b0:	897b      	ldrh	r3, [r7, #10]
 80031b2:	11db      	asrs	r3, r3, #7
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	f003 0306 	and.w	r3, r3, #6
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	f063 030f 	orn	r3, r3, #15
 80031c0:	b2da      	uxtb	r2, r3
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	687a      	ldr	r2, [r7, #4]
 80031cc:	490e      	ldr	r1, [pc, #56]	; (8003208 <I2C_MasterRequestWrite+0xfc>)
 80031ce:	68f8      	ldr	r0, [r7, #12]
 80031d0:	f000 f875 	bl	80032be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80031d4:	4603      	mov	r3, r0
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d001      	beq.n	80031de <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	e010      	b.n	8003200 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80031de:	897b      	ldrh	r3, [r7, #10]
 80031e0:	b2da      	uxtb	r2, r3
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	687a      	ldr	r2, [r7, #4]
 80031ec:	4907      	ldr	r1, [pc, #28]	; (800320c <I2C_MasterRequestWrite+0x100>)
 80031ee:	68f8      	ldr	r0, [r7, #12]
 80031f0:	f000 f865 	bl	80032be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80031f4:	4603      	mov	r3, r0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d001      	beq.n	80031fe <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e000      	b.n	8003200 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80031fe:	2300      	movs	r3, #0
}
 8003200:	4618      	mov	r0, r3
 8003202:	3718      	adds	r7, #24
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}
 8003208:	00010008 	.word	0x00010008
 800320c:	00010002 	.word	0x00010002

08003210 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b084      	sub	sp, #16
 8003214:	af00      	add	r7, sp, #0
 8003216:	60f8      	str	r0, [r7, #12]
 8003218:	60b9      	str	r1, [r7, #8]
 800321a:	603b      	str	r3, [r7, #0]
 800321c:	4613      	mov	r3, r2
 800321e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003220:	e025      	b.n	800326e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003228:	d021      	beq.n	800326e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800322a:	f7fe f9bf 	bl	80015ac <HAL_GetTick>
 800322e:	4602      	mov	r2, r0
 8003230:	69bb      	ldr	r3, [r7, #24]
 8003232:	1ad3      	subs	r3, r2, r3
 8003234:	683a      	ldr	r2, [r7, #0]
 8003236:	429a      	cmp	r2, r3
 8003238:	d302      	bcc.n	8003240 <I2C_WaitOnFlagUntilTimeout+0x30>
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d116      	bne.n	800326e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2200      	movs	r2, #0
 8003244:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2220      	movs	r2, #32
 800324a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2200      	movs	r2, #0
 8003252:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325a:	f043 0220 	orr.w	r2, r3, #32
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2200      	movs	r2, #0
 8003266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e023      	b.n	80032b6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	0c1b      	lsrs	r3, r3, #16
 8003272:	b2db      	uxtb	r3, r3
 8003274:	2b01      	cmp	r3, #1
 8003276:	d10d      	bne.n	8003294 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	695b      	ldr	r3, [r3, #20]
 800327e:	43da      	mvns	r2, r3
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	4013      	ands	r3, r2
 8003284:	b29b      	uxth	r3, r3
 8003286:	2b00      	cmp	r3, #0
 8003288:	bf0c      	ite	eq
 800328a:	2301      	moveq	r3, #1
 800328c:	2300      	movne	r3, #0
 800328e:	b2db      	uxtb	r3, r3
 8003290:	461a      	mov	r2, r3
 8003292:	e00c      	b.n	80032ae <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	699b      	ldr	r3, [r3, #24]
 800329a:	43da      	mvns	r2, r3
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	4013      	ands	r3, r2
 80032a0:	b29b      	uxth	r3, r3
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	bf0c      	ite	eq
 80032a6:	2301      	moveq	r3, #1
 80032a8:	2300      	movne	r3, #0
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	461a      	mov	r2, r3
 80032ae:	79fb      	ldrb	r3, [r7, #7]
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d0b6      	beq.n	8003222 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80032b4:	2300      	movs	r3, #0
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3710      	adds	r7, #16
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}

080032be <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80032be:	b580      	push	{r7, lr}
 80032c0:	b084      	sub	sp, #16
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	60f8      	str	r0, [r7, #12]
 80032c6:	60b9      	str	r1, [r7, #8]
 80032c8:	607a      	str	r2, [r7, #4]
 80032ca:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80032cc:	e051      	b.n	8003372 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	695b      	ldr	r3, [r3, #20]
 80032d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032dc:	d123      	bne.n	8003326 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032ec:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80032f6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2200      	movs	r2, #0
 80032fc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2220      	movs	r2, #32
 8003302:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2200      	movs	r2, #0
 800330a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003312:	f043 0204 	orr.w	r2, r3, #4
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2200      	movs	r2, #0
 800331e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e046      	b.n	80033b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800332c:	d021      	beq.n	8003372 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800332e:	f7fe f93d 	bl	80015ac <HAL_GetTick>
 8003332:	4602      	mov	r2, r0
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	1ad3      	subs	r3, r2, r3
 8003338:	687a      	ldr	r2, [r7, #4]
 800333a:	429a      	cmp	r2, r3
 800333c:	d302      	bcc.n	8003344 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d116      	bne.n	8003372 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2200      	movs	r2, #0
 8003348:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2220      	movs	r2, #32
 800334e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2200      	movs	r2, #0
 8003356:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335e:	f043 0220 	orr.w	r2, r3, #32
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2200      	movs	r2, #0
 800336a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	e020      	b.n	80033b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	0c1b      	lsrs	r3, r3, #16
 8003376:	b2db      	uxtb	r3, r3
 8003378:	2b01      	cmp	r3, #1
 800337a:	d10c      	bne.n	8003396 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	695b      	ldr	r3, [r3, #20]
 8003382:	43da      	mvns	r2, r3
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	4013      	ands	r3, r2
 8003388:	b29b      	uxth	r3, r3
 800338a:	2b00      	cmp	r3, #0
 800338c:	bf14      	ite	ne
 800338e:	2301      	movne	r3, #1
 8003390:	2300      	moveq	r3, #0
 8003392:	b2db      	uxtb	r3, r3
 8003394:	e00b      	b.n	80033ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	699b      	ldr	r3, [r3, #24]
 800339c:	43da      	mvns	r2, r3
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	4013      	ands	r3, r2
 80033a2:	b29b      	uxth	r3, r3
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	bf14      	ite	ne
 80033a8:	2301      	movne	r3, #1
 80033aa:	2300      	moveq	r3, #0
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d18d      	bne.n	80032ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80033b2:	2300      	movs	r3, #0
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	3710      	adds	r7, #16
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}

080033bc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b084      	sub	sp, #16
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	60f8      	str	r0, [r7, #12]
 80033c4:	60b9      	str	r1, [r7, #8]
 80033c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033c8:	e02d      	b.n	8003426 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80033ca:	68f8      	ldr	r0, [r7, #12]
 80033cc:	f000 f878 	bl	80034c0 <I2C_IsAcknowledgeFailed>
 80033d0:	4603      	mov	r3, r0
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d001      	beq.n	80033da <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e02d      	b.n	8003436 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033e0:	d021      	beq.n	8003426 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033e2:	f7fe f8e3 	bl	80015ac <HAL_GetTick>
 80033e6:	4602      	mov	r2, r0
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	1ad3      	subs	r3, r2, r3
 80033ec:	68ba      	ldr	r2, [r7, #8]
 80033ee:	429a      	cmp	r2, r3
 80033f0:	d302      	bcc.n	80033f8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d116      	bne.n	8003426 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2200      	movs	r2, #0
 80033fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2220      	movs	r2, #32
 8003402:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2200      	movs	r2, #0
 800340a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003412:	f043 0220 	orr.w	r2, r3, #32
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2200      	movs	r2, #0
 800341e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e007      	b.n	8003436 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	695b      	ldr	r3, [r3, #20]
 800342c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003430:	2b80      	cmp	r3, #128	; 0x80
 8003432:	d1ca      	bne.n	80033ca <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003434:	2300      	movs	r3, #0
}
 8003436:	4618      	mov	r0, r3
 8003438:	3710      	adds	r7, #16
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}

0800343e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800343e:	b580      	push	{r7, lr}
 8003440:	b084      	sub	sp, #16
 8003442:	af00      	add	r7, sp, #0
 8003444:	60f8      	str	r0, [r7, #12]
 8003446:	60b9      	str	r1, [r7, #8]
 8003448:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800344a:	e02d      	b.n	80034a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800344c:	68f8      	ldr	r0, [r7, #12]
 800344e:	f000 f837 	bl	80034c0 <I2C_IsAcknowledgeFailed>
 8003452:	4603      	mov	r3, r0
 8003454:	2b00      	cmp	r3, #0
 8003456:	d001      	beq.n	800345c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	e02d      	b.n	80034b8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003462:	d021      	beq.n	80034a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003464:	f7fe f8a2 	bl	80015ac <HAL_GetTick>
 8003468:	4602      	mov	r2, r0
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	68ba      	ldr	r2, [r7, #8]
 8003470:	429a      	cmp	r2, r3
 8003472:	d302      	bcc.n	800347a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d116      	bne.n	80034a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2200      	movs	r2, #0
 800347e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2220      	movs	r2, #32
 8003484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2200      	movs	r2, #0
 800348c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003494:	f043 0220 	orr.w	r2, r3, #32
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2200      	movs	r2, #0
 80034a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	e007      	b.n	80034b8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	695b      	ldr	r3, [r3, #20]
 80034ae:	f003 0304 	and.w	r3, r3, #4
 80034b2:	2b04      	cmp	r3, #4
 80034b4:	d1ca      	bne.n	800344c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80034b6:	2300      	movs	r3, #0
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	3710      	adds	r7, #16
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}

080034c0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b083      	sub	sp, #12
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	695b      	ldr	r3, [r3, #20]
 80034ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034d6:	d11b      	bne.n	8003510 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80034e0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2200      	movs	r2, #0
 80034e6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2220      	movs	r2, #32
 80034ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fc:	f043 0204 	orr.w	r2, r3, #4
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2200      	movs	r2, #0
 8003508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e000      	b.n	8003512 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003510:	2300      	movs	r3, #0
}
 8003512:	4618      	mov	r0, r3
 8003514:	370c      	adds	r7, #12
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr
	...

08003520 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b086      	sub	sp, #24
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d101      	bne.n	8003532 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e264      	b.n	80039fc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 0301 	and.w	r3, r3, #1
 800353a:	2b00      	cmp	r3, #0
 800353c:	d075      	beq.n	800362a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800353e:	4ba3      	ldr	r3, [pc, #652]	; (80037cc <HAL_RCC_OscConfig+0x2ac>)
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	f003 030c 	and.w	r3, r3, #12
 8003546:	2b04      	cmp	r3, #4
 8003548:	d00c      	beq.n	8003564 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800354a:	4ba0      	ldr	r3, [pc, #640]	; (80037cc <HAL_RCC_OscConfig+0x2ac>)
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003552:	2b08      	cmp	r3, #8
 8003554:	d112      	bne.n	800357c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003556:	4b9d      	ldr	r3, [pc, #628]	; (80037cc <HAL_RCC_OscConfig+0x2ac>)
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800355e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003562:	d10b      	bne.n	800357c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003564:	4b99      	ldr	r3, [pc, #612]	; (80037cc <HAL_RCC_OscConfig+0x2ac>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800356c:	2b00      	cmp	r3, #0
 800356e:	d05b      	beq.n	8003628 <HAL_RCC_OscConfig+0x108>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d157      	bne.n	8003628 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	e23f      	b.n	80039fc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003584:	d106      	bne.n	8003594 <HAL_RCC_OscConfig+0x74>
 8003586:	4b91      	ldr	r3, [pc, #580]	; (80037cc <HAL_RCC_OscConfig+0x2ac>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a90      	ldr	r2, [pc, #576]	; (80037cc <HAL_RCC_OscConfig+0x2ac>)
 800358c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003590:	6013      	str	r3, [r2, #0]
 8003592:	e01d      	b.n	80035d0 <HAL_RCC_OscConfig+0xb0>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800359c:	d10c      	bne.n	80035b8 <HAL_RCC_OscConfig+0x98>
 800359e:	4b8b      	ldr	r3, [pc, #556]	; (80037cc <HAL_RCC_OscConfig+0x2ac>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a8a      	ldr	r2, [pc, #552]	; (80037cc <HAL_RCC_OscConfig+0x2ac>)
 80035a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035a8:	6013      	str	r3, [r2, #0]
 80035aa:	4b88      	ldr	r3, [pc, #544]	; (80037cc <HAL_RCC_OscConfig+0x2ac>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a87      	ldr	r2, [pc, #540]	; (80037cc <HAL_RCC_OscConfig+0x2ac>)
 80035b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035b4:	6013      	str	r3, [r2, #0]
 80035b6:	e00b      	b.n	80035d0 <HAL_RCC_OscConfig+0xb0>
 80035b8:	4b84      	ldr	r3, [pc, #528]	; (80037cc <HAL_RCC_OscConfig+0x2ac>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a83      	ldr	r2, [pc, #524]	; (80037cc <HAL_RCC_OscConfig+0x2ac>)
 80035be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035c2:	6013      	str	r3, [r2, #0]
 80035c4:	4b81      	ldr	r3, [pc, #516]	; (80037cc <HAL_RCC_OscConfig+0x2ac>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a80      	ldr	r2, [pc, #512]	; (80037cc <HAL_RCC_OscConfig+0x2ac>)
 80035ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d013      	beq.n	8003600 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035d8:	f7fd ffe8 	bl	80015ac <HAL_GetTick>
 80035dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035de:	e008      	b.n	80035f2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035e0:	f7fd ffe4 	bl	80015ac <HAL_GetTick>
 80035e4:	4602      	mov	r2, r0
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	2b64      	cmp	r3, #100	; 0x64
 80035ec:	d901      	bls.n	80035f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80035ee:	2303      	movs	r3, #3
 80035f0:	e204      	b.n	80039fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035f2:	4b76      	ldr	r3, [pc, #472]	; (80037cc <HAL_RCC_OscConfig+0x2ac>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d0f0      	beq.n	80035e0 <HAL_RCC_OscConfig+0xc0>
 80035fe:	e014      	b.n	800362a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003600:	f7fd ffd4 	bl	80015ac <HAL_GetTick>
 8003604:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003606:	e008      	b.n	800361a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003608:	f7fd ffd0 	bl	80015ac <HAL_GetTick>
 800360c:	4602      	mov	r2, r0
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	2b64      	cmp	r3, #100	; 0x64
 8003614:	d901      	bls.n	800361a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003616:	2303      	movs	r3, #3
 8003618:	e1f0      	b.n	80039fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800361a:	4b6c      	ldr	r3, [pc, #432]	; (80037cc <HAL_RCC_OscConfig+0x2ac>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003622:	2b00      	cmp	r3, #0
 8003624:	d1f0      	bne.n	8003608 <HAL_RCC_OscConfig+0xe8>
 8003626:	e000      	b.n	800362a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003628:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 0302 	and.w	r3, r3, #2
 8003632:	2b00      	cmp	r3, #0
 8003634:	d063      	beq.n	80036fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003636:	4b65      	ldr	r3, [pc, #404]	; (80037cc <HAL_RCC_OscConfig+0x2ac>)
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	f003 030c 	and.w	r3, r3, #12
 800363e:	2b00      	cmp	r3, #0
 8003640:	d00b      	beq.n	800365a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003642:	4b62      	ldr	r3, [pc, #392]	; (80037cc <HAL_RCC_OscConfig+0x2ac>)
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800364a:	2b08      	cmp	r3, #8
 800364c:	d11c      	bne.n	8003688 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800364e:	4b5f      	ldr	r3, [pc, #380]	; (80037cc <HAL_RCC_OscConfig+0x2ac>)
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003656:	2b00      	cmp	r3, #0
 8003658:	d116      	bne.n	8003688 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800365a:	4b5c      	ldr	r3, [pc, #368]	; (80037cc <HAL_RCC_OscConfig+0x2ac>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 0302 	and.w	r3, r3, #2
 8003662:	2b00      	cmp	r3, #0
 8003664:	d005      	beq.n	8003672 <HAL_RCC_OscConfig+0x152>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	68db      	ldr	r3, [r3, #12]
 800366a:	2b01      	cmp	r3, #1
 800366c:	d001      	beq.n	8003672 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e1c4      	b.n	80039fc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003672:	4b56      	ldr	r3, [pc, #344]	; (80037cc <HAL_RCC_OscConfig+0x2ac>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	691b      	ldr	r3, [r3, #16]
 800367e:	00db      	lsls	r3, r3, #3
 8003680:	4952      	ldr	r1, [pc, #328]	; (80037cc <HAL_RCC_OscConfig+0x2ac>)
 8003682:	4313      	orrs	r3, r2
 8003684:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003686:	e03a      	b.n	80036fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	68db      	ldr	r3, [r3, #12]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d020      	beq.n	80036d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003690:	4b4f      	ldr	r3, [pc, #316]	; (80037d0 <HAL_RCC_OscConfig+0x2b0>)
 8003692:	2201      	movs	r2, #1
 8003694:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003696:	f7fd ff89 	bl	80015ac <HAL_GetTick>
 800369a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800369c:	e008      	b.n	80036b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800369e:	f7fd ff85 	bl	80015ac <HAL_GetTick>
 80036a2:	4602      	mov	r2, r0
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	1ad3      	subs	r3, r2, r3
 80036a8:	2b02      	cmp	r3, #2
 80036aa:	d901      	bls.n	80036b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80036ac:	2303      	movs	r3, #3
 80036ae:	e1a5      	b.n	80039fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036b0:	4b46      	ldr	r3, [pc, #280]	; (80037cc <HAL_RCC_OscConfig+0x2ac>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 0302 	and.w	r3, r3, #2
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d0f0      	beq.n	800369e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036bc:	4b43      	ldr	r3, [pc, #268]	; (80037cc <HAL_RCC_OscConfig+0x2ac>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	691b      	ldr	r3, [r3, #16]
 80036c8:	00db      	lsls	r3, r3, #3
 80036ca:	4940      	ldr	r1, [pc, #256]	; (80037cc <HAL_RCC_OscConfig+0x2ac>)
 80036cc:	4313      	orrs	r3, r2
 80036ce:	600b      	str	r3, [r1, #0]
 80036d0:	e015      	b.n	80036fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036d2:	4b3f      	ldr	r3, [pc, #252]	; (80037d0 <HAL_RCC_OscConfig+0x2b0>)
 80036d4:	2200      	movs	r2, #0
 80036d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036d8:	f7fd ff68 	bl	80015ac <HAL_GetTick>
 80036dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036de:	e008      	b.n	80036f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036e0:	f7fd ff64 	bl	80015ac <HAL_GetTick>
 80036e4:	4602      	mov	r2, r0
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	1ad3      	subs	r3, r2, r3
 80036ea:	2b02      	cmp	r3, #2
 80036ec:	d901      	bls.n	80036f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80036ee:	2303      	movs	r3, #3
 80036f0:	e184      	b.n	80039fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036f2:	4b36      	ldr	r3, [pc, #216]	; (80037cc <HAL_RCC_OscConfig+0x2ac>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 0302 	and.w	r3, r3, #2
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d1f0      	bne.n	80036e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 0308 	and.w	r3, r3, #8
 8003706:	2b00      	cmp	r3, #0
 8003708:	d030      	beq.n	800376c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	695b      	ldr	r3, [r3, #20]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d016      	beq.n	8003740 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003712:	4b30      	ldr	r3, [pc, #192]	; (80037d4 <HAL_RCC_OscConfig+0x2b4>)
 8003714:	2201      	movs	r2, #1
 8003716:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003718:	f7fd ff48 	bl	80015ac <HAL_GetTick>
 800371c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800371e:	e008      	b.n	8003732 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003720:	f7fd ff44 	bl	80015ac <HAL_GetTick>
 8003724:	4602      	mov	r2, r0
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	1ad3      	subs	r3, r2, r3
 800372a:	2b02      	cmp	r3, #2
 800372c:	d901      	bls.n	8003732 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800372e:	2303      	movs	r3, #3
 8003730:	e164      	b.n	80039fc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003732:	4b26      	ldr	r3, [pc, #152]	; (80037cc <HAL_RCC_OscConfig+0x2ac>)
 8003734:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003736:	f003 0302 	and.w	r3, r3, #2
 800373a:	2b00      	cmp	r3, #0
 800373c:	d0f0      	beq.n	8003720 <HAL_RCC_OscConfig+0x200>
 800373e:	e015      	b.n	800376c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003740:	4b24      	ldr	r3, [pc, #144]	; (80037d4 <HAL_RCC_OscConfig+0x2b4>)
 8003742:	2200      	movs	r2, #0
 8003744:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003746:	f7fd ff31 	bl	80015ac <HAL_GetTick>
 800374a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800374c:	e008      	b.n	8003760 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800374e:	f7fd ff2d 	bl	80015ac <HAL_GetTick>
 8003752:	4602      	mov	r2, r0
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	1ad3      	subs	r3, r2, r3
 8003758:	2b02      	cmp	r3, #2
 800375a:	d901      	bls.n	8003760 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800375c:	2303      	movs	r3, #3
 800375e:	e14d      	b.n	80039fc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003760:	4b1a      	ldr	r3, [pc, #104]	; (80037cc <HAL_RCC_OscConfig+0x2ac>)
 8003762:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003764:	f003 0302 	and.w	r3, r3, #2
 8003768:	2b00      	cmp	r3, #0
 800376a:	d1f0      	bne.n	800374e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 0304 	and.w	r3, r3, #4
 8003774:	2b00      	cmp	r3, #0
 8003776:	f000 80a0 	beq.w	80038ba <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800377a:	2300      	movs	r3, #0
 800377c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800377e:	4b13      	ldr	r3, [pc, #76]	; (80037cc <HAL_RCC_OscConfig+0x2ac>)
 8003780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003782:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003786:	2b00      	cmp	r3, #0
 8003788:	d10f      	bne.n	80037aa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800378a:	2300      	movs	r3, #0
 800378c:	60bb      	str	r3, [r7, #8]
 800378e:	4b0f      	ldr	r3, [pc, #60]	; (80037cc <HAL_RCC_OscConfig+0x2ac>)
 8003790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003792:	4a0e      	ldr	r2, [pc, #56]	; (80037cc <HAL_RCC_OscConfig+0x2ac>)
 8003794:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003798:	6413      	str	r3, [r2, #64]	; 0x40
 800379a:	4b0c      	ldr	r3, [pc, #48]	; (80037cc <HAL_RCC_OscConfig+0x2ac>)
 800379c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037a2:	60bb      	str	r3, [r7, #8]
 80037a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037a6:	2301      	movs	r3, #1
 80037a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037aa:	4b0b      	ldr	r3, [pc, #44]	; (80037d8 <HAL_RCC_OscConfig+0x2b8>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d121      	bne.n	80037fa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037b6:	4b08      	ldr	r3, [pc, #32]	; (80037d8 <HAL_RCC_OscConfig+0x2b8>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a07      	ldr	r2, [pc, #28]	; (80037d8 <HAL_RCC_OscConfig+0x2b8>)
 80037bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037c2:	f7fd fef3 	bl	80015ac <HAL_GetTick>
 80037c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037c8:	e011      	b.n	80037ee <HAL_RCC_OscConfig+0x2ce>
 80037ca:	bf00      	nop
 80037cc:	40023800 	.word	0x40023800
 80037d0:	42470000 	.word	0x42470000
 80037d4:	42470e80 	.word	0x42470e80
 80037d8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037dc:	f7fd fee6 	bl	80015ac <HAL_GetTick>
 80037e0:	4602      	mov	r2, r0
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	1ad3      	subs	r3, r2, r3
 80037e6:	2b02      	cmp	r3, #2
 80037e8:	d901      	bls.n	80037ee <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80037ea:	2303      	movs	r3, #3
 80037ec:	e106      	b.n	80039fc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037ee:	4b85      	ldr	r3, [pc, #532]	; (8003a04 <HAL_RCC_OscConfig+0x4e4>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d0f0      	beq.n	80037dc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d106      	bne.n	8003810 <HAL_RCC_OscConfig+0x2f0>
 8003802:	4b81      	ldr	r3, [pc, #516]	; (8003a08 <HAL_RCC_OscConfig+0x4e8>)
 8003804:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003806:	4a80      	ldr	r2, [pc, #512]	; (8003a08 <HAL_RCC_OscConfig+0x4e8>)
 8003808:	f043 0301 	orr.w	r3, r3, #1
 800380c:	6713      	str	r3, [r2, #112]	; 0x70
 800380e:	e01c      	b.n	800384a <HAL_RCC_OscConfig+0x32a>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	2b05      	cmp	r3, #5
 8003816:	d10c      	bne.n	8003832 <HAL_RCC_OscConfig+0x312>
 8003818:	4b7b      	ldr	r3, [pc, #492]	; (8003a08 <HAL_RCC_OscConfig+0x4e8>)
 800381a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800381c:	4a7a      	ldr	r2, [pc, #488]	; (8003a08 <HAL_RCC_OscConfig+0x4e8>)
 800381e:	f043 0304 	orr.w	r3, r3, #4
 8003822:	6713      	str	r3, [r2, #112]	; 0x70
 8003824:	4b78      	ldr	r3, [pc, #480]	; (8003a08 <HAL_RCC_OscConfig+0x4e8>)
 8003826:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003828:	4a77      	ldr	r2, [pc, #476]	; (8003a08 <HAL_RCC_OscConfig+0x4e8>)
 800382a:	f043 0301 	orr.w	r3, r3, #1
 800382e:	6713      	str	r3, [r2, #112]	; 0x70
 8003830:	e00b      	b.n	800384a <HAL_RCC_OscConfig+0x32a>
 8003832:	4b75      	ldr	r3, [pc, #468]	; (8003a08 <HAL_RCC_OscConfig+0x4e8>)
 8003834:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003836:	4a74      	ldr	r2, [pc, #464]	; (8003a08 <HAL_RCC_OscConfig+0x4e8>)
 8003838:	f023 0301 	bic.w	r3, r3, #1
 800383c:	6713      	str	r3, [r2, #112]	; 0x70
 800383e:	4b72      	ldr	r3, [pc, #456]	; (8003a08 <HAL_RCC_OscConfig+0x4e8>)
 8003840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003842:	4a71      	ldr	r2, [pc, #452]	; (8003a08 <HAL_RCC_OscConfig+0x4e8>)
 8003844:	f023 0304 	bic.w	r3, r3, #4
 8003848:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d015      	beq.n	800387e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003852:	f7fd feab 	bl	80015ac <HAL_GetTick>
 8003856:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003858:	e00a      	b.n	8003870 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800385a:	f7fd fea7 	bl	80015ac <HAL_GetTick>
 800385e:	4602      	mov	r2, r0
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	1ad3      	subs	r3, r2, r3
 8003864:	f241 3288 	movw	r2, #5000	; 0x1388
 8003868:	4293      	cmp	r3, r2
 800386a:	d901      	bls.n	8003870 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800386c:	2303      	movs	r3, #3
 800386e:	e0c5      	b.n	80039fc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003870:	4b65      	ldr	r3, [pc, #404]	; (8003a08 <HAL_RCC_OscConfig+0x4e8>)
 8003872:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003874:	f003 0302 	and.w	r3, r3, #2
 8003878:	2b00      	cmp	r3, #0
 800387a:	d0ee      	beq.n	800385a <HAL_RCC_OscConfig+0x33a>
 800387c:	e014      	b.n	80038a8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800387e:	f7fd fe95 	bl	80015ac <HAL_GetTick>
 8003882:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003884:	e00a      	b.n	800389c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003886:	f7fd fe91 	bl	80015ac <HAL_GetTick>
 800388a:	4602      	mov	r2, r0
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	1ad3      	subs	r3, r2, r3
 8003890:	f241 3288 	movw	r2, #5000	; 0x1388
 8003894:	4293      	cmp	r3, r2
 8003896:	d901      	bls.n	800389c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003898:	2303      	movs	r3, #3
 800389a:	e0af      	b.n	80039fc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800389c:	4b5a      	ldr	r3, [pc, #360]	; (8003a08 <HAL_RCC_OscConfig+0x4e8>)
 800389e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038a0:	f003 0302 	and.w	r3, r3, #2
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d1ee      	bne.n	8003886 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038a8:	7dfb      	ldrb	r3, [r7, #23]
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d105      	bne.n	80038ba <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038ae:	4b56      	ldr	r3, [pc, #344]	; (8003a08 <HAL_RCC_OscConfig+0x4e8>)
 80038b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b2:	4a55      	ldr	r2, [pc, #340]	; (8003a08 <HAL_RCC_OscConfig+0x4e8>)
 80038b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038b8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	699b      	ldr	r3, [r3, #24]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	f000 809b 	beq.w	80039fa <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80038c4:	4b50      	ldr	r3, [pc, #320]	; (8003a08 <HAL_RCC_OscConfig+0x4e8>)
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	f003 030c 	and.w	r3, r3, #12
 80038cc:	2b08      	cmp	r3, #8
 80038ce:	d05c      	beq.n	800398a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	699b      	ldr	r3, [r3, #24]
 80038d4:	2b02      	cmp	r3, #2
 80038d6:	d141      	bne.n	800395c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038d8:	4b4c      	ldr	r3, [pc, #304]	; (8003a0c <HAL_RCC_OscConfig+0x4ec>)
 80038da:	2200      	movs	r2, #0
 80038dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038de:	f7fd fe65 	bl	80015ac <HAL_GetTick>
 80038e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038e4:	e008      	b.n	80038f8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038e6:	f7fd fe61 	bl	80015ac <HAL_GetTick>
 80038ea:	4602      	mov	r2, r0
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	1ad3      	subs	r3, r2, r3
 80038f0:	2b02      	cmp	r3, #2
 80038f2:	d901      	bls.n	80038f8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80038f4:	2303      	movs	r3, #3
 80038f6:	e081      	b.n	80039fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038f8:	4b43      	ldr	r3, [pc, #268]	; (8003a08 <HAL_RCC_OscConfig+0x4e8>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003900:	2b00      	cmp	r3, #0
 8003902:	d1f0      	bne.n	80038e6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	69da      	ldr	r2, [r3, #28]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6a1b      	ldr	r3, [r3, #32]
 800390c:	431a      	orrs	r2, r3
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003912:	019b      	lsls	r3, r3, #6
 8003914:	431a      	orrs	r2, r3
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800391a:	085b      	lsrs	r3, r3, #1
 800391c:	3b01      	subs	r3, #1
 800391e:	041b      	lsls	r3, r3, #16
 8003920:	431a      	orrs	r2, r3
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003926:	061b      	lsls	r3, r3, #24
 8003928:	4937      	ldr	r1, [pc, #220]	; (8003a08 <HAL_RCC_OscConfig+0x4e8>)
 800392a:	4313      	orrs	r3, r2
 800392c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800392e:	4b37      	ldr	r3, [pc, #220]	; (8003a0c <HAL_RCC_OscConfig+0x4ec>)
 8003930:	2201      	movs	r2, #1
 8003932:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003934:	f7fd fe3a 	bl	80015ac <HAL_GetTick>
 8003938:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800393a:	e008      	b.n	800394e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800393c:	f7fd fe36 	bl	80015ac <HAL_GetTick>
 8003940:	4602      	mov	r2, r0
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	1ad3      	subs	r3, r2, r3
 8003946:	2b02      	cmp	r3, #2
 8003948:	d901      	bls.n	800394e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800394a:	2303      	movs	r3, #3
 800394c:	e056      	b.n	80039fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800394e:	4b2e      	ldr	r3, [pc, #184]	; (8003a08 <HAL_RCC_OscConfig+0x4e8>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003956:	2b00      	cmp	r3, #0
 8003958:	d0f0      	beq.n	800393c <HAL_RCC_OscConfig+0x41c>
 800395a:	e04e      	b.n	80039fa <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800395c:	4b2b      	ldr	r3, [pc, #172]	; (8003a0c <HAL_RCC_OscConfig+0x4ec>)
 800395e:	2200      	movs	r2, #0
 8003960:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003962:	f7fd fe23 	bl	80015ac <HAL_GetTick>
 8003966:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003968:	e008      	b.n	800397c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800396a:	f7fd fe1f 	bl	80015ac <HAL_GetTick>
 800396e:	4602      	mov	r2, r0
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	1ad3      	subs	r3, r2, r3
 8003974:	2b02      	cmp	r3, #2
 8003976:	d901      	bls.n	800397c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003978:	2303      	movs	r3, #3
 800397a:	e03f      	b.n	80039fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800397c:	4b22      	ldr	r3, [pc, #136]	; (8003a08 <HAL_RCC_OscConfig+0x4e8>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003984:	2b00      	cmp	r3, #0
 8003986:	d1f0      	bne.n	800396a <HAL_RCC_OscConfig+0x44a>
 8003988:	e037      	b.n	80039fa <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	699b      	ldr	r3, [r3, #24]
 800398e:	2b01      	cmp	r3, #1
 8003990:	d101      	bne.n	8003996 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e032      	b.n	80039fc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003996:	4b1c      	ldr	r3, [pc, #112]	; (8003a08 <HAL_RCC_OscConfig+0x4e8>)
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	699b      	ldr	r3, [r3, #24]
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d028      	beq.n	80039f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039ae:	429a      	cmp	r2, r3
 80039b0:	d121      	bne.n	80039f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039bc:	429a      	cmp	r2, r3
 80039be:	d11a      	bne.n	80039f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039c0:	68fa      	ldr	r2, [r7, #12]
 80039c2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80039c6:	4013      	ands	r3, r2
 80039c8:	687a      	ldr	r2, [r7, #4]
 80039ca:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80039cc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d111      	bne.n	80039f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039dc:	085b      	lsrs	r3, r3, #1
 80039de:	3b01      	subs	r3, #1
 80039e0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d107      	bne.n	80039f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039f2:	429a      	cmp	r2, r3
 80039f4:	d001      	beq.n	80039fa <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e000      	b.n	80039fc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80039fa:	2300      	movs	r3, #0
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	3718      	adds	r7, #24
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}
 8003a04:	40007000 	.word	0x40007000
 8003a08:	40023800 	.word	0x40023800
 8003a0c:	42470060 	.word	0x42470060

08003a10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b084      	sub	sp, #16
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
 8003a18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d101      	bne.n	8003a24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	e0cc      	b.n	8003bbe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a24:	4b68      	ldr	r3, [pc, #416]	; (8003bc8 <HAL_RCC_ClockConfig+0x1b8>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 0307 	and.w	r3, r3, #7
 8003a2c:	683a      	ldr	r2, [r7, #0]
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	d90c      	bls.n	8003a4c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a32:	4b65      	ldr	r3, [pc, #404]	; (8003bc8 <HAL_RCC_ClockConfig+0x1b8>)
 8003a34:	683a      	ldr	r2, [r7, #0]
 8003a36:	b2d2      	uxtb	r2, r2
 8003a38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a3a:	4b63      	ldr	r3, [pc, #396]	; (8003bc8 <HAL_RCC_ClockConfig+0x1b8>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 0307 	and.w	r3, r3, #7
 8003a42:	683a      	ldr	r2, [r7, #0]
 8003a44:	429a      	cmp	r2, r3
 8003a46:	d001      	beq.n	8003a4c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e0b8      	b.n	8003bbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 0302 	and.w	r3, r3, #2
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d020      	beq.n	8003a9a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 0304 	and.w	r3, r3, #4
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d005      	beq.n	8003a70 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a64:	4b59      	ldr	r3, [pc, #356]	; (8003bcc <HAL_RCC_ClockConfig+0x1bc>)
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	4a58      	ldr	r2, [pc, #352]	; (8003bcc <HAL_RCC_ClockConfig+0x1bc>)
 8003a6a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a6e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f003 0308 	and.w	r3, r3, #8
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d005      	beq.n	8003a88 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a7c:	4b53      	ldr	r3, [pc, #332]	; (8003bcc <HAL_RCC_ClockConfig+0x1bc>)
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	4a52      	ldr	r2, [pc, #328]	; (8003bcc <HAL_RCC_ClockConfig+0x1bc>)
 8003a82:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a86:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a88:	4b50      	ldr	r3, [pc, #320]	; (8003bcc <HAL_RCC_ClockConfig+0x1bc>)
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	494d      	ldr	r1, [pc, #308]	; (8003bcc <HAL_RCC_ClockConfig+0x1bc>)
 8003a96:	4313      	orrs	r3, r2
 8003a98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 0301 	and.w	r3, r3, #1
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d044      	beq.n	8003b30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d107      	bne.n	8003abe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aae:	4b47      	ldr	r3, [pc, #284]	; (8003bcc <HAL_RCC_ClockConfig+0x1bc>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d119      	bne.n	8003aee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e07f      	b.n	8003bbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	2b02      	cmp	r3, #2
 8003ac4:	d003      	beq.n	8003ace <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003aca:	2b03      	cmp	r3, #3
 8003acc:	d107      	bne.n	8003ade <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ace:	4b3f      	ldr	r3, [pc, #252]	; (8003bcc <HAL_RCC_ClockConfig+0x1bc>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d109      	bne.n	8003aee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e06f      	b.n	8003bbe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ade:	4b3b      	ldr	r3, [pc, #236]	; (8003bcc <HAL_RCC_ClockConfig+0x1bc>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 0302 	and.w	r3, r3, #2
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d101      	bne.n	8003aee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e067      	b.n	8003bbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003aee:	4b37      	ldr	r3, [pc, #220]	; (8003bcc <HAL_RCC_ClockConfig+0x1bc>)
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	f023 0203 	bic.w	r2, r3, #3
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	4934      	ldr	r1, [pc, #208]	; (8003bcc <HAL_RCC_ClockConfig+0x1bc>)
 8003afc:	4313      	orrs	r3, r2
 8003afe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b00:	f7fd fd54 	bl	80015ac <HAL_GetTick>
 8003b04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b06:	e00a      	b.n	8003b1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b08:	f7fd fd50 	bl	80015ac <HAL_GetTick>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	1ad3      	subs	r3, r2, r3
 8003b12:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d901      	bls.n	8003b1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e04f      	b.n	8003bbe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b1e:	4b2b      	ldr	r3, [pc, #172]	; (8003bcc <HAL_RCC_ClockConfig+0x1bc>)
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	f003 020c 	and.w	r2, r3, #12
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d1eb      	bne.n	8003b08 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b30:	4b25      	ldr	r3, [pc, #148]	; (8003bc8 <HAL_RCC_ClockConfig+0x1b8>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 0307 	and.w	r3, r3, #7
 8003b38:	683a      	ldr	r2, [r7, #0]
 8003b3a:	429a      	cmp	r2, r3
 8003b3c:	d20c      	bcs.n	8003b58 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b3e:	4b22      	ldr	r3, [pc, #136]	; (8003bc8 <HAL_RCC_ClockConfig+0x1b8>)
 8003b40:	683a      	ldr	r2, [r7, #0]
 8003b42:	b2d2      	uxtb	r2, r2
 8003b44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b46:	4b20      	ldr	r3, [pc, #128]	; (8003bc8 <HAL_RCC_ClockConfig+0x1b8>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 0307 	and.w	r3, r3, #7
 8003b4e:	683a      	ldr	r2, [r7, #0]
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d001      	beq.n	8003b58 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	e032      	b.n	8003bbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 0304 	and.w	r3, r3, #4
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d008      	beq.n	8003b76 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b64:	4b19      	ldr	r3, [pc, #100]	; (8003bcc <HAL_RCC_ClockConfig+0x1bc>)
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	4916      	ldr	r1, [pc, #88]	; (8003bcc <HAL_RCC_ClockConfig+0x1bc>)
 8003b72:	4313      	orrs	r3, r2
 8003b74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 0308 	and.w	r3, r3, #8
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d009      	beq.n	8003b96 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b82:	4b12      	ldr	r3, [pc, #72]	; (8003bcc <HAL_RCC_ClockConfig+0x1bc>)
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	691b      	ldr	r3, [r3, #16]
 8003b8e:	00db      	lsls	r3, r3, #3
 8003b90:	490e      	ldr	r1, [pc, #56]	; (8003bcc <HAL_RCC_ClockConfig+0x1bc>)
 8003b92:	4313      	orrs	r3, r2
 8003b94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b96:	f000 f821 	bl	8003bdc <HAL_RCC_GetSysClockFreq>
 8003b9a:	4602      	mov	r2, r0
 8003b9c:	4b0b      	ldr	r3, [pc, #44]	; (8003bcc <HAL_RCC_ClockConfig+0x1bc>)
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	091b      	lsrs	r3, r3, #4
 8003ba2:	f003 030f 	and.w	r3, r3, #15
 8003ba6:	490a      	ldr	r1, [pc, #40]	; (8003bd0 <HAL_RCC_ClockConfig+0x1c0>)
 8003ba8:	5ccb      	ldrb	r3, [r1, r3]
 8003baa:	fa22 f303 	lsr.w	r3, r2, r3
 8003bae:	4a09      	ldr	r2, [pc, #36]	; (8003bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8003bb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003bb2:	4b09      	ldr	r3, [pc, #36]	; (8003bd8 <HAL_RCC_ClockConfig+0x1c8>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f7fd fbb6 	bl	8001328 <HAL_InitTick>

  return HAL_OK;
 8003bbc:	2300      	movs	r3, #0
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3710      	adds	r7, #16
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	bf00      	nop
 8003bc8:	40023c00 	.word	0x40023c00
 8003bcc:	40023800 	.word	0x40023800
 8003bd0:	08004f94 	.word	0x08004f94
 8003bd4:	20000004 	.word	0x20000004
 8003bd8:	20000008 	.word	0x20000008

08003bdc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bdc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003be0:	b084      	sub	sp, #16
 8003be2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003be4:	2300      	movs	r3, #0
 8003be6:	607b      	str	r3, [r7, #4]
 8003be8:	2300      	movs	r3, #0
 8003bea:	60fb      	str	r3, [r7, #12]
 8003bec:	2300      	movs	r3, #0
 8003bee:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003bf4:	4b67      	ldr	r3, [pc, #412]	; (8003d94 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	f003 030c 	and.w	r3, r3, #12
 8003bfc:	2b08      	cmp	r3, #8
 8003bfe:	d00d      	beq.n	8003c1c <HAL_RCC_GetSysClockFreq+0x40>
 8003c00:	2b08      	cmp	r3, #8
 8003c02:	f200 80bd 	bhi.w	8003d80 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d002      	beq.n	8003c10 <HAL_RCC_GetSysClockFreq+0x34>
 8003c0a:	2b04      	cmp	r3, #4
 8003c0c:	d003      	beq.n	8003c16 <HAL_RCC_GetSysClockFreq+0x3a>
 8003c0e:	e0b7      	b.n	8003d80 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c10:	4b61      	ldr	r3, [pc, #388]	; (8003d98 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003c12:	60bb      	str	r3, [r7, #8]
       break;
 8003c14:	e0b7      	b.n	8003d86 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c16:	4b61      	ldr	r3, [pc, #388]	; (8003d9c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003c18:	60bb      	str	r3, [r7, #8]
      break;
 8003c1a:	e0b4      	b.n	8003d86 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c1c:	4b5d      	ldr	r3, [pc, #372]	; (8003d94 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c24:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c26:	4b5b      	ldr	r3, [pc, #364]	; (8003d94 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d04d      	beq.n	8003cce <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c32:	4b58      	ldr	r3, [pc, #352]	; (8003d94 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	099b      	lsrs	r3, r3, #6
 8003c38:	461a      	mov	r2, r3
 8003c3a:	f04f 0300 	mov.w	r3, #0
 8003c3e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003c42:	f04f 0100 	mov.w	r1, #0
 8003c46:	ea02 0800 	and.w	r8, r2, r0
 8003c4a:	ea03 0901 	and.w	r9, r3, r1
 8003c4e:	4640      	mov	r0, r8
 8003c50:	4649      	mov	r1, r9
 8003c52:	f04f 0200 	mov.w	r2, #0
 8003c56:	f04f 0300 	mov.w	r3, #0
 8003c5a:	014b      	lsls	r3, r1, #5
 8003c5c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003c60:	0142      	lsls	r2, r0, #5
 8003c62:	4610      	mov	r0, r2
 8003c64:	4619      	mov	r1, r3
 8003c66:	ebb0 0008 	subs.w	r0, r0, r8
 8003c6a:	eb61 0109 	sbc.w	r1, r1, r9
 8003c6e:	f04f 0200 	mov.w	r2, #0
 8003c72:	f04f 0300 	mov.w	r3, #0
 8003c76:	018b      	lsls	r3, r1, #6
 8003c78:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003c7c:	0182      	lsls	r2, r0, #6
 8003c7e:	1a12      	subs	r2, r2, r0
 8003c80:	eb63 0301 	sbc.w	r3, r3, r1
 8003c84:	f04f 0000 	mov.w	r0, #0
 8003c88:	f04f 0100 	mov.w	r1, #0
 8003c8c:	00d9      	lsls	r1, r3, #3
 8003c8e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003c92:	00d0      	lsls	r0, r2, #3
 8003c94:	4602      	mov	r2, r0
 8003c96:	460b      	mov	r3, r1
 8003c98:	eb12 0208 	adds.w	r2, r2, r8
 8003c9c:	eb43 0309 	adc.w	r3, r3, r9
 8003ca0:	f04f 0000 	mov.w	r0, #0
 8003ca4:	f04f 0100 	mov.w	r1, #0
 8003ca8:	0259      	lsls	r1, r3, #9
 8003caa:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003cae:	0250      	lsls	r0, r2, #9
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	460b      	mov	r3, r1
 8003cb4:	4610      	mov	r0, r2
 8003cb6:	4619      	mov	r1, r3
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	461a      	mov	r2, r3
 8003cbc:	f04f 0300 	mov.w	r3, #0
 8003cc0:	f7fc fa82 	bl	80001c8 <__aeabi_uldivmod>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	460b      	mov	r3, r1
 8003cc8:	4613      	mov	r3, r2
 8003cca:	60fb      	str	r3, [r7, #12]
 8003ccc:	e04a      	b.n	8003d64 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cce:	4b31      	ldr	r3, [pc, #196]	; (8003d94 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	099b      	lsrs	r3, r3, #6
 8003cd4:	461a      	mov	r2, r3
 8003cd6:	f04f 0300 	mov.w	r3, #0
 8003cda:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003cde:	f04f 0100 	mov.w	r1, #0
 8003ce2:	ea02 0400 	and.w	r4, r2, r0
 8003ce6:	ea03 0501 	and.w	r5, r3, r1
 8003cea:	4620      	mov	r0, r4
 8003cec:	4629      	mov	r1, r5
 8003cee:	f04f 0200 	mov.w	r2, #0
 8003cf2:	f04f 0300 	mov.w	r3, #0
 8003cf6:	014b      	lsls	r3, r1, #5
 8003cf8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003cfc:	0142      	lsls	r2, r0, #5
 8003cfe:	4610      	mov	r0, r2
 8003d00:	4619      	mov	r1, r3
 8003d02:	1b00      	subs	r0, r0, r4
 8003d04:	eb61 0105 	sbc.w	r1, r1, r5
 8003d08:	f04f 0200 	mov.w	r2, #0
 8003d0c:	f04f 0300 	mov.w	r3, #0
 8003d10:	018b      	lsls	r3, r1, #6
 8003d12:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003d16:	0182      	lsls	r2, r0, #6
 8003d18:	1a12      	subs	r2, r2, r0
 8003d1a:	eb63 0301 	sbc.w	r3, r3, r1
 8003d1e:	f04f 0000 	mov.w	r0, #0
 8003d22:	f04f 0100 	mov.w	r1, #0
 8003d26:	00d9      	lsls	r1, r3, #3
 8003d28:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003d2c:	00d0      	lsls	r0, r2, #3
 8003d2e:	4602      	mov	r2, r0
 8003d30:	460b      	mov	r3, r1
 8003d32:	1912      	adds	r2, r2, r4
 8003d34:	eb45 0303 	adc.w	r3, r5, r3
 8003d38:	f04f 0000 	mov.w	r0, #0
 8003d3c:	f04f 0100 	mov.w	r1, #0
 8003d40:	0299      	lsls	r1, r3, #10
 8003d42:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003d46:	0290      	lsls	r0, r2, #10
 8003d48:	4602      	mov	r2, r0
 8003d4a:	460b      	mov	r3, r1
 8003d4c:	4610      	mov	r0, r2
 8003d4e:	4619      	mov	r1, r3
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	461a      	mov	r2, r3
 8003d54:	f04f 0300 	mov.w	r3, #0
 8003d58:	f7fc fa36 	bl	80001c8 <__aeabi_uldivmod>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	460b      	mov	r3, r1
 8003d60:	4613      	mov	r3, r2
 8003d62:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003d64:	4b0b      	ldr	r3, [pc, #44]	; (8003d94 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	0c1b      	lsrs	r3, r3, #16
 8003d6a:	f003 0303 	and.w	r3, r3, #3
 8003d6e:	3301      	adds	r3, #1
 8003d70:	005b      	lsls	r3, r3, #1
 8003d72:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003d74:	68fa      	ldr	r2, [r7, #12]
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d7c:	60bb      	str	r3, [r7, #8]
      break;
 8003d7e:	e002      	b.n	8003d86 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d80:	4b05      	ldr	r3, [pc, #20]	; (8003d98 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003d82:	60bb      	str	r3, [r7, #8]
      break;
 8003d84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d86:	68bb      	ldr	r3, [r7, #8]
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3710      	adds	r7, #16
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003d92:	bf00      	nop
 8003d94:	40023800 	.word	0x40023800
 8003d98:	00f42400 	.word	0x00f42400
 8003d9c:	007a1200 	.word	0x007a1200

08003da0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003da0:	b480      	push	{r7}
 8003da2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003da4:	4b03      	ldr	r3, [pc, #12]	; (8003db4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003da6:	681b      	ldr	r3, [r3, #0]
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	46bd      	mov	sp, r7
 8003dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db0:	4770      	bx	lr
 8003db2:	bf00      	nop
 8003db4:	20000004 	.word	0x20000004

08003db8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003dbc:	f7ff fff0 	bl	8003da0 <HAL_RCC_GetHCLKFreq>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	4b05      	ldr	r3, [pc, #20]	; (8003dd8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	0a9b      	lsrs	r3, r3, #10
 8003dc8:	f003 0307 	and.w	r3, r3, #7
 8003dcc:	4903      	ldr	r1, [pc, #12]	; (8003ddc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003dce:	5ccb      	ldrb	r3, [r1, r3]
 8003dd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	bd80      	pop	{r7, pc}
 8003dd8:	40023800 	.word	0x40023800
 8003ddc:	08004fa4 	.word	0x08004fa4

08003de0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003de4:	f7ff ffdc 	bl	8003da0 <HAL_RCC_GetHCLKFreq>
 8003de8:	4602      	mov	r2, r0
 8003dea:	4b05      	ldr	r3, [pc, #20]	; (8003e00 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	0b5b      	lsrs	r3, r3, #13
 8003df0:	f003 0307 	and.w	r3, r3, #7
 8003df4:	4903      	ldr	r1, [pc, #12]	; (8003e04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003df6:	5ccb      	ldrb	r3, [r1, r3]
 8003df8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	bd80      	pop	{r7, pc}
 8003e00:	40023800 	.word	0x40023800
 8003e04:	08004fa4 	.word	0x08004fa4

08003e08 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b083      	sub	sp, #12
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
 8003e10:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	220f      	movs	r2, #15
 8003e16:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003e18:	4b12      	ldr	r3, [pc, #72]	; (8003e64 <HAL_RCC_GetClockConfig+0x5c>)
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	f003 0203 	and.w	r2, r3, #3
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003e24:	4b0f      	ldr	r3, [pc, #60]	; (8003e64 <HAL_RCC_GetClockConfig+0x5c>)
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003e30:	4b0c      	ldr	r3, [pc, #48]	; (8003e64 <HAL_RCC_GetClockConfig+0x5c>)
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003e3c:	4b09      	ldr	r3, [pc, #36]	; (8003e64 <HAL_RCC_GetClockConfig+0x5c>)
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	08db      	lsrs	r3, r3, #3
 8003e42:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003e4a:	4b07      	ldr	r3, [pc, #28]	; (8003e68 <HAL_RCC_GetClockConfig+0x60>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f003 0207 	and.w	r2, r3, #7
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	601a      	str	r2, [r3, #0]
}
 8003e56:	bf00      	nop
 8003e58:	370c      	adds	r7, #12
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e60:	4770      	bx	lr
 8003e62:	bf00      	nop
 8003e64:	40023800 	.word	0x40023800
 8003e68:	40023c00 	.word	0x40023c00

08003e6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b082      	sub	sp, #8
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d101      	bne.n	8003e7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e041      	b.n	8003f02 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e84:	b2db      	uxtb	r3, r3
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d106      	bne.n	8003e98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f7fd f9ea 	bl	800126c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2202      	movs	r2, #2
 8003e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	3304      	adds	r3, #4
 8003ea8:	4619      	mov	r1, r3
 8003eaa:	4610      	mov	r0, r2
 8003eac:	f000 fc7a 	bl	80047a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2201      	movs	r2, #1
 8003edc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2201      	movs	r2, #1
 8003eec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2201      	movs	r2, #1
 8003efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f00:	2300      	movs	r3, #0
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3708      	adds	r7, #8
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}
	...

08003f0c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b085      	sub	sp, #20
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f1a:	b2db      	uxtb	r3, r3
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d001      	beq.n	8003f24 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	e04e      	b.n	8003fc2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2202      	movs	r2, #2
 8003f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	68da      	ldr	r2, [r3, #12]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f042 0201 	orr.w	r2, r2, #1
 8003f3a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a23      	ldr	r2, [pc, #140]	; (8003fd0 <HAL_TIM_Base_Start_IT+0xc4>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d022      	beq.n	8003f8c <HAL_TIM_Base_Start_IT+0x80>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f4e:	d01d      	beq.n	8003f8c <HAL_TIM_Base_Start_IT+0x80>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a1f      	ldr	r2, [pc, #124]	; (8003fd4 <HAL_TIM_Base_Start_IT+0xc8>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d018      	beq.n	8003f8c <HAL_TIM_Base_Start_IT+0x80>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a1e      	ldr	r2, [pc, #120]	; (8003fd8 <HAL_TIM_Base_Start_IT+0xcc>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d013      	beq.n	8003f8c <HAL_TIM_Base_Start_IT+0x80>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a1c      	ldr	r2, [pc, #112]	; (8003fdc <HAL_TIM_Base_Start_IT+0xd0>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d00e      	beq.n	8003f8c <HAL_TIM_Base_Start_IT+0x80>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a1b      	ldr	r2, [pc, #108]	; (8003fe0 <HAL_TIM_Base_Start_IT+0xd4>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d009      	beq.n	8003f8c <HAL_TIM_Base_Start_IT+0x80>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a19      	ldr	r2, [pc, #100]	; (8003fe4 <HAL_TIM_Base_Start_IT+0xd8>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d004      	beq.n	8003f8c <HAL_TIM_Base_Start_IT+0x80>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a18      	ldr	r2, [pc, #96]	; (8003fe8 <HAL_TIM_Base_Start_IT+0xdc>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d111      	bne.n	8003fb0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	f003 0307 	and.w	r3, r3, #7
 8003f96:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2b06      	cmp	r3, #6
 8003f9c:	d010      	beq.n	8003fc0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f042 0201 	orr.w	r2, r2, #1
 8003fac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fae:	e007      	b.n	8003fc0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f042 0201 	orr.w	r2, r2, #1
 8003fbe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003fc0:	2300      	movs	r3, #0
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3714      	adds	r7, #20
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fcc:	4770      	bx	lr
 8003fce:	bf00      	nop
 8003fd0:	40010000 	.word	0x40010000
 8003fd4:	40000400 	.word	0x40000400
 8003fd8:	40000800 	.word	0x40000800
 8003fdc:	40000c00 	.word	0x40000c00
 8003fe0:	40010400 	.word	0x40010400
 8003fe4:	40014000 	.word	0x40014000
 8003fe8:	40001800 	.word	0x40001800

08003fec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b082      	sub	sp, #8
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d101      	bne.n	8003ffe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e041      	b.n	8004082 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004004:	b2db      	uxtb	r3, r3
 8004006:	2b00      	cmp	r3, #0
 8004008:	d106      	bne.n	8004018 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2200      	movs	r2, #0
 800400e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f000 f839 	bl	800408a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2202      	movs	r2, #2
 800401c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	3304      	adds	r3, #4
 8004028:	4619      	mov	r1, r3
 800402a:	4610      	mov	r0, r2
 800402c:	f000 fbba 	bl	80047a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2201      	movs	r2, #1
 8004034:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2201      	movs	r2, #1
 800403c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2201      	movs	r2, #1
 8004044:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2201      	movs	r2, #1
 800404c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2201      	movs	r2, #1
 8004054:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2201      	movs	r2, #1
 800405c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2201      	movs	r2, #1
 8004064:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2201      	movs	r2, #1
 800406c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2201      	movs	r2, #1
 8004074:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2201      	movs	r2, #1
 800407c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004080:	2300      	movs	r3, #0
}
 8004082:	4618      	mov	r0, r3
 8004084:	3708      	adds	r7, #8
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}

0800408a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800408a:	b480      	push	{r7}
 800408c:	b083      	sub	sp, #12
 800408e:	af00      	add	r7, sp, #0
 8004090:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004092:	bf00      	nop
 8004094:	370c      	adds	r7, #12
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr
	...

080040a0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b084      	sub	sp, #16
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
 80040a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d109      	bne.n	80040c4 <HAL_TIM_PWM_Start+0x24>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	bf14      	ite	ne
 80040bc:	2301      	movne	r3, #1
 80040be:	2300      	moveq	r3, #0
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	e022      	b.n	800410a <HAL_TIM_PWM_Start+0x6a>
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	2b04      	cmp	r3, #4
 80040c8:	d109      	bne.n	80040de <HAL_TIM_PWM_Start+0x3e>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80040d0:	b2db      	uxtb	r3, r3
 80040d2:	2b01      	cmp	r3, #1
 80040d4:	bf14      	ite	ne
 80040d6:	2301      	movne	r3, #1
 80040d8:	2300      	moveq	r3, #0
 80040da:	b2db      	uxtb	r3, r3
 80040dc:	e015      	b.n	800410a <HAL_TIM_PWM_Start+0x6a>
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	2b08      	cmp	r3, #8
 80040e2:	d109      	bne.n	80040f8 <HAL_TIM_PWM_Start+0x58>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80040ea:	b2db      	uxtb	r3, r3
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	bf14      	ite	ne
 80040f0:	2301      	movne	r3, #1
 80040f2:	2300      	moveq	r3, #0
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	e008      	b.n	800410a <HAL_TIM_PWM_Start+0x6a>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040fe:	b2db      	uxtb	r3, r3
 8004100:	2b01      	cmp	r3, #1
 8004102:	bf14      	ite	ne
 8004104:	2301      	movne	r3, #1
 8004106:	2300      	moveq	r3, #0
 8004108:	b2db      	uxtb	r3, r3
 800410a:	2b00      	cmp	r3, #0
 800410c:	d001      	beq.n	8004112 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	e07c      	b.n	800420c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d104      	bne.n	8004122 <HAL_TIM_PWM_Start+0x82>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2202      	movs	r2, #2
 800411c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004120:	e013      	b.n	800414a <HAL_TIM_PWM_Start+0xaa>
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	2b04      	cmp	r3, #4
 8004126:	d104      	bne.n	8004132 <HAL_TIM_PWM_Start+0x92>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2202      	movs	r2, #2
 800412c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004130:	e00b      	b.n	800414a <HAL_TIM_PWM_Start+0xaa>
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	2b08      	cmp	r3, #8
 8004136:	d104      	bne.n	8004142 <HAL_TIM_PWM_Start+0xa2>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2202      	movs	r2, #2
 800413c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004140:	e003      	b.n	800414a <HAL_TIM_PWM_Start+0xaa>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2202      	movs	r2, #2
 8004146:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	2201      	movs	r2, #1
 8004150:	6839      	ldr	r1, [r7, #0]
 8004152:	4618      	mov	r0, r3
 8004154:	f000 fe10 	bl	8004d78 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a2d      	ldr	r2, [pc, #180]	; (8004214 <HAL_TIM_PWM_Start+0x174>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d004      	beq.n	800416c <HAL_TIM_PWM_Start+0xcc>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a2c      	ldr	r2, [pc, #176]	; (8004218 <HAL_TIM_PWM_Start+0x178>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d101      	bne.n	8004170 <HAL_TIM_PWM_Start+0xd0>
 800416c:	2301      	movs	r3, #1
 800416e:	e000      	b.n	8004172 <HAL_TIM_PWM_Start+0xd2>
 8004170:	2300      	movs	r3, #0
 8004172:	2b00      	cmp	r3, #0
 8004174:	d007      	beq.n	8004186 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004184:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a22      	ldr	r2, [pc, #136]	; (8004214 <HAL_TIM_PWM_Start+0x174>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d022      	beq.n	80041d6 <HAL_TIM_PWM_Start+0x136>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004198:	d01d      	beq.n	80041d6 <HAL_TIM_PWM_Start+0x136>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a1f      	ldr	r2, [pc, #124]	; (800421c <HAL_TIM_PWM_Start+0x17c>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d018      	beq.n	80041d6 <HAL_TIM_PWM_Start+0x136>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a1d      	ldr	r2, [pc, #116]	; (8004220 <HAL_TIM_PWM_Start+0x180>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d013      	beq.n	80041d6 <HAL_TIM_PWM_Start+0x136>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a1c      	ldr	r2, [pc, #112]	; (8004224 <HAL_TIM_PWM_Start+0x184>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d00e      	beq.n	80041d6 <HAL_TIM_PWM_Start+0x136>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a16      	ldr	r2, [pc, #88]	; (8004218 <HAL_TIM_PWM_Start+0x178>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d009      	beq.n	80041d6 <HAL_TIM_PWM_Start+0x136>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a18      	ldr	r2, [pc, #96]	; (8004228 <HAL_TIM_PWM_Start+0x188>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d004      	beq.n	80041d6 <HAL_TIM_PWM_Start+0x136>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a16      	ldr	r2, [pc, #88]	; (800422c <HAL_TIM_PWM_Start+0x18c>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d111      	bne.n	80041fa <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	f003 0307 	and.w	r3, r3, #7
 80041e0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2b06      	cmp	r3, #6
 80041e6:	d010      	beq.n	800420a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f042 0201 	orr.w	r2, r2, #1
 80041f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041f8:	e007      	b.n	800420a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f042 0201 	orr.w	r2, r2, #1
 8004208:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800420a:	2300      	movs	r3, #0
}
 800420c:	4618      	mov	r0, r3
 800420e:	3710      	adds	r7, #16
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}
 8004214:	40010000 	.word	0x40010000
 8004218:	40010400 	.word	0x40010400
 800421c:	40000400 	.word	0x40000400
 8004220:	40000800 	.word	0x40000800
 8004224:	40000c00 	.word	0x40000c00
 8004228:	40014000 	.word	0x40014000
 800422c:	40001800 	.word	0x40001800

08004230 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b082      	sub	sp, #8
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	691b      	ldr	r3, [r3, #16]
 800423e:	f003 0302 	and.w	r3, r3, #2
 8004242:	2b02      	cmp	r3, #2
 8004244:	d122      	bne.n	800428c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	68db      	ldr	r3, [r3, #12]
 800424c:	f003 0302 	and.w	r3, r3, #2
 8004250:	2b02      	cmp	r3, #2
 8004252:	d11b      	bne.n	800428c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f06f 0202 	mvn.w	r2, #2
 800425c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2201      	movs	r2, #1
 8004262:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	699b      	ldr	r3, [r3, #24]
 800426a:	f003 0303 	and.w	r3, r3, #3
 800426e:	2b00      	cmp	r3, #0
 8004270:	d003      	beq.n	800427a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f000 fa77 	bl	8004766 <HAL_TIM_IC_CaptureCallback>
 8004278:	e005      	b.n	8004286 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f000 fa69 	bl	8004752 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	f000 fa7a 	bl	800477a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2200      	movs	r2, #0
 800428a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	691b      	ldr	r3, [r3, #16]
 8004292:	f003 0304 	and.w	r3, r3, #4
 8004296:	2b04      	cmp	r3, #4
 8004298:	d122      	bne.n	80042e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	68db      	ldr	r3, [r3, #12]
 80042a0:	f003 0304 	and.w	r3, r3, #4
 80042a4:	2b04      	cmp	r3, #4
 80042a6:	d11b      	bne.n	80042e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f06f 0204 	mvn.w	r2, #4
 80042b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2202      	movs	r2, #2
 80042b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	699b      	ldr	r3, [r3, #24]
 80042be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d003      	beq.n	80042ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f000 fa4d 	bl	8004766 <HAL_TIM_IC_CaptureCallback>
 80042cc:	e005      	b.n	80042da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f000 fa3f 	bl	8004752 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	f000 fa50 	bl	800477a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2200      	movs	r2, #0
 80042de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	691b      	ldr	r3, [r3, #16]
 80042e6:	f003 0308 	and.w	r3, r3, #8
 80042ea:	2b08      	cmp	r3, #8
 80042ec:	d122      	bne.n	8004334 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	68db      	ldr	r3, [r3, #12]
 80042f4:	f003 0308 	and.w	r3, r3, #8
 80042f8:	2b08      	cmp	r3, #8
 80042fa:	d11b      	bne.n	8004334 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f06f 0208 	mvn.w	r2, #8
 8004304:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2204      	movs	r2, #4
 800430a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	69db      	ldr	r3, [r3, #28]
 8004312:	f003 0303 	and.w	r3, r3, #3
 8004316:	2b00      	cmp	r3, #0
 8004318:	d003      	beq.n	8004322 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f000 fa23 	bl	8004766 <HAL_TIM_IC_CaptureCallback>
 8004320:	e005      	b.n	800432e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f000 fa15 	bl	8004752 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	f000 fa26 	bl	800477a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2200      	movs	r2, #0
 8004332:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	691b      	ldr	r3, [r3, #16]
 800433a:	f003 0310 	and.w	r3, r3, #16
 800433e:	2b10      	cmp	r3, #16
 8004340:	d122      	bne.n	8004388 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	68db      	ldr	r3, [r3, #12]
 8004348:	f003 0310 	and.w	r3, r3, #16
 800434c:	2b10      	cmp	r3, #16
 800434e:	d11b      	bne.n	8004388 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f06f 0210 	mvn.w	r2, #16
 8004358:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2208      	movs	r2, #8
 800435e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	69db      	ldr	r3, [r3, #28]
 8004366:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800436a:	2b00      	cmp	r3, #0
 800436c:	d003      	beq.n	8004376 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f000 f9f9 	bl	8004766 <HAL_TIM_IC_CaptureCallback>
 8004374:	e005      	b.n	8004382 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f000 f9eb 	bl	8004752 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800437c:	6878      	ldr	r0, [r7, #4]
 800437e:	f000 f9fc 	bl	800477a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2200      	movs	r2, #0
 8004386:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	691b      	ldr	r3, [r3, #16]
 800438e:	f003 0301 	and.w	r3, r3, #1
 8004392:	2b01      	cmp	r3, #1
 8004394:	d10e      	bne.n	80043b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	f003 0301 	and.w	r3, r3, #1
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d107      	bne.n	80043b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f06f 0201 	mvn.w	r2, #1
 80043ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f7fc fdec 	bl	8000f8c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	691b      	ldr	r3, [r3, #16]
 80043ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043be:	2b80      	cmp	r3, #128	; 0x80
 80043c0:	d10e      	bne.n	80043e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	68db      	ldr	r3, [r3, #12]
 80043c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043cc:	2b80      	cmp	r3, #128	; 0x80
 80043ce:	d107      	bne.n	80043e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80043d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f000 fd78 	bl	8004ed0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	691b      	ldr	r3, [r3, #16]
 80043e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043ea:	2b40      	cmp	r3, #64	; 0x40
 80043ec:	d10e      	bne.n	800440c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	68db      	ldr	r3, [r3, #12]
 80043f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043f8:	2b40      	cmp	r3, #64	; 0x40
 80043fa:	d107      	bne.n	800440c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004404:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f000 f9c1 	bl	800478e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	691b      	ldr	r3, [r3, #16]
 8004412:	f003 0320 	and.w	r3, r3, #32
 8004416:	2b20      	cmp	r3, #32
 8004418:	d10e      	bne.n	8004438 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	68db      	ldr	r3, [r3, #12]
 8004420:	f003 0320 	and.w	r3, r3, #32
 8004424:	2b20      	cmp	r3, #32
 8004426:	d107      	bne.n	8004438 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f06f 0220 	mvn.w	r2, #32
 8004430:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f000 fd42 	bl	8004ebc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004438:	bf00      	nop
 800443a:	3708      	adds	r7, #8
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}

08004440 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b086      	sub	sp, #24
 8004444:	af00      	add	r7, sp, #0
 8004446:	60f8      	str	r0, [r7, #12]
 8004448:	60b9      	str	r1, [r7, #8]
 800444a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800444c:	2300      	movs	r3, #0
 800444e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004456:	2b01      	cmp	r3, #1
 8004458:	d101      	bne.n	800445e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800445a:	2302      	movs	r3, #2
 800445c:	e0ae      	b.n	80045bc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2201      	movs	r2, #1
 8004462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2b0c      	cmp	r3, #12
 800446a:	f200 809f 	bhi.w	80045ac <HAL_TIM_PWM_ConfigChannel+0x16c>
 800446e:	a201      	add	r2, pc, #4	; (adr r2, 8004474 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004474:	080044a9 	.word	0x080044a9
 8004478:	080045ad 	.word	0x080045ad
 800447c:	080045ad 	.word	0x080045ad
 8004480:	080045ad 	.word	0x080045ad
 8004484:	080044e9 	.word	0x080044e9
 8004488:	080045ad 	.word	0x080045ad
 800448c:	080045ad 	.word	0x080045ad
 8004490:	080045ad 	.word	0x080045ad
 8004494:	0800452b 	.word	0x0800452b
 8004498:	080045ad 	.word	0x080045ad
 800449c:	080045ad 	.word	0x080045ad
 80044a0:	080045ad 	.word	0x080045ad
 80044a4:	0800456b 	.word	0x0800456b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	68b9      	ldr	r1, [r7, #8]
 80044ae:	4618      	mov	r0, r3
 80044b0:	f000 fa18 	bl	80048e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	699a      	ldr	r2, [r3, #24]
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f042 0208 	orr.w	r2, r2, #8
 80044c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	699a      	ldr	r2, [r3, #24]
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f022 0204 	bic.w	r2, r2, #4
 80044d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	6999      	ldr	r1, [r3, #24]
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	691a      	ldr	r2, [r3, #16]
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	430a      	orrs	r2, r1
 80044e4:	619a      	str	r2, [r3, #24]
      break;
 80044e6:	e064      	b.n	80045b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	68b9      	ldr	r1, [r7, #8]
 80044ee:	4618      	mov	r0, r3
 80044f0:	f000 fa68 	bl	80049c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	699a      	ldr	r2, [r3, #24]
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004502:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	699a      	ldr	r2, [r3, #24]
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004512:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	6999      	ldr	r1, [r3, #24]
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	691b      	ldr	r3, [r3, #16]
 800451e:	021a      	lsls	r2, r3, #8
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	430a      	orrs	r2, r1
 8004526:	619a      	str	r2, [r3, #24]
      break;
 8004528:	e043      	b.n	80045b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	68b9      	ldr	r1, [r7, #8]
 8004530:	4618      	mov	r0, r3
 8004532:	f000 fabd 	bl	8004ab0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	69da      	ldr	r2, [r3, #28]
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f042 0208 	orr.w	r2, r2, #8
 8004544:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	69da      	ldr	r2, [r3, #28]
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f022 0204 	bic.w	r2, r2, #4
 8004554:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	69d9      	ldr	r1, [r3, #28]
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	691a      	ldr	r2, [r3, #16]
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	430a      	orrs	r2, r1
 8004566:	61da      	str	r2, [r3, #28]
      break;
 8004568:	e023      	b.n	80045b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	68b9      	ldr	r1, [r7, #8]
 8004570:	4618      	mov	r0, r3
 8004572:	f000 fb11 	bl	8004b98 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	69da      	ldr	r2, [r3, #28]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004584:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	69da      	ldr	r2, [r3, #28]
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004594:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	69d9      	ldr	r1, [r3, #28]
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	691b      	ldr	r3, [r3, #16]
 80045a0:	021a      	lsls	r2, r3, #8
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	430a      	orrs	r2, r1
 80045a8:	61da      	str	r2, [r3, #28]
      break;
 80045aa:	e002      	b.n	80045b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	75fb      	strb	r3, [r7, #23]
      break;
 80045b0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	2200      	movs	r2, #0
 80045b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80045ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80045bc:	4618      	mov	r0, r3
 80045be:	3718      	adds	r7, #24
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}

080045c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b084      	sub	sp, #16
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
 80045cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80045ce:	2300      	movs	r3, #0
 80045d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d101      	bne.n	80045e0 <HAL_TIM_ConfigClockSource+0x1c>
 80045dc:	2302      	movs	r3, #2
 80045de:	e0b4      	b.n	800474a <HAL_TIM_ConfigClockSource+0x186>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2201      	movs	r2, #1
 80045e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2202      	movs	r2, #2
 80045ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80045fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004606:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	68ba      	ldr	r2, [r7, #8]
 800460e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004618:	d03e      	beq.n	8004698 <HAL_TIM_ConfigClockSource+0xd4>
 800461a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800461e:	f200 8087 	bhi.w	8004730 <HAL_TIM_ConfigClockSource+0x16c>
 8004622:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004626:	f000 8086 	beq.w	8004736 <HAL_TIM_ConfigClockSource+0x172>
 800462a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800462e:	d87f      	bhi.n	8004730 <HAL_TIM_ConfigClockSource+0x16c>
 8004630:	2b70      	cmp	r3, #112	; 0x70
 8004632:	d01a      	beq.n	800466a <HAL_TIM_ConfigClockSource+0xa6>
 8004634:	2b70      	cmp	r3, #112	; 0x70
 8004636:	d87b      	bhi.n	8004730 <HAL_TIM_ConfigClockSource+0x16c>
 8004638:	2b60      	cmp	r3, #96	; 0x60
 800463a:	d050      	beq.n	80046de <HAL_TIM_ConfigClockSource+0x11a>
 800463c:	2b60      	cmp	r3, #96	; 0x60
 800463e:	d877      	bhi.n	8004730 <HAL_TIM_ConfigClockSource+0x16c>
 8004640:	2b50      	cmp	r3, #80	; 0x50
 8004642:	d03c      	beq.n	80046be <HAL_TIM_ConfigClockSource+0xfa>
 8004644:	2b50      	cmp	r3, #80	; 0x50
 8004646:	d873      	bhi.n	8004730 <HAL_TIM_ConfigClockSource+0x16c>
 8004648:	2b40      	cmp	r3, #64	; 0x40
 800464a:	d058      	beq.n	80046fe <HAL_TIM_ConfigClockSource+0x13a>
 800464c:	2b40      	cmp	r3, #64	; 0x40
 800464e:	d86f      	bhi.n	8004730 <HAL_TIM_ConfigClockSource+0x16c>
 8004650:	2b30      	cmp	r3, #48	; 0x30
 8004652:	d064      	beq.n	800471e <HAL_TIM_ConfigClockSource+0x15a>
 8004654:	2b30      	cmp	r3, #48	; 0x30
 8004656:	d86b      	bhi.n	8004730 <HAL_TIM_ConfigClockSource+0x16c>
 8004658:	2b20      	cmp	r3, #32
 800465a:	d060      	beq.n	800471e <HAL_TIM_ConfigClockSource+0x15a>
 800465c:	2b20      	cmp	r3, #32
 800465e:	d867      	bhi.n	8004730 <HAL_TIM_ConfigClockSource+0x16c>
 8004660:	2b00      	cmp	r3, #0
 8004662:	d05c      	beq.n	800471e <HAL_TIM_ConfigClockSource+0x15a>
 8004664:	2b10      	cmp	r3, #16
 8004666:	d05a      	beq.n	800471e <HAL_TIM_ConfigClockSource+0x15a>
 8004668:	e062      	b.n	8004730 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6818      	ldr	r0, [r3, #0]
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	6899      	ldr	r1, [r3, #8]
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	685a      	ldr	r2, [r3, #4]
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	68db      	ldr	r3, [r3, #12]
 800467a:	f000 fb5d 	bl	8004d38 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800468c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	68ba      	ldr	r2, [r7, #8]
 8004694:	609a      	str	r2, [r3, #8]
      break;
 8004696:	e04f      	b.n	8004738 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6818      	ldr	r0, [r3, #0]
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	6899      	ldr	r1, [r3, #8]
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	685a      	ldr	r2, [r3, #4]
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	68db      	ldr	r3, [r3, #12]
 80046a8:	f000 fb46 	bl	8004d38 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	689a      	ldr	r2, [r3, #8]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80046ba:	609a      	str	r2, [r3, #8]
      break;
 80046bc:	e03c      	b.n	8004738 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6818      	ldr	r0, [r3, #0]
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	6859      	ldr	r1, [r3, #4]
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	68db      	ldr	r3, [r3, #12]
 80046ca:	461a      	mov	r2, r3
 80046cc:	f000 faba 	bl	8004c44 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	2150      	movs	r1, #80	; 0x50
 80046d6:	4618      	mov	r0, r3
 80046d8:	f000 fb13 	bl	8004d02 <TIM_ITRx_SetConfig>
      break;
 80046dc:	e02c      	b.n	8004738 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6818      	ldr	r0, [r3, #0]
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	6859      	ldr	r1, [r3, #4]
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	68db      	ldr	r3, [r3, #12]
 80046ea:	461a      	mov	r2, r3
 80046ec:	f000 fad9 	bl	8004ca2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	2160      	movs	r1, #96	; 0x60
 80046f6:	4618      	mov	r0, r3
 80046f8:	f000 fb03 	bl	8004d02 <TIM_ITRx_SetConfig>
      break;
 80046fc:	e01c      	b.n	8004738 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6818      	ldr	r0, [r3, #0]
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	6859      	ldr	r1, [r3, #4]
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	68db      	ldr	r3, [r3, #12]
 800470a:	461a      	mov	r2, r3
 800470c:	f000 fa9a 	bl	8004c44 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	2140      	movs	r1, #64	; 0x40
 8004716:	4618      	mov	r0, r3
 8004718:	f000 faf3 	bl	8004d02 <TIM_ITRx_SetConfig>
      break;
 800471c:	e00c      	b.n	8004738 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4619      	mov	r1, r3
 8004728:	4610      	mov	r0, r2
 800472a:	f000 faea 	bl	8004d02 <TIM_ITRx_SetConfig>
      break;
 800472e:	e003      	b.n	8004738 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004730:	2301      	movs	r3, #1
 8004732:	73fb      	strb	r3, [r7, #15]
      break;
 8004734:	e000      	b.n	8004738 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004736:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2201      	movs	r2, #1
 800473c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2200      	movs	r2, #0
 8004744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004748:	7bfb      	ldrb	r3, [r7, #15]
}
 800474a:	4618      	mov	r0, r3
 800474c:	3710      	adds	r7, #16
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}

08004752 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004752:	b480      	push	{r7}
 8004754:	b083      	sub	sp, #12
 8004756:	af00      	add	r7, sp, #0
 8004758:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800475a:	bf00      	nop
 800475c:	370c      	adds	r7, #12
 800475e:	46bd      	mov	sp, r7
 8004760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004764:	4770      	bx	lr

08004766 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004766:	b480      	push	{r7}
 8004768:	b083      	sub	sp, #12
 800476a:	af00      	add	r7, sp, #0
 800476c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800476e:	bf00      	nop
 8004770:	370c      	adds	r7, #12
 8004772:	46bd      	mov	sp, r7
 8004774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004778:	4770      	bx	lr

0800477a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800477a:	b480      	push	{r7}
 800477c:	b083      	sub	sp, #12
 800477e:	af00      	add	r7, sp, #0
 8004780:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004782:	bf00      	nop
 8004784:	370c      	adds	r7, #12
 8004786:	46bd      	mov	sp, r7
 8004788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478c:	4770      	bx	lr

0800478e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800478e:	b480      	push	{r7}
 8004790:	b083      	sub	sp, #12
 8004792:	af00      	add	r7, sp, #0
 8004794:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004796:	bf00      	nop
 8004798:	370c      	adds	r7, #12
 800479a:	46bd      	mov	sp, r7
 800479c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a0:	4770      	bx	lr
	...

080047a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b085      	sub	sp, #20
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
 80047ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	4a40      	ldr	r2, [pc, #256]	; (80048b8 <TIM_Base_SetConfig+0x114>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d013      	beq.n	80047e4 <TIM_Base_SetConfig+0x40>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047c2:	d00f      	beq.n	80047e4 <TIM_Base_SetConfig+0x40>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	4a3d      	ldr	r2, [pc, #244]	; (80048bc <TIM_Base_SetConfig+0x118>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d00b      	beq.n	80047e4 <TIM_Base_SetConfig+0x40>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	4a3c      	ldr	r2, [pc, #240]	; (80048c0 <TIM_Base_SetConfig+0x11c>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d007      	beq.n	80047e4 <TIM_Base_SetConfig+0x40>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	4a3b      	ldr	r2, [pc, #236]	; (80048c4 <TIM_Base_SetConfig+0x120>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d003      	beq.n	80047e4 <TIM_Base_SetConfig+0x40>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	4a3a      	ldr	r2, [pc, #232]	; (80048c8 <TIM_Base_SetConfig+0x124>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d108      	bne.n	80047f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	68fa      	ldr	r2, [r7, #12]
 80047f2:	4313      	orrs	r3, r2
 80047f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	4a2f      	ldr	r2, [pc, #188]	; (80048b8 <TIM_Base_SetConfig+0x114>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d02b      	beq.n	8004856 <TIM_Base_SetConfig+0xb2>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004804:	d027      	beq.n	8004856 <TIM_Base_SetConfig+0xb2>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	4a2c      	ldr	r2, [pc, #176]	; (80048bc <TIM_Base_SetConfig+0x118>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d023      	beq.n	8004856 <TIM_Base_SetConfig+0xb2>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	4a2b      	ldr	r2, [pc, #172]	; (80048c0 <TIM_Base_SetConfig+0x11c>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d01f      	beq.n	8004856 <TIM_Base_SetConfig+0xb2>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	4a2a      	ldr	r2, [pc, #168]	; (80048c4 <TIM_Base_SetConfig+0x120>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d01b      	beq.n	8004856 <TIM_Base_SetConfig+0xb2>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	4a29      	ldr	r2, [pc, #164]	; (80048c8 <TIM_Base_SetConfig+0x124>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d017      	beq.n	8004856 <TIM_Base_SetConfig+0xb2>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	4a28      	ldr	r2, [pc, #160]	; (80048cc <TIM_Base_SetConfig+0x128>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d013      	beq.n	8004856 <TIM_Base_SetConfig+0xb2>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	4a27      	ldr	r2, [pc, #156]	; (80048d0 <TIM_Base_SetConfig+0x12c>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d00f      	beq.n	8004856 <TIM_Base_SetConfig+0xb2>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	4a26      	ldr	r2, [pc, #152]	; (80048d4 <TIM_Base_SetConfig+0x130>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d00b      	beq.n	8004856 <TIM_Base_SetConfig+0xb2>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	4a25      	ldr	r2, [pc, #148]	; (80048d8 <TIM_Base_SetConfig+0x134>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d007      	beq.n	8004856 <TIM_Base_SetConfig+0xb2>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	4a24      	ldr	r2, [pc, #144]	; (80048dc <TIM_Base_SetConfig+0x138>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d003      	beq.n	8004856 <TIM_Base_SetConfig+0xb2>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	4a23      	ldr	r2, [pc, #140]	; (80048e0 <TIM_Base_SetConfig+0x13c>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d108      	bne.n	8004868 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800485c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	68db      	ldr	r3, [r3, #12]
 8004862:	68fa      	ldr	r2, [r7, #12]
 8004864:	4313      	orrs	r3, r2
 8004866:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	695b      	ldr	r3, [r3, #20]
 8004872:	4313      	orrs	r3, r2
 8004874:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	68fa      	ldr	r2, [r7, #12]
 800487a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	689a      	ldr	r2, [r3, #8]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	4a0a      	ldr	r2, [pc, #40]	; (80048b8 <TIM_Base_SetConfig+0x114>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d003      	beq.n	800489c <TIM_Base_SetConfig+0xf8>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	4a0c      	ldr	r2, [pc, #48]	; (80048c8 <TIM_Base_SetConfig+0x124>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d103      	bne.n	80048a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	691a      	ldr	r2, [r3, #16]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2201      	movs	r2, #1
 80048a8:	615a      	str	r2, [r3, #20]
}
 80048aa:	bf00      	nop
 80048ac:	3714      	adds	r7, #20
 80048ae:	46bd      	mov	sp, r7
 80048b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b4:	4770      	bx	lr
 80048b6:	bf00      	nop
 80048b8:	40010000 	.word	0x40010000
 80048bc:	40000400 	.word	0x40000400
 80048c0:	40000800 	.word	0x40000800
 80048c4:	40000c00 	.word	0x40000c00
 80048c8:	40010400 	.word	0x40010400
 80048cc:	40014000 	.word	0x40014000
 80048d0:	40014400 	.word	0x40014400
 80048d4:	40014800 	.word	0x40014800
 80048d8:	40001800 	.word	0x40001800
 80048dc:	40001c00 	.word	0x40001c00
 80048e0:	40002000 	.word	0x40002000

080048e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b087      	sub	sp, #28
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
 80048ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6a1b      	ldr	r3, [r3, #32]
 80048f2:	f023 0201 	bic.w	r2, r3, #1
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6a1b      	ldr	r3, [r3, #32]
 80048fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	699b      	ldr	r3, [r3, #24]
 800490a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004912:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	f023 0303 	bic.w	r3, r3, #3
 800491a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	68fa      	ldr	r2, [r7, #12]
 8004922:	4313      	orrs	r3, r2
 8004924:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	f023 0302 	bic.w	r3, r3, #2
 800492c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	697a      	ldr	r2, [r7, #20]
 8004934:	4313      	orrs	r3, r2
 8004936:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	4a20      	ldr	r2, [pc, #128]	; (80049bc <TIM_OC1_SetConfig+0xd8>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d003      	beq.n	8004948 <TIM_OC1_SetConfig+0x64>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	4a1f      	ldr	r2, [pc, #124]	; (80049c0 <TIM_OC1_SetConfig+0xdc>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d10c      	bne.n	8004962 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	f023 0308 	bic.w	r3, r3, #8
 800494e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	68db      	ldr	r3, [r3, #12]
 8004954:	697a      	ldr	r2, [r7, #20]
 8004956:	4313      	orrs	r3, r2
 8004958:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	f023 0304 	bic.w	r3, r3, #4
 8004960:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	4a15      	ldr	r2, [pc, #84]	; (80049bc <TIM_OC1_SetConfig+0xd8>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d003      	beq.n	8004972 <TIM_OC1_SetConfig+0x8e>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	4a14      	ldr	r2, [pc, #80]	; (80049c0 <TIM_OC1_SetConfig+0xdc>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d111      	bne.n	8004996 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004978:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004980:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	695b      	ldr	r3, [r3, #20]
 8004986:	693a      	ldr	r2, [r7, #16]
 8004988:	4313      	orrs	r3, r2
 800498a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	699b      	ldr	r3, [r3, #24]
 8004990:	693a      	ldr	r2, [r7, #16]
 8004992:	4313      	orrs	r3, r2
 8004994:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	693a      	ldr	r2, [r7, #16]
 800499a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	68fa      	ldr	r2, [r7, #12]
 80049a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	685a      	ldr	r2, [r3, #4]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	697a      	ldr	r2, [r7, #20]
 80049ae:	621a      	str	r2, [r3, #32]
}
 80049b0:	bf00      	nop
 80049b2:	371c      	adds	r7, #28
 80049b4:	46bd      	mov	sp, r7
 80049b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ba:	4770      	bx	lr
 80049bc:	40010000 	.word	0x40010000
 80049c0:	40010400 	.word	0x40010400

080049c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b087      	sub	sp, #28
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
 80049cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6a1b      	ldr	r3, [r3, #32]
 80049d2:	f023 0210 	bic.w	r2, r3, #16
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6a1b      	ldr	r3, [r3, #32]
 80049de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	699b      	ldr	r3, [r3, #24]
 80049ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	021b      	lsls	r3, r3, #8
 8004a02:	68fa      	ldr	r2, [r7, #12]
 8004a04:	4313      	orrs	r3, r2
 8004a06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	f023 0320 	bic.w	r3, r3, #32
 8004a0e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	011b      	lsls	r3, r3, #4
 8004a16:	697a      	ldr	r2, [r7, #20]
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	4a22      	ldr	r2, [pc, #136]	; (8004aa8 <TIM_OC2_SetConfig+0xe4>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d003      	beq.n	8004a2c <TIM_OC2_SetConfig+0x68>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	4a21      	ldr	r2, [pc, #132]	; (8004aac <TIM_OC2_SetConfig+0xe8>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d10d      	bne.n	8004a48 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	68db      	ldr	r3, [r3, #12]
 8004a38:	011b      	lsls	r3, r3, #4
 8004a3a:	697a      	ldr	r2, [r7, #20]
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a46:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	4a17      	ldr	r2, [pc, #92]	; (8004aa8 <TIM_OC2_SetConfig+0xe4>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d003      	beq.n	8004a58 <TIM_OC2_SetConfig+0x94>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	4a16      	ldr	r2, [pc, #88]	; (8004aac <TIM_OC2_SetConfig+0xe8>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d113      	bne.n	8004a80 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004a58:	693b      	ldr	r3, [r7, #16]
 8004a5a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a5e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a66:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	695b      	ldr	r3, [r3, #20]
 8004a6c:	009b      	lsls	r3, r3, #2
 8004a6e:	693a      	ldr	r2, [r7, #16]
 8004a70:	4313      	orrs	r3, r2
 8004a72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	699b      	ldr	r3, [r3, #24]
 8004a78:	009b      	lsls	r3, r3, #2
 8004a7a:	693a      	ldr	r2, [r7, #16]
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	693a      	ldr	r2, [r7, #16]
 8004a84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	68fa      	ldr	r2, [r7, #12]
 8004a8a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	685a      	ldr	r2, [r3, #4]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	697a      	ldr	r2, [r7, #20]
 8004a98:	621a      	str	r2, [r3, #32]
}
 8004a9a:	bf00      	nop
 8004a9c:	371c      	adds	r7, #28
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa4:	4770      	bx	lr
 8004aa6:	bf00      	nop
 8004aa8:	40010000 	.word	0x40010000
 8004aac:	40010400 	.word	0x40010400

08004ab0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b087      	sub	sp, #28
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
 8004ab8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6a1b      	ldr	r3, [r3, #32]
 8004abe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6a1b      	ldr	r3, [r3, #32]
 8004aca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	69db      	ldr	r3, [r3, #28]
 8004ad6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ade:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	f023 0303 	bic.w	r3, r3, #3
 8004ae6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	68fa      	ldr	r2, [r7, #12]
 8004aee:	4313      	orrs	r3, r2
 8004af0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004af8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	021b      	lsls	r3, r3, #8
 8004b00:	697a      	ldr	r2, [r7, #20]
 8004b02:	4313      	orrs	r3, r2
 8004b04:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	4a21      	ldr	r2, [pc, #132]	; (8004b90 <TIM_OC3_SetConfig+0xe0>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d003      	beq.n	8004b16 <TIM_OC3_SetConfig+0x66>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	4a20      	ldr	r2, [pc, #128]	; (8004b94 <TIM_OC3_SetConfig+0xe4>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d10d      	bne.n	8004b32 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b1c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	68db      	ldr	r3, [r3, #12]
 8004b22:	021b      	lsls	r3, r3, #8
 8004b24:	697a      	ldr	r2, [r7, #20]
 8004b26:	4313      	orrs	r3, r2
 8004b28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	4a16      	ldr	r2, [pc, #88]	; (8004b90 <TIM_OC3_SetConfig+0xe0>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d003      	beq.n	8004b42 <TIM_OC3_SetConfig+0x92>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	4a15      	ldr	r2, [pc, #84]	; (8004b94 <TIM_OC3_SetConfig+0xe4>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d113      	bne.n	8004b6a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004b48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004b50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	695b      	ldr	r3, [r3, #20]
 8004b56:	011b      	lsls	r3, r3, #4
 8004b58:	693a      	ldr	r2, [r7, #16]
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	699b      	ldr	r3, [r3, #24]
 8004b62:	011b      	lsls	r3, r3, #4
 8004b64:	693a      	ldr	r2, [r7, #16]
 8004b66:	4313      	orrs	r3, r2
 8004b68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	693a      	ldr	r2, [r7, #16]
 8004b6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	68fa      	ldr	r2, [r7, #12]
 8004b74:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	685a      	ldr	r2, [r3, #4]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	697a      	ldr	r2, [r7, #20]
 8004b82:	621a      	str	r2, [r3, #32]
}
 8004b84:	bf00      	nop
 8004b86:	371c      	adds	r7, #28
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8e:	4770      	bx	lr
 8004b90:	40010000 	.word	0x40010000
 8004b94:	40010400 	.word	0x40010400

08004b98 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b087      	sub	sp, #28
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
 8004ba0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6a1b      	ldr	r3, [r3, #32]
 8004ba6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6a1b      	ldr	r3, [r3, #32]
 8004bb2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	69db      	ldr	r3, [r3, #28]
 8004bbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	021b      	lsls	r3, r3, #8
 8004bd6:	68fa      	ldr	r2, [r7, #12]
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004be2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	031b      	lsls	r3, r3, #12
 8004bea:	693a      	ldr	r2, [r7, #16]
 8004bec:	4313      	orrs	r3, r2
 8004bee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	4a12      	ldr	r2, [pc, #72]	; (8004c3c <TIM_OC4_SetConfig+0xa4>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d003      	beq.n	8004c00 <TIM_OC4_SetConfig+0x68>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	4a11      	ldr	r2, [pc, #68]	; (8004c40 <TIM_OC4_SetConfig+0xa8>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d109      	bne.n	8004c14 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c06:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	695b      	ldr	r3, [r3, #20]
 8004c0c:	019b      	lsls	r3, r3, #6
 8004c0e:	697a      	ldr	r2, [r7, #20]
 8004c10:	4313      	orrs	r3, r2
 8004c12:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	697a      	ldr	r2, [r7, #20]
 8004c18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	68fa      	ldr	r2, [r7, #12]
 8004c1e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	685a      	ldr	r2, [r3, #4]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	693a      	ldr	r2, [r7, #16]
 8004c2c:	621a      	str	r2, [r3, #32]
}
 8004c2e:	bf00      	nop
 8004c30:	371c      	adds	r7, #28
 8004c32:	46bd      	mov	sp, r7
 8004c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c38:	4770      	bx	lr
 8004c3a:	bf00      	nop
 8004c3c:	40010000 	.word	0x40010000
 8004c40:	40010400 	.word	0x40010400

08004c44 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b087      	sub	sp, #28
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	60f8      	str	r0, [r7, #12]
 8004c4c:	60b9      	str	r1, [r7, #8]
 8004c4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	6a1b      	ldr	r3, [r3, #32]
 8004c54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	6a1b      	ldr	r3, [r3, #32]
 8004c5a:	f023 0201 	bic.w	r2, r3, #1
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	699b      	ldr	r3, [r3, #24]
 8004c66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	011b      	lsls	r3, r3, #4
 8004c74:	693a      	ldr	r2, [r7, #16]
 8004c76:	4313      	orrs	r3, r2
 8004c78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	f023 030a 	bic.w	r3, r3, #10
 8004c80:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004c82:	697a      	ldr	r2, [r7, #20]
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	4313      	orrs	r3, r2
 8004c88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	693a      	ldr	r2, [r7, #16]
 8004c8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	697a      	ldr	r2, [r7, #20]
 8004c94:	621a      	str	r2, [r3, #32]
}
 8004c96:	bf00      	nop
 8004c98:	371c      	adds	r7, #28
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca0:	4770      	bx	lr

08004ca2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ca2:	b480      	push	{r7}
 8004ca4:	b087      	sub	sp, #28
 8004ca6:	af00      	add	r7, sp, #0
 8004ca8:	60f8      	str	r0, [r7, #12]
 8004caa:	60b9      	str	r1, [r7, #8]
 8004cac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	6a1b      	ldr	r3, [r3, #32]
 8004cb2:	f023 0210 	bic.w	r2, r3, #16
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	699b      	ldr	r3, [r3, #24]
 8004cbe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	6a1b      	ldr	r3, [r3, #32]
 8004cc4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004ccc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	031b      	lsls	r3, r3, #12
 8004cd2:	697a      	ldr	r2, [r7, #20]
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004cde:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	011b      	lsls	r3, r3, #4
 8004ce4:	693a      	ldr	r2, [r7, #16]
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	697a      	ldr	r2, [r7, #20]
 8004cee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	693a      	ldr	r2, [r7, #16]
 8004cf4:	621a      	str	r2, [r3, #32]
}
 8004cf6:	bf00      	nop
 8004cf8:	371c      	adds	r7, #28
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d00:	4770      	bx	lr

08004d02 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004d02:	b480      	push	{r7}
 8004d04:	b085      	sub	sp, #20
 8004d06:	af00      	add	r7, sp, #0
 8004d08:	6078      	str	r0, [r7, #4]
 8004d0a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	689b      	ldr	r3, [r3, #8]
 8004d10:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d18:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004d1a:	683a      	ldr	r2, [r7, #0]
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	f043 0307 	orr.w	r3, r3, #7
 8004d24:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	68fa      	ldr	r2, [r7, #12]
 8004d2a:	609a      	str	r2, [r3, #8]
}
 8004d2c:	bf00      	nop
 8004d2e:	3714      	adds	r7, #20
 8004d30:	46bd      	mov	sp, r7
 8004d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d36:	4770      	bx	lr

08004d38 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b087      	sub	sp, #28
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	60f8      	str	r0, [r7, #12]
 8004d40:	60b9      	str	r1, [r7, #8]
 8004d42:	607a      	str	r2, [r7, #4]
 8004d44:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	689b      	ldr	r3, [r3, #8]
 8004d4a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d52:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	021a      	lsls	r2, r3, #8
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	431a      	orrs	r2, r3
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	697a      	ldr	r2, [r7, #20]
 8004d62:	4313      	orrs	r3, r2
 8004d64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	697a      	ldr	r2, [r7, #20]
 8004d6a:	609a      	str	r2, [r3, #8]
}
 8004d6c:	bf00      	nop
 8004d6e:	371c      	adds	r7, #28
 8004d70:	46bd      	mov	sp, r7
 8004d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d76:	4770      	bx	lr

08004d78 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b087      	sub	sp, #28
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	60f8      	str	r0, [r7, #12]
 8004d80:	60b9      	str	r1, [r7, #8]
 8004d82:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	f003 031f 	and.w	r3, r3, #31
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d90:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	6a1a      	ldr	r2, [r3, #32]
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	43db      	mvns	r3, r3
 8004d9a:	401a      	ands	r2, r3
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	6a1a      	ldr	r2, [r3, #32]
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	f003 031f 	and.w	r3, r3, #31
 8004daa:	6879      	ldr	r1, [r7, #4]
 8004dac:	fa01 f303 	lsl.w	r3, r1, r3
 8004db0:	431a      	orrs	r2, r3
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	621a      	str	r2, [r3, #32]
}
 8004db6:	bf00      	nop
 8004db8:	371c      	adds	r7, #28
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc0:	4770      	bx	lr
	...

08004dc4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b085      	sub	sp, #20
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
 8004dcc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d101      	bne.n	8004ddc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004dd8:	2302      	movs	r3, #2
 8004dda:	e05a      	b.n	8004e92 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2201      	movs	r2, #1
 8004de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2202      	movs	r2, #2
 8004de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e02:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	68fa      	ldr	r2, [r7, #12]
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	68fa      	ldr	r2, [r7, #12]
 8004e14:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a21      	ldr	r2, [pc, #132]	; (8004ea0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d022      	beq.n	8004e66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e28:	d01d      	beq.n	8004e66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a1d      	ldr	r2, [pc, #116]	; (8004ea4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d018      	beq.n	8004e66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a1b      	ldr	r2, [pc, #108]	; (8004ea8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d013      	beq.n	8004e66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a1a      	ldr	r2, [pc, #104]	; (8004eac <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d00e      	beq.n	8004e66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a18      	ldr	r2, [pc, #96]	; (8004eb0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d009      	beq.n	8004e66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a17      	ldr	r2, [pc, #92]	; (8004eb4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d004      	beq.n	8004e66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a15      	ldr	r2, [pc, #84]	; (8004eb8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d10c      	bne.n	8004e80 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e6c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	68ba      	ldr	r2, [r7, #8]
 8004e74:	4313      	orrs	r3, r2
 8004e76:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	68ba      	ldr	r2, [r7, #8]
 8004e7e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2201      	movs	r2, #1
 8004e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e90:	2300      	movs	r3, #0
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3714      	adds	r7, #20
 8004e96:	46bd      	mov	sp, r7
 8004e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9c:	4770      	bx	lr
 8004e9e:	bf00      	nop
 8004ea0:	40010000 	.word	0x40010000
 8004ea4:	40000400 	.word	0x40000400
 8004ea8:	40000800 	.word	0x40000800
 8004eac:	40000c00 	.word	0x40000c00
 8004eb0:	40010400 	.word	0x40010400
 8004eb4:	40014000 	.word	0x40014000
 8004eb8:	40001800 	.word	0x40001800

08004ebc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b083      	sub	sp, #12
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ec4:	bf00      	nop
 8004ec6:	370c      	adds	r7, #12
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ece:	4770      	bx	lr

08004ed0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b083      	sub	sp, #12
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ed8:	bf00      	nop
 8004eda:	370c      	adds	r7, #12
 8004edc:	46bd      	mov	sp, r7
 8004ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee2:	4770      	bx	lr

08004ee4 <__libc_init_array>:
 8004ee4:	b570      	push	{r4, r5, r6, lr}
 8004ee6:	4d0d      	ldr	r5, [pc, #52]	; (8004f1c <__libc_init_array+0x38>)
 8004ee8:	4c0d      	ldr	r4, [pc, #52]	; (8004f20 <__libc_init_array+0x3c>)
 8004eea:	1b64      	subs	r4, r4, r5
 8004eec:	10a4      	asrs	r4, r4, #2
 8004eee:	2600      	movs	r6, #0
 8004ef0:	42a6      	cmp	r6, r4
 8004ef2:	d109      	bne.n	8004f08 <__libc_init_array+0x24>
 8004ef4:	4d0b      	ldr	r5, [pc, #44]	; (8004f24 <__libc_init_array+0x40>)
 8004ef6:	4c0c      	ldr	r4, [pc, #48]	; (8004f28 <__libc_init_array+0x44>)
 8004ef8:	f000 f820 	bl	8004f3c <_init>
 8004efc:	1b64      	subs	r4, r4, r5
 8004efe:	10a4      	asrs	r4, r4, #2
 8004f00:	2600      	movs	r6, #0
 8004f02:	42a6      	cmp	r6, r4
 8004f04:	d105      	bne.n	8004f12 <__libc_init_array+0x2e>
 8004f06:	bd70      	pop	{r4, r5, r6, pc}
 8004f08:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f0c:	4798      	blx	r3
 8004f0e:	3601      	adds	r6, #1
 8004f10:	e7ee      	b.n	8004ef0 <__libc_init_array+0xc>
 8004f12:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f16:	4798      	blx	r3
 8004f18:	3601      	adds	r6, #1
 8004f1a:	e7f2      	b.n	8004f02 <__libc_init_array+0x1e>
 8004f1c:	08004fbc 	.word	0x08004fbc
 8004f20:	08004fbc 	.word	0x08004fbc
 8004f24:	08004fbc 	.word	0x08004fbc
 8004f28:	08004fc0 	.word	0x08004fc0

08004f2c <memset>:
 8004f2c:	4402      	add	r2, r0
 8004f2e:	4603      	mov	r3, r0
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d100      	bne.n	8004f36 <memset+0xa>
 8004f34:	4770      	bx	lr
 8004f36:	f803 1b01 	strb.w	r1, [r3], #1
 8004f3a:	e7f9      	b.n	8004f30 <memset+0x4>

08004f3c <_init>:
 8004f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f3e:	bf00      	nop
 8004f40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f42:	bc08      	pop	{r3}
 8004f44:	469e      	mov	lr, r3
 8004f46:	4770      	bx	lr

08004f48 <_fini>:
 8004f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f4a:	bf00      	nop
 8004f4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f4e:	bc08      	pop	{r3}
 8004f50:	469e      	mov	lr, r3
 8004f52:	4770      	bx	lr
