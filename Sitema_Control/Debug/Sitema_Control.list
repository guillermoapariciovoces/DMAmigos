
Sitema_Control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000515c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  080052ec  080052ec  000152ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080053ac  080053ac  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080053ac  080053ac  000153ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080053b4  080053b4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080053b4  080053b4  000153b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080053b8  080053b8  000153b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080053bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000001d0  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000240  20000240  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   000101f2  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002123  00000000  00000000  00030292  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e90  00000000  00000000  000323b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000dc0  00000000  00000000  00033248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021cae  00000000  00000000  00034008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010e4f  00000000  00000000  00055cb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d5b7f  00000000  00000000  00066b05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0013c684  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000041a8  00000000  00000000  0013c6d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080052d4 	.word	0x080052d4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080052d4 	.word	0x080052d4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <Espera>:
int valorservo;

//Modo de funncionamiento
uint8_t mode = 0;

void Espera(int i){
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
	tickstart = HAL_GetTick();
 8000570:	f001 f900 	bl	8001774 <HAL_GetTick>
 8000574:	4603      	mov	r3, r0
 8000576:	b29a      	uxth	r2, r3
 8000578:	4b08      	ldr	r3, [pc, #32]	; (800059c <Espera+0x34>)
 800057a:	801a      	strh	r2, [r3, #0]
			while((HAL_GetTick() - tickstart) < i);
 800057c:	bf00      	nop
 800057e:	f001 f8f9 	bl	8001774 <HAL_GetTick>
 8000582:	4603      	mov	r3, r0
 8000584:	4a05      	ldr	r2, [pc, #20]	; (800059c <Espera+0x34>)
 8000586:	8812      	ldrh	r2, [r2, #0]
 8000588:	1a9a      	subs	r2, r3, r2
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	429a      	cmp	r2, r3
 800058e:	d3f6      	bcc.n	800057e <Espera+0x16>
}
 8000590:	bf00      	nop
 8000592:	bf00      	nop
 8000594:	3708      	adds	r7, #8
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	20000194 	.word	0x20000194

080005a0 <HAL_GPIO_EXTI_Callback>:

//Interrupciones de pulsadores
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80005a0:	b480      	push	{r7}
 80005a2:	b083      	sub	sp, #12
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	4603      	mov	r3, r0
 80005a8:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_2){
 80005aa:	88fb      	ldrh	r3, [r7, #6]
 80005ac:	2b04      	cmp	r3, #4
 80005ae:	d102      	bne.n	80005b6 <HAL_GPIO_EXTI_Callback+0x16>
			flag_cambio = 1;
 80005b0:	4b0a      	ldr	r3, [pc, #40]	; (80005dc <HAL_GPIO_EXTI_Callback+0x3c>)
 80005b2:	2201      	movs	r2, #1
 80005b4:	701a      	strb	r2, [r3, #0]
	}
	if(GPIO_Pin == GPIO_PIN_3){
 80005b6:	88fb      	ldrh	r3, [r7, #6]
 80005b8:	2b08      	cmp	r3, #8
 80005ba:	d102      	bne.n	80005c2 <HAL_GPIO_EXTI_Callback+0x22>
			flag_alerta = 1;
 80005bc:	4b08      	ldr	r3, [pc, #32]	; (80005e0 <HAL_GPIO_EXTI_Callback+0x40>)
 80005be:	2201      	movs	r2, #1
 80005c0:	701a      	strb	r2, [r3, #0]
	}
	if(GPIO_Pin == GPIO_PIN_4){
 80005c2:	88fb      	ldrh	r3, [r7, #6]
 80005c4:	2b10      	cmp	r3, #16
 80005c6:	d102      	bne.n	80005ce <HAL_GPIO_EXTI_Callback+0x2e>
			flag_rearme = 1;
 80005c8:	4b06      	ldr	r3, [pc, #24]	; (80005e4 <HAL_GPIO_EXTI_Callback+0x44>)
 80005ca:	2201      	movs	r2, #1
 80005cc:	701a      	strb	r2, [r3, #0]
	}
}
 80005ce:	bf00      	nop
 80005d0:	370c      	adds	r7, #12
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	20000140 	.word	0x20000140
 80005e0:	2000018c 	.word	0x2000018c
 80005e4:	20000192 	.word	0x20000192

080005e8 <debouncer>:

int debouncer(volatile uint8_t* button_int, GPIO_TypeDef* GPIO_port, uint16_t GPIO_number){
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b084      	sub	sp, #16
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	60f8      	str	r0, [r7, #12]
 80005f0:	60b9      	str	r1, [r7, #8]
 80005f2:	4613      	mov	r3, r2
 80005f4:	80fb      	strh	r3, [r7, #6]
	static uint8_t button_count=0;
	static int counter=0;

	if (*button_int==1){
 80005f6:	68fb      	ldr	r3, [r7, #12]
 80005f8:	781b      	ldrb	r3, [r3, #0]
 80005fa:	b2db      	uxtb	r3, r3
 80005fc:	2b01      	cmp	r3, #1
 80005fe:	d13b      	bne.n	8000678 <debouncer+0x90>
		if (button_count==0) {
 8000600:	4b20      	ldr	r3, [pc, #128]	; (8000684 <debouncer+0x9c>)
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	2b00      	cmp	r3, #0
 8000606:	d10b      	bne.n	8000620 <debouncer+0x38>
			counter=HAL_GetTick();
 8000608:	f001 f8b4 	bl	8001774 <HAL_GetTick>
 800060c:	4603      	mov	r3, r0
 800060e:	461a      	mov	r2, r3
 8000610:	4b1d      	ldr	r3, [pc, #116]	; (8000688 <debouncer+0xa0>)
 8000612:	601a      	str	r2, [r3, #0]
			button_count++;										//Contador de disparo correcto
 8000614:	4b1b      	ldr	r3, [pc, #108]	; (8000684 <debouncer+0x9c>)
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	3301      	adds	r3, #1
 800061a:	b2da      	uxtb	r2, r3
 800061c:	4b19      	ldr	r3, [pc, #100]	; (8000684 <debouncer+0x9c>)
 800061e:	701a      	strb	r2, [r3, #0]
		}
		if (HAL_GetTick()-counter>=20){
 8000620:	f001 f8a8 	bl	8001774 <HAL_GetTick>
 8000624:	4603      	mov	r3, r0
 8000626:	4a18      	ldr	r2, [pc, #96]	; (8000688 <debouncer+0xa0>)
 8000628:	6812      	ldr	r2, [r2, #0]
 800062a:	1a9b      	subs	r3, r3, r2
 800062c:	2b13      	cmp	r3, #19
 800062e:	d923      	bls.n	8000678 <debouncer+0x90>
			counter=HAL_GetTick();
 8000630:	f001 f8a0 	bl	8001774 <HAL_GetTick>
 8000634:	4603      	mov	r3, r0
 8000636:	461a      	mov	r2, r3
 8000638:	4b13      	ldr	r3, [pc, #76]	; (8000688 <debouncer+0xa0>)
 800063a:	601a      	str	r2, [r3, #0]
			if (HAL_GPIO_ReadPin(GPIO_port, GPIO_number)!=1){	//Comprueba, si baja el nivel resetea
 800063c:	88fb      	ldrh	r3, [r7, #6]
 800063e:	4619      	mov	r1, r3
 8000640:	68b8      	ldr	r0, [r7, #8]
 8000642:	f002 f889 	bl	8002758 <HAL_GPIO_ReadPin>
 8000646:	4603      	mov	r3, r0
 8000648:	2b01      	cmp	r3, #1
 800064a:	d003      	beq.n	8000654 <debouncer+0x6c>
				button_count=1;
 800064c:	4b0d      	ldr	r3, [pc, #52]	; (8000684 <debouncer+0x9c>)
 800064e:	2201      	movs	r2, #1
 8000650:	701a      	strb	r2, [r3, #0]
 8000652:	e005      	b.n	8000660 <debouncer+0x78>
			}
			else{
				button_count++;									//Comprueba, si se mantiene el nivel incrementa
 8000654:	4b0b      	ldr	r3, [pc, #44]	; (8000684 <debouncer+0x9c>)
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	3301      	adds	r3, #1
 800065a:	b2da      	uxtb	r2, r3
 800065c:	4b09      	ldr	r3, [pc, #36]	; (8000684 <debouncer+0x9c>)
 800065e:	701a      	strb	r2, [r3, #0]
			}
			if (button_count==4){								//A los cuatro ciclos de confirmación correctos
 8000660:	4b08      	ldr	r3, [pc, #32]	; (8000684 <debouncer+0x9c>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2b04      	cmp	r3, #4
 8000666:	d107      	bne.n	8000678 <debouncer+0x90>
				button_count=0;									//se trata de una pulsación buena
 8000668:	4b06      	ldr	r3, [pc, #24]	; (8000684 <debouncer+0x9c>)
 800066a:	2200      	movs	r2, #0
 800066c:	701a      	strb	r2, [r3, #0]
				*button_int=0;
 800066e:	68fb      	ldr	r3, [r7, #12]
 8000670:	2200      	movs	r2, #0
 8000672:	701a      	strb	r2, [r3, #0]
				return 1;
 8000674:	2301      	movs	r3, #1
 8000676:	e000      	b.n	800067a <debouncer+0x92>
			}
		}
	}
	return 0;
 8000678:	2300      	movs	r3, #0
}
 800067a:	4618      	mov	r0, r3
 800067c:	3710      	adds	r7, #16
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	2000008d 	.word	0x2000008d
 8000688:	20000090 	.word	0x20000090

0800068c <ajuste_pote>:


int ajuste_pote(int value){	// [MIN MAX] -> [0 100]
 800068c:	b480      	push	{r7}
 800068e:	b083      	sub	sp, #12
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
	//Minimo valor 67, maximo valor 550
	if(value <= MIN_POTE)
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	2b05      	cmp	r3, #5
 8000698:	dc01      	bgt.n	800069e <ajuste_pote+0x12>
		return 0;
 800069a:	2300      	movs	r3, #0
 800069c:	e018      	b.n	80006d0 <ajuste_pote+0x44>
	else if (value >= MAX_POTE)
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	f240 32fe 	movw	r2, #1022	; 0x3fe
 80006a4:	4293      	cmp	r3, r2
 80006a6:	dd01      	ble.n	80006ac <ajuste_pote+0x20>
		return 100;
 80006a8:	2364      	movs	r3, #100	; 0x64
 80006aa:	e011      	b.n	80006d0 <ajuste_pote+0x44>
	else
		return (int)(100*((float)(value-MIN_POTE)/(float)(MAX_POTE-MIN_POTE)));
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	3b05      	subs	r3, #5
 80006b0:	ee07 3a90 	vmov	s15, r3
 80006b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80006b8:	eddf 6a08 	vldr	s13, [pc, #32]	; 80006dc <ajuste_pote+0x50>
 80006bc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80006c0:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80006e0 <ajuste_pote+0x54>
 80006c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80006c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80006cc:	ee17 3a90 	vmov	r3, s15
}
 80006d0:	4618      	mov	r0, r3
 80006d2:	370c      	adds	r7, #12
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr
 80006dc:	447e8000 	.word	0x447e8000
 80006e0:	42c80000 	.word	0x42c80000

080006e4 <ajuste_nivel>:

int ajuste_nivel(int value){  // [MIN MAX] -> [100 0]
 80006e4:	b480      	push	{r7}
 80006e6:	b083      	sub	sp, #12
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
	if(value <= MIN_NIVEL)
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	2b05      	cmp	r3, #5
 80006f0:	dc01      	bgt.n	80006f6 <ajuste_nivel+0x12>
			return 0;
 80006f2:	2300      	movs	r3, #0
 80006f4:	e018      	b.n	8000728 <ajuste_nivel+0x44>
		else if (value >= MAX_NIVEL)
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	f240 32fe 	movw	r2, #1022	; 0x3fe
 80006fc:	4293      	cmp	r3, r2
 80006fe:	dd01      	ble.n	8000704 <ajuste_nivel+0x20>
			return 100;
 8000700:	2364      	movs	r3, #100	; 0x64
 8000702:	e011      	b.n	8000728 <ajuste_nivel+0x44>
		else
			return (int)(100*((float)(value-MIN_POTE)/(float)(MAX_POTE-MIN_POTE)));
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	3b05      	subs	r3, #5
 8000708:	ee07 3a90 	vmov	s15, r3
 800070c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000710:	eddf 6a08 	vldr	s13, [pc, #32]	; 8000734 <ajuste_nivel+0x50>
 8000714:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000718:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000738 <ajuste_nivel+0x54>
 800071c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000720:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000724:	ee17 3a90 	vmov	r3, s15
}
 8000728:	4618      	mov	r0, r3
 800072a:	370c      	adds	r7, #12
 800072c:	46bd      	mov	sp, r7
 800072e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000732:	4770      	bx	lr
 8000734:	447e8000 	.word	0x447e8000
 8000738:	42c80000 	.word	0x42c80000

0800073c <esclusa>:

void esclusa(int value){
 800073c:	b480      	push	{r7}
 800073e:	b083      	sub	sp, #12
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
	if((value >= 0) && (value <= 100))
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	2b00      	cmp	r3, #0
 8000748:	db08      	blt.n	800075c <esclusa+0x20>
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	2b64      	cmp	r3, #100	; 0x64
 800074e:	dc05      	bgt.n	800075c <esclusa+0x20>
		htim2.Instance->CCR1 = value + 25;
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	f103 0219 	add.w	r2, r3, #25
 8000756:	4b06      	ldr	r3, [pc, #24]	; (8000770 <esclusa+0x34>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	635a      	str	r2, [r3, #52]	; 0x34
	valorservo = value;
 800075c:	4a05      	ldr	r2, [pc, #20]	; (8000774 <esclusa+0x38>)
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	6013      	str	r3, [r2, #0]
}
 8000762:	bf00      	nop
 8000764:	370c      	adds	r7, #12
 8000766:	46bd      	mov	sp, r7
 8000768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076c:	4770      	bx	lr
 800076e:	bf00      	nop
 8000770:	2000019c 	.word	0x2000019c
 8000774:	20000198 	.word	0x20000198

08000778 <lcd_send_cmd>:

// Funciones basicas para el funcionamiento de la LCD via I2C


void lcd_send_cmd (char cmd)  // envia comandos
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b086      	sub	sp, #24
 800077c:	af02      	add	r7, sp, #8
 800077e:	4603      	mov	r3, r0
 8000780:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000782:	79fb      	ldrb	r3, [r7, #7]
 8000784:	f023 030f 	bic.w	r3, r3, #15
 8000788:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 800078a:	79fb      	ldrb	r3, [r7, #7]
 800078c:	011b      	lsls	r3, r3, #4
 800078e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000790:	7bfb      	ldrb	r3, [r7, #15]
 8000792:	f043 030c 	orr.w	r3, r3, #12
 8000796:	b2db      	uxtb	r3, r3
 8000798:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800079a:	7bfb      	ldrb	r3, [r7, #15]
 800079c:	f043 0308 	orr.w	r3, r3, #8
 80007a0:	b2db      	uxtb	r3, r3
 80007a2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80007a4:	7bbb      	ldrb	r3, [r7, #14]
 80007a6:	f043 030c 	orr.w	r3, r3, #12
 80007aa:	b2db      	uxtb	r3, r3
 80007ac:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80007ae:	7bbb      	ldrb	r3, [r7, #14]
 80007b0:	f043 0308 	orr.w	r3, r3, #8
 80007b4:	b2db      	uxtb	r3, r3
 80007b6:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80007b8:	f107 0208 	add.w	r2, r7, #8
 80007bc:	2364      	movs	r3, #100	; 0x64
 80007be:	9300      	str	r3, [sp, #0]
 80007c0:	2304      	movs	r3, #4
 80007c2:	214e      	movs	r1, #78	; 0x4e
 80007c4:	4803      	ldr	r0, [pc, #12]	; (80007d4 <lcd_send_cmd+0x5c>)
 80007c6:	f002 f93b 	bl	8002a40 <HAL_I2C_Master_Transmit>
}
 80007ca:	bf00      	nop
 80007cc:	3710      	adds	r7, #16
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	200000ec 	.word	0x200000ec

080007d8 <lcd_send_data>:

void lcd_send_data (char data) // envia datos a la placa, avanza automatico
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b086      	sub	sp, #24
 80007dc:	af02      	add	r7, sp, #8
 80007de:	4603      	mov	r3, r0
 80007e0:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80007e2:	79fb      	ldrb	r3, [r7, #7]
 80007e4:	f023 030f 	bic.w	r3, r3, #15
 80007e8:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80007ea:	79fb      	ldrb	r3, [r7, #7]
 80007ec:	011b      	lsls	r3, r3, #4
 80007ee:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80007f0:	7bfb      	ldrb	r3, [r7, #15]
 80007f2:	f043 030d 	orr.w	r3, r3, #13
 80007f6:	b2db      	uxtb	r3, r3
 80007f8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80007fa:	7bfb      	ldrb	r3, [r7, #15]
 80007fc:	f043 0309 	orr.w	r3, r3, #9
 8000800:	b2db      	uxtb	r3, r3
 8000802:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000804:	7bbb      	ldrb	r3, [r7, #14]
 8000806:	f043 030d 	orr.w	r3, r3, #13
 800080a:	b2db      	uxtb	r3, r3
 800080c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800080e:	7bbb      	ldrb	r3, [r7, #14]
 8000810:	f043 0309 	orr.w	r3, r3, #9
 8000814:	b2db      	uxtb	r3, r3
 8000816:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000818:	f107 0208 	add.w	r2, r7, #8
 800081c:	2364      	movs	r3, #100	; 0x64
 800081e:	9300      	str	r3, [sp, #0]
 8000820:	2304      	movs	r3, #4
 8000822:	214e      	movs	r1, #78	; 0x4e
 8000824:	4803      	ldr	r0, [pc, #12]	; (8000834 <lcd_send_data+0x5c>)
 8000826:	f002 f90b 	bl	8002a40 <HAL_I2C_Master_Transmit>
}
 800082a:	bf00      	nop
 800082c:	3710      	adds	r7, #16
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	200000ec 	.word	0x200000ec

08000838 <lcd_clear>:

void lcd_clear (void) // vacia la placa
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 800083e:	2080      	movs	r0, #128	; 0x80
 8000840:	f7ff ff9a 	bl	8000778 <lcd_send_cmd>
	for (int i=0; i<84; i++)
 8000844:	2300      	movs	r3, #0
 8000846:	607b      	str	r3, [r7, #4]
 8000848:	e005      	b.n	8000856 <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 800084a:	2020      	movs	r0, #32
 800084c:	f7ff ffc4 	bl	80007d8 <lcd_send_data>
	for (int i=0; i<84; i++)
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	3301      	adds	r3, #1
 8000854:	607b      	str	r3, [r7, #4]
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	2b53      	cmp	r3, #83	; 0x53
 800085a:	ddf6      	ble.n	800084a <lcd_clear+0x12>
	}
}
 800085c:	bf00      	nop
 800085e:	bf00      	nop
 8000860:	3708      	adds	r7, #8
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
	...

08000868 <lcd_put_cur>:

void lcd_put_cur(int row, int col) // Situa el cursor
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
 8000870:	6039      	str	r1, [r7, #0]
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	2b03      	cmp	r3, #3
 8000876:	d81f      	bhi.n	80008b8 <lcd_put_cur+0x50>
 8000878:	a201      	add	r2, pc, #4	; (adr r2, 8000880 <lcd_put_cur+0x18>)
 800087a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800087e:	bf00      	nop
 8000880:	08000891 	.word	0x08000891
 8000884:	0800089b 	.word	0x0800089b
 8000888:	080008a5 	.word	0x080008a5
 800088c:	080008af 	.word	0x080008af
    switch (row)
    {
        case 0:
            col |= 0x80;
 8000890:	683b      	ldr	r3, [r7, #0]
 8000892:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000896:	603b      	str	r3, [r7, #0]
            break;
 8000898:	e00e      	b.n	80008b8 <lcd_put_cur+0x50>
        case 1:
            col |= 0xC0;
 800089a:	683b      	ldr	r3, [r7, #0]
 800089c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80008a0:	603b      	str	r3, [r7, #0]
            break;
 80008a2:	e009      	b.n	80008b8 <lcd_put_cur+0x50>
        case 2:
            col |= 0x94;
 80008a4:	683b      	ldr	r3, [r7, #0]
 80008a6:	f043 0394 	orr.w	r3, r3, #148	; 0x94
 80008aa:	603b      	str	r3, [r7, #0]
            break;
 80008ac:	e004      	b.n	80008b8 <lcd_put_cur+0x50>
        case 3:
            col |= 0xD4;
 80008ae:	683b      	ldr	r3, [r7, #0]
 80008b0:	f043 03d4 	orr.w	r3, r3, #212	; 0xd4
 80008b4:	603b      	str	r3, [r7, #0]
            break;
 80008b6:	bf00      	nop

    }

    lcd_send_cmd (col);
 80008b8:	683b      	ldr	r3, [r7, #0]
 80008ba:	b2db      	uxtb	r3, r3
 80008bc:	4618      	mov	r0, r3
 80008be:	f7ff ff5b 	bl	8000778 <lcd_send_cmd>
}
 80008c2:	bf00      	nop
 80008c4:	3708      	adds	r7, #8
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop

080008cc <lcd_init>:


void lcd_init (void) // Inicializacion de la placa
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	Espera(50);  // wait for >40ms
 80008d0:	2032      	movs	r0, #50	; 0x32
 80008d2:	f7ff fe49 	bl	8000568 <Espera>
	lcd_send_cmd (0x30);
 80008d6:	2030      	movs	r0, #48	; 0x30
 80008d8:	f7ff ff4e 	bl	8000778 <lcd_send_cmd>
	Espera(5);  // wait for >4.1ms
 80008dc:	2005      	movs	r0, #5
 80008de:	f7ff fe43 	bl	8000568 <Espera>
	lcd_send_cmd (0x30);
 80008e2:	2030      	movs	r0, #48	; 0x30
 80008e4:	f7ff ff48 	bl	8000778 <lcd_send_cmd>
	Espera(1);  // wait for >100us
 80008e8:	2001      	movs	r0, #1
 80008ea:	f7ff fe3d 	bl	8000568 <Espera>
	lcd_send_cmd (0x30);
 80008ee:	2030      	movs	r0, #48	; 0x30
 80008f0:	f7ff ff42 	bl	8000778 <lcd_send_cmd>
	Espera(10);
 80008f4:	200a      	movs	r0, #10
 80008f6:	f7ff fe37 	bl	8000568 <Espera>
	lcd_send_cmd (0x20);  // 4bit mode
 80008fa:	2020      	movs	r0, #32
 80008fc:	f7ff ff3c 	bl	8000778 <lcd_send_cmd>
	Espera(10);
 8000900:	200a      	movs	r0, #10
 8000902:	f7ff fe31 	bl	8000568 <Espera>

  // display initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000906:	2028      	movs	r0, #40	; 0x28
 8000908:	f7ff ff36 	bl	8000778 <lcd_send_cmd>
	Espera(1);
 800090c:	2001      	movs	r0, #1
 800090e:	f7ff fe2b 	bl	8000568 <Espera>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000912:	2008      	movs	r0, #8
 8000914:	f7ff ff30 	bl	8000778 <lcd_send_cmd>
	Espera(1);
 8000918:	2001      	movs	r0, #1
 800091a:	f7ff fe25 	bl	8000568 <Espera>
	lcd_send_cmd (0x01);  // clear display
 800091e:	2001      	movs	r0, #1
 8000920:	f7ff ff2a 	bl	8000778 <lcd_send_cmd>
	Espera(1);
 8000924:	2001      	movs	r0, #1
 8000926:	f7ff fe1f 	bl	8000568 <Espera>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 800092a:	2006      	movs	r0, #6
 800092c:	f7ff ff24 	bl	8000778 <lcd_send_cmd>
	Espera(1);
 8000930:	2001      	movs	r0, #1
 8000932:	f7ff fe19 	bl	8000568 <Espera>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000936:	200c      	movs	r0, #12
 8000938:	f7ff ff1e 	bl	8000778 <lcd_send_cmd>
	lcd_clear ();
 800093c:	f7ff ff7c 	bl	8000838 <lcd_clear>
}
 8000940:	bf00      	nop
 8000942:	bd80      	pop	{r7, pc}

08000944 <lcd_send_string>:

void lcd_send_string (char *str) // envia cadena de caracteres
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 800094c:	e006      	b.n	800095c <lcd_send_string+0x18>
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	1c5a      	adds	r2, r3, #1
 8000952:	607a      	str	r2, [r7, #4]
 8000954:	781b      	ldrb	r3, [r3, #0]
 8000956:	4618      	mov	r0, r3
 8000958:	f7ff ff3e 	bl	80007d8 <lcd_send_data>
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	2b00      	cmp	r3, #0
 8000962:	d1f4      	bne.n	800094e <lcd_send_string+0xa>
}
 8000964:	bf00      	nop
 8000966:	bf00      	nop
 8000968:	3708      	adds	r7, #8
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
	...

08000970 <display>:

void display(int mode){
 8000970:	b580      	push	{r7, lr}
 8000972:	b084      	sub	sp, #16
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
	static int tickstart = 0;
  	char str[4];
	if(HAL_GetTick() - tickstart > 500){
 8000978:	f000 fefc 	bl	8001774 <HAL_GetTick>
 800097c:	4603      	mov	r3, r0
 800097e:	4a77      	ldr	r2, [pc, #476]	; (8000b5c <display+0x1ec>)
 8000980:	6812      	ldr	r2, [r2, #0]
 8000982:	1a9b      	subs	r3, r3, r2
 8000984:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000988:	f240 80e3 	bls.w	8000b52 <display+0x1e2>
		tickstart = HAL_GetTick();
 800098c:	f000 fef2 	bl	8001774 <HAL_GetTick>
 8000990:	4603      	mov	r3, r0
 8000992:	461a      	mov	r2, r3
 8000994:	4b71      	ldr	r3, [pc, #452]	; (8000b5c <display+0x1ec>)
 8000996:	601a      	str	r2, [r3, #0]
		switch(mode){
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	2b00      	cmp	r3, #0
 800099c:	d003      	beq.n	80009a6 <display+0x36>
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	2b01      	cmp	r3, #1
 80009a2:	d04b      	beq.n	8000a3c <display+0xcc>
 80009a4:	e095      	b.n	8000ad2 <display+0x162>
			case 0:		//Modo automático
			  	lcd_clear ();
 80009a6:	f7ff ff47 	bl	8000838 <lcd_clear>
			  	lcd_put_cur(0, 0);
 80009aa:	2100      	movs	r1, #0
 80009ac:	2000      	movs	r0, #0
 80009ae:	f7ff ff5b 	bl	8000868 <lcd_put_cur>
			  	lcd_send_string ("Modo automatico");
 80009b2:	486b      	ldr	r0, [pc, #428]	; (8000b60 <display+0x1f0>)
 80009b4:	f7ff ffc6 	bl	8000944 <lcd_send_string>
			  	Espera(1);
 80009b8:	2001      	movs	r0, #1
 80009ba:	f7ff fdd5 	bl	8000568 <Espera>
			  	lcd_put_cur(1, 0);
 80009be:	2100      	movs	r1, #0
 80009c0:	2001      	movs	r0, #1
 80009c2:	f7ff ff51 	bl	8000868 <lcd_put_cur>
			  	lcd_send_string ("Nvl:       ");
 80009c6:	4867      	ldr	r0, [pc, #412]	; (8000b64 <display+0x1f4>)
 80009c8:	f7ff ffbc 	bl	8000944 <lcd_send_string>
			  	Espera(1);
 80009cc:	2001      	movs	r0, #1
 80009ce:	f7ff fdcb 	bl	8000568 <Espera>
			  	lcd_put_cur(1, 7);
 80009d2:	2107      	movs	r1, #7
 80009d4:	2001      	movs	r0, #1
 80009d6:	f7ff ff47 	bl	8000868 <lcd_put_cur>
			  	sprintf(str, "%d", valor_nivel);           // integer to string
 80009da:	4b63      	ldr	r3, [pc, #396]	; (8000b68 <display+0x1f8>)
 80009dc:	881b      	ldrh	r3, [r3, #0]
 80009de:	461a      	mov	r2, r3
 80009e0:	f107 030c 	add.w	r3, r7, #12
 80009e4:	4961      	ldr	r1, [pc, #388]	; (8000b6c <display+0x1fc>)
 80009e6:	4618      	mov	r0, r3
 80009e8:	f004 f846 	bl	8004a78 <siprintf>
	            lcd_send_string (str);             // Aqui va la variable de nivel
 80009ec:	f107 030c 	add.w	r3, r7, #12
 80009f0:	4618      	mov	r0, r3
 80009f2:	f7ff ffa7 	bl	8000944 <lcd_send_string>
			  	Espera(1);
 80009f6:	2001      	movs	r0, #1
 80009f8:	f7ff fdb6 	bl	8000568 <Espera>
			  	lcd_put_cur(2, 0);
 80009fc:	2100      	movs	r1, #0
 80009fe:	2002      	movs	r0, #2
 8000a00:	f7ff ff32 	bl	8000868 <lcd_put_cur>
			  	lcd_send_string ("Apra:      ");  //Necesito una forma corta de escribir apertura
 8000a04:	485a      	ldr	r0, [pc, #360]	; (8000b70 <display+0x200>)
 8000a06:	f7ff ff9d 	bl	8000944 <lcd_send_string>
			  	Espera(1);
 8000a0a:	2001      	movs	r0, #1
 8000a0c:	f7ff fdac 	bl	8000568 <Espera>
			  	lcd_put_cur(2, 10);
 8000a10:	210a      	movs	r1, #10
 8000a12:	2002      	movs	r0, #2
 8000a14:	f7ff ff28 	bl	8000868 <lcd_put_cur>
			  	sprintf(str, "%d", ajuste_nivel(valor_nivel));           // integer to string
 8000a18:	4b53      	ldr	r3, [pc, #332]	; (8000b68 <display+0x1f8>)
 8000a1a:	881b      	ldrh	r3, [r3, #0]
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f7ff fe61 	bl	80006e4 <ajuste_nivel>
 8000a22:	4602      	mov	r2, r0
 8000a24:	f107 030c 	add.w	r3, r7, #12
 8000a28:	4950      	ldr	r1, [pc, #320]	; (8000b6c <display+0x1fc>)
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f004 f824 	bl	8004a78 <siprintf>
			  	lcd_send_string (str);	           //Aqui va la variable de apertura
 8000a30:	f107 030c 	add.w	r3, r7, #12
 8000a34:	4618      	mov	r0, r3
 8000a36:	f7ff ff85 	bl	8000944 <lcd_send_string>
			  	break;
 8000a3a:	e08b      	b.n	8000b54 <display+0x1e4>

			case 1:		//Modo manual
			  	lcd_clear ();
 8000a3c:	f7ff fefc 	bl	8000838 <lcd_clear>
			  	lcd_put_cur(0, 0);
 8000a40:	2100      	movs	r1, #0
 8000a42:	2000      	movs	r0, #0
 8000a44:	f7ff ff10 	bl	8000868 <lcd_put_cur>
			  	lcd_send_string ("Modo manual");
 8000a48:	484a      	ldr	r0, [pc, #296]	; (8000b74 <display+0x204>)
 8000a4a:	f7ff ff7b 	bl	8000944 <lcd_send_string>
			  	Espera(1);
 8000a4e:	2001      	movs	r0, #1
 8000a50:	f7ff fd8a 	bl	8000568 <Espera>
			  	lcd_put_cur(1, 0);
 8000a54:	2100      	movs	r1, #0
 8000a56:	2001      	movs	r0, #1
 8000a58:	f7ff ff06 	bl	8000868 <lcd_put_cur>
			  	lcd_send_string ("Nvl:       ");
 8000a5c:	4841      	ldr	r0, [pc, #260]	; (8000b64 <display+0x1f4>)
 8000a5e:	f7ff ff71 	bl	8000944 <lcd_send_string>
			  	Espera(1);
 8000a62:	2001      	movs	r0, #1
 8000a64:	f7ff fd80 	bl	8000568 <Espera>
			  	lcd_put_cur(1, 7);
 8000a68:	2107      	movs	r1, #7
 8000a6a:	2001      	movs	r0, #1
 8000a6c:	f7ff fefc 	bl	8000868 <lcd_put_cur>
			  	sprintf(str, "%d", valor_nivel);           // integer to string
 8000a70:	4b3d      	ldr	r3, [pc, #244]	; (8000b68 <display+0x1f8>)
 8000a72:	881b      	ldrh	r3, [r3, #0]
 8000a74:	461a      	mov	r2, r3
 8000a76:	f107 030c 	add.w	r3, r7, #12
 8000a7a:	493c      	ldr	r1, [pc, #240]	; (8000b6c <display+0x1fc>)
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f003 fffb 	bl	8004a78 <siprintf>
	            lcd_send_string (str);             // Aqui va la variable de nivel
 8000a82:	f107 030c 	add.w	r3, r7, #12
 8000a86:	4618      	mov	r0, r3
 8000a88:	f7ff ff5c 	bl	8000944 <lcd_send_string>
			  	Espera(1);
 8000a8c:	2001      	movs	r0, #1
 8000a8e:	f7ff fd6b 	bl	8000568 <Espera>
			  	lcd_put_cur(2, 0);
 8000a92:	2100      	movs	r1, #0
 8000a94:	2002      	movs	r0, #2
 8000a96:	f7ff fee7 	bl	8000868 <lcd_put_cur>
			  	lcd_send_string ("Apra:      ");  //Necesito una forma corta de escribir apertura
 8000a9a:	4835      	ldr	r0, [pc, #212]	; (8000b70 <display+0x200>)
 8000a9c:	f7ff ff52 	bl	8000944 <lcd_send_string>
			  	Espera(1);
 8000aa0:	2001      	movs	r0, #1
 8000aa2:	f7ff fd61 	bl	8000568 <Espera>
			  	lcd_put_cur(2, 10);
 8000aa6:	210a      	movs	r1, #10
 8000aa8:	2002      	movs	r0, #2
 8000aaa:	f7ff fedd 	bl	8000868 <lcd_put_cur>
			  	sprintf(str, "%d", ajuste_pote(valor_pote));           // integer to string
 8000aae:	4b32      	ldr	r3, [pc, #200]	; (8000b78 <display+0x208>)
 8000ab0:	881b      	ldrh	r3, [r3, #0]
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f7ff fdea 	bl	800068c <ajuste_pote>
 8000ab8:	4602      	mov	r2, r0
 8000aba:	f107 030c 	add.w	r3, r7, #12
 8000abe:	492b      	ldr	r1, [pc, #172]	; (8000b6c <display+0x1fc>)
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f003 ffd9 	bl	8004a78 <siprintf>
			  	lcd_send_string (str);	           //Aqui va la variable de apertura
 8000ac6:	f107 030c 	add.w	r3, r7, #12
 8000aca:	4618      	mov	r0, r3
 8000acc:	f7ff ff3a 	bl	8000944 <lcd_send_string>
			  	break;
 8000ad0:	e040      	b.n	8000b54 <display+0x1e4>

			 default:		//Modo de bloqueo de emergencia

			    lcd_clear ();
 8000ad2:	f7ff feb1 	bl	8000838 <lcd_clear>
			    lcd_put_cur(0, 0);
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	2000      	movs	r0, #0
 8000ada:	f7ff fec5 	bl	8000868 <lcd_put_cur>
			  	lcd_send_string ("EMERGENCIA");
 8000ade:	4827      	ldr	r0, [pc, #156]	; (8000b7c <display+0x20c>)
 8000ae0:	f7ff ff30 	bl	8000944 <lcd_send_string>
			  	Espera(1);
 8000ae4:	2001      	movs	r0, #1
 8000ae6:	f7ff fd3f 	bl	8000568 <Espera>
			    lcd_put_cur(1, 0);
 8000aea:	2100      	movs	r1, #0
 8000aec:	2001      	movs	r0, #1
 8000aee:	f7ff febb 	bl	8000868 <lcd_put_cur>
			    lcd_send_string ("La esclusa se cerro");
 8000af2:	4823      	ldr	r0, [pc, #140]	; (8000b80 <display+0x210>)
 8000af4:	f7ff ff26 	bl	8000944 <lcd_send_string>
			    Espera(1);
 8000af8:	2001      	movs	r0, #1
 8000afa:	f7ff fd35 	bl	8000568 <Espera>
			    lcd_put_cur(2, 0);
 8000afe:	2100      	movs	r1, #0
 8000b00:	2002      	movs	r0, #2
 8000b02:	f7ff feb1 	bl	8000868 <lcd_put_cur>
			    lcd_send_string ("Cierre manualmente");
 8000b06:	481f      	ldr	r0, [pc, #124]	; (8000b84 <display+0x214>)
 8000b08:	f7ff ff1c 	bl	8000944 <lcd_send_string>
			    Espera(1);
 8000b0c:	2001      	movs	r0, #1
 8000b0e:	f7ff fd2b 	bl	8000568 <Espera>
			    lcd_put_cur(3, 0);
 8000b12:	2100      	movs	r1, #0
 8000b14:	2003      	movs	r0, #3
 8000b16:	f7ff fea7 	bl	8000868 <lcd_put_cur>
			    lcd_send_string ("Apra:      ");  //Necesito una forma corta de escribir apertura
 8000b1a:	4815      	ldr	r0, [pc, #84]	; (8000b70 <display+0x200>)
 8000b1c:	f7ff ff12 	bl	8000944 <lcd_send_string>
			    Espera(1);
 8000b20:	2001      	movs	r0, #1
 8000b22:	f7ff fd21 	bl	8000568 <Espera>
			    lcd_put_cur(3, 10);
 8000b26:	210a      	movs	r1, #10
 8000b28:	2003      	movs	r0, #3
 8000b2a:	f7ff fe9d 	bl	8000868 <lcd_put_cur>
			    sprintf(str, "%d", ajuste_pote(valor_pote));           // integer to string
 8000b2e:	4b12      	ldr	r3, [pc, #72]	; (8000b78 <display+0x208>)
 8000b30:	881b      	ldrh	r3, [r3, #0]
 8000b32:	4618      	mov	r0, r3
 8000b34:	f7ff fdaa 	bl	800068c <ajuste_pote>
 8000b38:	4602      	mov	r2, r0
 8000b3a:	f107 030c 	add.w	r3, r7, #12
 8000b3e:	490b      	ldr	r1, [pc, #44]	; (8000b6c <display+0x1fc>)
 8000b40:	4618      	mov	r0, r3
 8000b42:	f003 ff99 	bl	8004a78 <siprintf>
			    lcd_send_string (str);	           //Aqui va la variable de apertura
 8000b46:	f107 030c 	add.w	r3, r7, #12
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f7ff fefa 	bl	8000944 <lcd_send_string>

			  	break;
 8000b50:	e000      	b.n	8000b54 <display+0x1e4>
		}
	}
 8000b52:	bf00      	nop
}
 8000b54:	bf00      	nop
 8000b56:	3710      	adds	r7, #16
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	20000094 	.word	0x20000094
 8000b60:	080052ec 	.word	0x080052ec
 8000b64:	080052fc 	.word	0x080052fc
 8000b68:	20000190 	.word	0x20000190
 8000b6c:	08005308 	.word	0x08005308
 8000b70:	0800530c 	.word	0x0800530c
 8000b74:	08005318 	.word	0x08005318
 8000b78:	2000018e 	.word	0x2000018e
 8000b7c:	08005324 	.word	0x08005324
 8000b80:	08005330 	.word	0x08005330
 8000b84:	08005344 	.word	0x08005344

08000b88 <zumba>:

void zumba(int on){
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
	if (on == 0){
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d104      	bne.n	8000ba0 <zumba+0x18>
		htim2.Instance->CCR2 = 0;
 8000b96:	4b0d      	ldr	r3, [pc, #52]	; (8000bcc <zumba+0x44>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	639a      	str	r2, [r3, #56]	; 0x38
		htim2.Instance->CCR2 = 200;
		Espera(500);
		htim2.Instance->CCR2 = 2000;
		Espera(500);
	}
}
 8000b9e:	e010      	b.n	8000bc2 <zumba+0x3a>
		htim2.Instance->CCR2 = 200;
 8000ba0:	4b0a      	ldr	r3, [pc, #40]	; (8000bcc <zumba+0x44>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	22c8      	movs	r2, #200	; 0xc8
 8000ba6:	639a      	str	r2, [r3, #56]	; 0x38
		Espera(500);
 8000ba8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000bac:	f7ff fcdc 	bl	8000568 <Espera>
		htim2.Instance->CCR2 = 2000;
 8000bb0:	4b06      	ldr	r3, [pc, #24]	; (8000bcc <zumba+0x44>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000bb8:	639a      	str	r2, [r3, #56]	; 0x38
		Espera(500);
 8000bba:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000bbe:	f7ff fcd3 	bl	8000568 <Espera>
}
 8000bc2:	bf00      	nop
 8000bc4:	3708      	adds	r7, #8
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	2000019c 	.word	0x2000019c

08000bd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bd4:	f000 fd98 	bl	8001708 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bd8:	f000 f8d0 	bl	8000d7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bdc:	f000 fa8c 	bl	80010f8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000be0:	f000 f9da 	bl	8000f98 <MX_I2C1_Init>
  MX_TIM2_Init();
 8000be4:	f000 fa06 	bl	8000ff4 <MX_TIM2_Init>
  MX_ADC1_Init();
 8000be8:	f000 f932 	bl	8000e50 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000bec:	f000 f982 	bl	8000ef4 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */


  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	4857      	ldr	r0, [pc, #348]	; (8000d50 <main+0x180>)
 8000bf4:	f002 ffec 	bl	8003bd0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000bf8:	2104      	movs	r1, #4
 8000bfa:	4855      	ldr	r0, [pc, #340]	; (8000d50 <main+0x180>)
 8000bfc:	f002 ffe8 	bl	8003bd0 <HAL_TIM_PWM_Start>

  Espera(1);
 8000c00:	2001      	movs	r0, #1
 8000c02:	f7ff fcb1 	bl	8000568 <Espera>
  lcd_init ();
 8000c06:	f7ff fe61 	bl	80008cc <lcd_init>

  Espera(1);
 8000c0a:	2001      	movs	r0, #1
 8000c0c:	f7ff fcac 	bl	8000568 <Espera>
  lcd_send_cmd(0x80 || 0x00);
 8000c10:	2001      	movs	r0, #1
 8000c12:	f7ff fdb1 	bl	8000778 <lcd_send_cmd>
  Espera(1);
 8000c16:	2001      	movs	r0, #1
 8000c18:	f7ff fca6 	bl	8000568 <Espera>
  lcd_send_string("PRUEBA");
 8000c1c:	484d      	ldr	r0, [pc, #308]	; (8000d54 <main+0x184>)
 8000c1e:	f7ff fe91 	bl	8000944 <lcd_send_string>

  Espera(100);
 8000c22:	2064      	movs	r0, #100	; 0x64
 8000c24:	f7ff fca0 	bl	8000568 <Espera>
	  htim2.Instance->CCR2 = 1000;  //Zumbador agudo
	  Espera(2000);
*/

	//Lecturas por polling (desgraciadamente) del ADC
	  HAL_ADC_Start(&hadc1);
 8000c28:	484b      	ldr	r0, [pc, #300]	; (8000d58 <main+0x188>)
 8000c2a:	f000 fdf3 	bl	8001814 <HAL_ADC_Start>
	  	  if (HAL_ADC_PollForConversion(&hadc1, 100)==HAL_OK)
 8000c2e:	2164      	movs	r1, #100	; 0x64
 8000c30:	4849      	ldr	r0, [pc, #292]	; (8000d58 <main+0x188>)
 8000c32:	f000 fef4 	bl	8001a1e <HAL_ADC_PollForConversion>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d106      	bne.n	8000c4a <main+0x7a>
	  	  {
	  	   valor_pote=HAL_ADC_GetValue(&hadc1);
 8000c3c:	4846      	ldr	r0, [pc, #280]	; (8000d58 <main+0x188>)
 8000c3e:	f001 f8ba 	bl	8001db6 <HAL_ADC_GetValue>
 8000c42:	4603      	mov	r3, r0
 8000c44:	b29a      	uxth	r2, r3
 8000c46:	4b45      	ldr	r3, [pc, #276]	; (8000d5c <main+0x18c>)
 8000c48:	801a      	strh	r2, [r3, #0]
	  	  }
	  	  HAL_ADC_Stop(&hadc1);
 8000c4a:	4843      	ldr	r0, [pc, #268]	; (8000d58 <main+0x188>)
 8000c4c:	f000 feb4 	bl	80019b8 <HAL_ADC_Stop>

	  HAL_ADC_Start(&hadc2);
 8000c50:	4843      	ldr	r0, [pc, #268]	; (8000d60 <main+0x190>)
 8000c52:	f000 fddf 	bl	8001814 <HAL_ADC_Start>
	  	  if (HAL_ADC_PollForConversion(&hadc2, 100)==HAL_OK)
 8000c56:	2164      	movs	r1, #100	; 0x64
 8000c58:	4841      	ldr	r0, [pc, #260]	; (8000d60 <main+0x190>)
 8000c5a:	f000 fee0 	bl	8001a1e <HAL_ADC_PollForConversion>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d106      	bne.n	8000c72 <main+0xa2>
	  	  {
	  		valor_nivel=HAL_ADC_GetValue(&hadc2);
 8000c64:	483e      	ldr	r0, [pc, #248]	; (8000d60 <main+0x190>)
 8000c66:	f001 f8a6 	bl	8001db6 <HAL_ADC_GetValue>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	b29a      	uxth	r2, r3
 8000c6e:	4b3d      	ldr	r3, [pc, #244]	; (8000d64 <main+0x194>)
 8000c70:	801a      	strh	r2, [r3, #0]
	  	  }
	  	  HAL_ADC_Stop(&hadc2);
 8000c72:	483b      	ldr	r0, [pc, #236]	; (8000d60 <main+0x190>)
 8000c74:	f000 fea0 	bl	80019b8 <HAL_ADC_Stop>

	//Cambio de modo (1-automático 0-manual)
	 if((mode != 2) && debouncer(&flag_cambio, GPIOE, GPIO_PIN_2)){
 8000c78:	4b3b      	ldr	r3, [pc, #236]	; (8000d68 <main+0x198>)
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	2b02      	cmp	r3, #2
 8000c7e:	d015      	beq.n	8000cac <main+0xdc>
 8000c80:	2204      	movs	r2, #4
 8000c82:	493a      	ldr	r1, [pc, #232]	; (8000d6c <main+0x19c>)
 8000c84:	483a      	ldr	r0, [pc, #232]	; (8000d70 <main+0x1a0>)
 8000c86:	f7ff fcaf 	bl	80005e8 <debouncer>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d00d      	beq.n	8000cac <main+0xdc>
		 flag_cambio = 0;
 8000c90:	4b37      	ldr	r3, [pc, #220]	; (8000d70 <main+0x1a0>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	701a      	strb	r2, [r3, #0]
		 mode = (mode + 1) % 2;
 8000c96:	4b34      	ldr	r3, [pc, #208]	; (8000d68 <main+0x198>)
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	3301      	adds	r3, #1
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	f003 0301 	and.w	r3, r3, #1
 8000ca2:	bfb8      	it	lt
 8000ca4:	425b      	neglt	r3, r3
 8000ca6:	b2da      	uxtb	r2, r3
 8000ca8:	4b2f      	ldr	r3, [pc, #188]	; (8000d68 <main+0x198>)
 8000caa:	701a      	strb	r2, [r3, #0]
	 }
	 //Desarme del modo de alerta
	 if(flag_rearme /*!debouncer(&flag_rearme, GPIOE, GPIO_PIN_4)*/){
 8000cac:	4b31      	ldr	r3, [pc, #196]	; (8000d74 <main+0x1a4>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	b2db      	uxtb	r3, r3
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d00d      	beq.n	8000cd2 <main+0x102>
		 flag_rearme = 0;
 8000cb6:	4b2f      	ldr	r3, [pc, #188]	; (8000d74 <main+0x1a4>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	701a      	strb	r2, [r3, #0]
		 if(ajuste_pote(valor_pote) == 0){
 8000cbc:	4b27      	ldr	r3, [pc, #156]	; (8000d5c <main+0x18c>)
 8000cbe:	881b      	ldrh	r3, [r3, #0]
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f7ff fce3 	bl	800068c <ajuste_pote>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d102      	bne.n	8000cd2 <main+0x102>
		 	  mode = 1;
 8000ccc:	4b26      	ldr	r3, [pc, #152]	; (8000d68 <main+0x198>)
 8000cce:	2201      	movs	r2, #1
 8000cd0:	701a      	strb	r2, [r3, #0]
	  	 }
	  }
	  //Armado del modo de alerta PREFERENTE POR ORDEN IMPORTANTE
	  if(flag_alerta /*!debouncer(&flag_alerta, GPIOE, GPIO_PIN_3)*/){
 8000cd2:	4b29      	ldr	r3, [pc, #164]	; (8000d78 <main+0x1a8>)
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	b2db      	uxtb	r3, r3
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d005      	beq.n	8000ce8 <main+0x118>
		  flag_alerta = 0;
 8000cdc:	4b26      	ldr	r3, [pc, #152]	; (8000d78 <main+0x1a8>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	701a      	strb	r2, [r3, #0]
		  mode = 2;
 8000ce2:	4b21      	ldr	r3, [pc, #132]	; (8000d68 <main+0x198>)
 8000ce4:	2202      	movs	r2, #2
 8000ce6:	701a      	strb	r2, [r3, #0]
	  }

	  //Verificaciones independientes de seguridad (capaces de activar el modo de emergencia)

	  switch(mode){
 8000ce8:	4b1f      	ldr	r3, [pc, #124]	; (8000d68 <main+0x198>)
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d002      	beq.n	8000cf6 <main+0x126>
 8000cf0:	2b01      	cmp	r3, #1
 8000cf2:	d010      	beq.n	8000d16 <main+0x146>
 8000cf4:	e01f      	b.n	8000d36 <main+0x166>

	  	  case 0:		//Modo automático
	  		  //Led verde
	  		  //Esclusa obedece al nivel de agua
	  		  esclusa(ajuste_nivel(valor_nivel));
 8000cf6:	4b1b      	ldr	r3, [pc, #108]	; (8000d64 <main+0x194>)
 8000cf8:	881b      	ldrh	r3, [r3, #0]
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f7ff fcf2 	bl	80006e4 <ajuste_nivel>
 8000d00:	4603      	mov	r3, r0
 8000d02:	4618      	mov	r0, r3
 8000d04:	f7ff fd1a 	bl	800073c <esclusa>
	  		  //Pantalla informa del modo-nivel-apertura
	  		  display(0);
 8000d08:	2000      	movs	r0, #0
 8000d0a:	f7ff fe31 	bl	8000970 <display>
	  		  zumba(0);
 8000d0e:	2000      	movs	r0, #0
 8000d10:	f7ff ff3a 	bl	8000b88 <zumba>
	  		  break;
 8000d14:	e01a      	b.n	8000d4c <main+0x17c>

	  	  case 1:		//Modo manual
	  		  //Led amarillo
	  		  //Esclusa obedece al mando del potenciómetro
	  		  esclusa(ajuste_pote(valor_pote));
 8000d16:	4b11      	ldr	r3, [pc, #68]	; (8000d5c <main+0x18c>)
 8000d18:	881b      	ldrh	r3, [r3, #0]
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f7ff fcb6 	bl	800068c <ajuste_pote>
 8000d20:	4603      	mov	r3, r0
 8000d22:	4618      	mov	r0, r3
 8000d24:	f7ff fd0a 	bl	800073c <esclusa>
	  		  //Pantalla informa del modo-nivel-apertura
			  display(1);
 8000d28:	2001      	movs	r0, #1
 8000d2a:	f7ff fe21 	bl	8000970 <display>
	  		  zumba(0);
 8000d2e:	2000      	movs	r0, #0
 8000d30:	f7ff ff2a 	bl	8000b88 <zumba>
	  		  break;
 8000d34:	e00a      	b.n	8000d4c <main+0x17c>

	  	  default:		//Modo de bloqueo de emergencia
	  		  //Leds rojo
	  		  //Cerrar la esclusa totalmente
	  		  htim2.Instance->CCR1 = 25;  // duty cycle is .5 ms, 2.5% of 20ms (0º)
 8000d36:	4b06      	ldr	r3, [pc, #24]	; (8000d50 <main+0x180>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	2219      	movs	r2, #25
 8000d3c:	635a      	str	r2, [r3, #52]	; 0x34
	  		  //Leds rojo
	  		  //Zumbador dando por culo
	  		  display(2);
 8000d3e:	2002      	movs	r0, #2
 8000d40:	f7ff fe16 	bl	8000970 <display>
	  		  zumba(1);
 8000d44:	2001      	movs	r0, #1
 8000d46:	f7ff ff1f 	bl	8000b88 <zumba>
	  		  //Pantalla diciento EMERGENCIA
	  		  break;
 8000d4a:	bf00      	nop
	  HAL_ADC_Start(&hadc1);
 8000d4c:	e76c      	b.n	8000c28 <main+0x58>
 8000d4e:	bf00      	nop
 8000d50:	2000019c 	.word	0x2000019c
 8000d54:	08005358 	.word	0x08005358
 8000d58:	20000144 	.word	0x20000144
 8000d5c:	2000018e 	.word	0x2000018e
 8000d60:	200000a4 	.word	0x200000a4
 8000d64:	20000190 	.word	0x20000190
 8000d68:	2000008c 	.word	0x2000008c
 8000d6c:	40021000 	.word	0x40021000
 8000d70:	20000140 	.word	0x20000140
 8000d74:	20000192 	.word	0x20000192
 8000d78:	2000018c 	.word	0x2000018c

08000d7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b094      	sub	sp, #80	; 0x50
 8000d80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d82:	f107 0320 	add.w	r3, r7, #32
 8000d86:	2230      	movs	r2, #48	; 0x30
 8000d88:	2100      	movs	r1, #0
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f003 fe6c 	bl	8004a68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d90:	f107 030c 	add.w	r3, r7, #12
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]
 8000d98:	605a      	str	r2, [r3, #4]
 8000d9a:	609a      	str	r2, [r3, #8]
 8000d9c:	60da      	str	r2, [r3, #12]
 8000d9e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000da0:	2300      	movs	r3, #0
 8000da2:	60bb      	str	r3, [r7, #8]
 8000da4:	4b28      	ldr	r3, [pc, #160]	; (8000e48 <SystemClock_Config+0xcc>)
 8000da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da8:	4a27      	ldr	r2, [pc, #156]	; (8000e48 <SystemClock_Config+0xcc>)
 8000daa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dae:	6413      	str	r3, [r2, #64]	; 0x40
 8000db0:	4b25      	ldr	r3, [pc, #148]	; (8000e48 <SystemClock_Config+0xcc>)
 8000db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000db8:	60bb      	str	r3, [r7, #8]
 8000dba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	607b      	str	r3, [r7, #4]
 8000dc0:	4b22      	ldr	r3, [pc, #136]	; (8000e4c <SystemClock_Config+0xd0>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a21      	ldr	r2, [pc, #132]	; (8000e4c <SystemClock_Config+0xd0>)
 8000dc6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dca:	6013      	str	r3, [r2, #0]
 8000dcc:	4b1f      	ldr	r3, [pc, #124]	; (8000e4c <SystemClock_Config+0xd0>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dd4:	607b      	str	r3, [r7, #4]
 8000dd6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000dd8:	2301      	movs	r3, #1
 8000dda:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ddc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000de0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000de2:	2302      	movs	r3, #2
 8000de4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000de6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000dea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000dec:	2304      	movs	r3, #4
 8000dee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 90;
 8000df0:	235a      	movs	r3, #90	; 0x5a
 8000df2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000df4:	2302      	movs	r3, #2
 8000df6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000df8:	2307      	movs	r3, #7
 8000dfa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dfc:	f107 0320 	add.w	r3, r7, #32
 8000e00:	4618      	mov	r0, r3
 8000e02:	f002 f925 	bl	8003050 <HAL_RCC_OscConfig>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000e0c:	f000 f9f6 	bl	80011fc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e10:	230f      	movs	r3, #15
 8000e12:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e14:	2302      	movs	r3, #2
 8000e16:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e1c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e20:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e26:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e28:	f107 030c 	add.w	r3, r7, #12
 8000e2c:	2102      	movs	r1, #2
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f002 fb86 	bl	8003540 <HAL_RCC_ClockConfig>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000e3a:	f000 f9df 	bl	80011fc <Error_Handler>
  }
}
 8000e3e:	bf00      	nop
 8000e40:	3750      	adds	r7, #80	; 0x50
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	40023800 	.word	0x40023800
 8000e4c:	40007000 	.word	0x40007000

08000e50 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b084      	sub	sp, #16
 8000e54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e56:	463b      	mov	r3, r7
 8000e58:	2200      	movs	r2, #0
 8000e5a:	601a      	str	r2, [r3, #0]
 8000e5c:	605a      	str	r2, [r3, #4]
 8000e5e:	609a      	str	r2, [r3, #8]
 8000e60:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000e62:	4b21      	ldr	r3, [pc, #132]	; (8000ee8 <MX_ADC1_Init+0x98>)
 8000e64:	4a21      	ldr	r2, [pc, #132]	; (8000eec <MX_ADC1_Init+0x9c>)
 8000e66:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000e68:	4b1f      	ldr	r3, [pc, #124]	; (8000ee8 <MX_ADC1_Init+0x98>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8000e6e:	4b1e      	ldr	r3, [pc, #120]	; (8000ee8 <MX_ADC1_Init+0x98>)
 8000e70:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000e74:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000e76:	4b1c      	ldr	r3, [pc, #112]	; (8000ee8 <MX_ADC1_Init+0x98>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e7c:	4b1a      	ldr	r3, [pc, #104]	; (8000ee8 <MX_ADC1_Init+0x98>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e82:	4b19      	ldr	r3, [pc, #100]	; (8000ee8 <MX_ADC1_Init+0x98>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e8a:	4b17      	ldr	r3, [pc, #92]	; (8000ee8 <MX_ADC1_Init+0x98>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e90:	4b15      	ldr	r3, [pc, #84]	; (8000ee8 <MX_ADC1_Init+0x98>)
 8000e92:	4a17      	ldr	r2, [pc, #92]	; (8000ef0 <MX_ADC1_Init+0xa0>)
 8000e94:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e96:	4b14      	ldr	r3, [pc, #80]	; (8000ee8 <MX_ADC1_Init+0x98>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000e9c:	4b12      	ldr	r3, [pc, #72]	; (8000ee8 <MX_ADC1_Init+0x98>)
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ea2:	4b11      	ldr	r3, [pc, #68]	; (8000ee8 <MX_ADC1_Init+0x98>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000eaa:	4b0f      	ldr	r3, [pc, #60]	; (8000ee8 <MX_ADC1_Init+0x98>)
 8000eac:	2201      	movs	r2, #1
 8000eae:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000eb0:	480d      	ldr	r0, [pc, #52]	; (8000ee8 <MX_ADC1_Init+0x98>)
 8000eb2:	f000 fc6b 	bl	800178c <HAL_ADC_Init>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000ebc:	f000 f99e 	bl	80011fc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000ec0:	2305      	movs	r3, #5
 8000ec2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ecc:	463b      	mov	r3, r7
 8000ece:	4619      	mov	r1, r3
 8000ed0:	4805      	ldr	r0, [pc, #20]	; (8000ee8 <MX_ADC1_Init+0x98>)
 8000ed2:	f000 ff9b 	bl	8001e0c <HAL_ADC_ConfigChannel>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000edc:	f000 f98e 	bl	80011fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ee0:	bf00      	nop
 8000ee2:	3710      	adds	r7, #16
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	20000144 	.word	0x20000144
 8000eec:	40012000 	.word	0x40012000
 8000ef0:	0f000001 	.word	0x0f000001

08000ef4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b084      	sub	sp, #16
 8000ef8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000efa:	463b      	mov	r3, r7
 8000efc:	2200      	movs	r2, #0
 8000efe:	601a      	str	r2, [r3, #0]
 8000f00:	605a      	str	r2, [r3, #4]
 8000f02:	609a      	str	r2, [r3, #8]
 8000f04:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8000f06:	4b21      	ldr	r3, [pc, #132]	; (8000f8c <MX_ADC2_Init+0x98>)
 8000f08:	4a21      	ldr	r2, [pc, #132]	; (8000f90 <MX_ADC2_Init+0x9c>)
 8000f0a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000f0c:	4b1f      	ldr	r3, [pc, #124]	; (8000f8c <MX_ADC2_Init+0x98>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_10B;
 8000f12:	4b1e      	ldr	r3, [pc, #120]	; (8000f8c <MX_ADC2_Init+0x98>)
 8000f14:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000f18:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8000f1a:	4b1c      	ldr	r3, [pc, #112]	; (8000f8c <MX_ADC2_Init+0x98>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000f20:	4b1a      	ldr	r3, [pc, #104]	; (8000f8c <MX_ADC2_Init+0x98>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000f26:	4b19      	ldr	r3, [pc, #100]	; (8000f8c <MX_ADC2_Init+0x98>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f2e:	4b17      	ldr	r3, [pc, #92]	; (8000f8c <MX_ADC2_Init+0x98>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f34:	4b15      	ldr	r3, [pc, #84]	; (8000f8c <MX_ADC2_Init+0x98>)
 8000f36:	4a17      	ldr	r2, [pc, #92]	; (8000f94 <MX_ADC2_Init+0xa0>)
 8000f38:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f3a:	4b14      	ldr	r3, [pc, #80]	; (8000f8c <MX_ADC2_Init+0x98>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000f40:	4b12      	ldr	r3, [pc, #72]	; (8000f8c <MX_ADC2_Init+0x98>)
 8000f42:	2201      	movs	r2, #1
 8000f44:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000f46:	4b11      	ldr	r3, [pc, #68]	; (8000f8c <MX_ADC2_Init+0x98>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f4e:	4b0f      	ldr	r3, [pc, #60]	; (8000f8c <MX_ADC2_Init+0x98>)
 8000f50:	2201      	movs	r2, #1
 8000f52:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000f54:	480d      	ldr	r0, [pc, #52]	; (8000f8c <MX_ADC2_Init+0x98>)
 8000f56:	f000 fc19 	bl	800178c <HAL_ADC_Init>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8000f60:	f000 f94c 	bl	80011fc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000f64:	2306      	movs	r3, #6
 8000f66:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000f70:	463b      	mov	r3, r7
 8000f72:	4619      	mov	r1, r3
 8000f74:	4805      	ldr	r0, [pc, #20]	; (8000f8c <MX_ADC2_Init+0x98>)
 8000f76:	f000 ff49 	bl	8001e0c <HAL_ADC_ConfigChannel>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8000f80:	f000 f93c 	bl	80011fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000f84:	bf00      	nop
 8000f86:	3710      	adds	r7, #16
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	200000a4 	.word	0x200000a4
 8000f90:	40012100 	.word	0x40012100
 8000f94:	0f000001 	.word	0x0f000001

08000f98 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f9c:	4b13      	ldr	r3, [pc, #76]	; (8000fec <MX_I2C1_Init+0x54>)
 8000f9e:	4a14      	ldr	r2, [pc, #80]	; (8000ff0 <MX_I2C1_Init+0x58>)
 8000fa0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 50000;
 8000fa2:	4b12      	ldr	r3, [pc, #72]	; (8000fec <MX_I2C1_Init+0x54>)
 8000fa4:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000fa8:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000faa:	4b10      	ldr	r3, [pc, #64]	; (8000fec <MX_I2C1_Init+0x54>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000fb0:	4b0e      	ldr	r3, [pc, #56]	; (8000fec <MX_I2C1_Init+0x54>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fb6:	4b0d      	ldr	r3, [pc, #52]	; (8000fec <MX_I2C1_Init+0x54>)
 8000fb8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000fbc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fbe:	4b0b      	ldr	r3, [pc, #44]	; (8000fec <MX_I2C1_Init+0x54>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000fc4:	4b09      	ldr	r3, [pc, #36]	; (8000fec <MX_I2C1_Init+0x54>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fca:	4b08      	ldr	r3, [pc, #32]	; (8000fec <MX_I2C1_Init+0x54>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fd0:	4b06      	ldr	r3, [pc, #24]	; (8000fec <MX_I2C1_Init+0x54>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fd6:	4805      	ldr	r0, [pc, #20]	; (8000fec <MX_I2C1_Init+0x54>)
 8000fd8:	f001 fbee 	bl	80027b8 <HAL_I2C_Init>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 8000fe2:	f000 f90b 	bl	80011fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000fe6:	bf00      	nop
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	200000ec 	.word	0x200000ec
 8000ff0:	40005400 	.word	0x40005400

08000ff4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b08e      	sub	sp, #56	; 0x38
 8000ff8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ffa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ffe:	2200      	movs	r2, #0
 8001000:	601a      	str	r2, [r3, #0]
 8001002:	605a      	str	r2, [r3, #4]
 8001004:	609a      	str	r2, [r3, #8]
 8001006:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001008:	f107 0320 	add.w	r3, r7, #32
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001012:	1d3b      	adds	r3, r7, #4
 8001014:	2200      	movs	r2, #0
 8001016:	601a      	str	r2, [r3, #0]
 8001018:	605a      	str	r2, [r3, #4]
 800101a:	609a      	str	r2, [r3, #8]
 800101c:	60da      	str	r2, [r3, #12]
 800101e:	611a      	str	r2, [r3, #16]
 8001020:	615a      	str	r2, [r3, #20]
 8001022:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001024:	4b33      	ldr	r3, [pc, #204]	; (80010f4 <MX_TIM2_Init+0x100>)
 8001026:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800102a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 900-1;
 800102c:	4b31      	ldr	r3, [pc, #196]	; (80010f4 <MX_TIM2_Init+0x100>)
 800102e:	f240 3283 	movw	r2, #899	; 0x383
 8001032:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001034:	4b2f      	ldr	r3, [pc, #188]	; (80010f4 <MX_TIM2_Init+0x100>)
 8001036:	2200      	movs	r2, #0
 8001038:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 800103a:	4b2e      	ldr	r3, [pc, #184]	; (80010f4 <MX_TIM2_Init+0x100>)
 800103c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001040:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001042:	4b2c      	ldr	r3, [pc, #176]	; (80010f4 <MX_TIM2_Init+0x100>)
 8001044:	2200      	movs	r2, #0
 8001046:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001048:	4b2a      	ldr	r3, [pc, #168]	; (80010f4 <MX_TIM2_Init+0x100>)
 800104a:	2200      	movs	r2, #0
 800104c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800104e:	4829      	ldr	r0, [pc, #164]	; (80010f4 <MX_TIM2_Init+0x100>)
 8001050:	f002 fca4 	bl	800399c <HAL_TIM_Base_Init>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800105a:	f000 f8cf 	bl	80011fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800105e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001062:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001064:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001068:	4619      	mov	r1, r3
 800106a:	4822      	ldr	r0, [pc, #136]	; (80010f4 <MX_TIM2_Init+0x100>)
 800106c:	f003 f842 	bl	80040f4 <HAL_TIM_ConfigClockSource>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001076:	f000 f8c1 	bl	80011fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800107a:	481e      	ldr	r0, [pc, #120]	; (80010f4 <MX_TIM2_Init+0x100>)
 800107c:	f002 fd4e 	bl	8003b1c <HAL_TIM_PWM_Init>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001086:	f000 f8b9 	bl	80011fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800108a:	2300      	movs	r3, #0
 800108c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800108e:	2300      	movs	r3, #0
 8001090:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001092:	f107 0320 	add.w	r3, r7, #32
 8001096:	4619      	mov	r1, r3
 8001098:	4816      	ldr	r0, [pc, #88]	; (80010f4 <MX_TIM2_Init+0x100>)
 800109a:	f003 fc2b 	bl	80048f4 <HAL_TIMEx_MasterConfigSynchronization>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80010a4:	f000 f8aa 	bl	80011fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010a8:	2360      	movs	r3, #96	; 0x60
 80010aa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80010ac:	2300      	movs	r3, #0
 80010ae:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010b0:	2300      	movs	r3, #0
 80010b2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010b4:	2300      	movs	r3, #0
 80010b6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010b8:	1d3b      	adds	r3, r7, #4
 80010ba:	2200      	movs	r2, #0
 80010bc:	4619      	mov	r1, r3
 80010be:	480d      	ldr	r0, [pc, #52]	; (80010f4 <MX_TIM2_Init+0x100>)
 80010c0:	f002 ff56 	bl	8003f70 <HAL_TIM_PWM_ConfigChannel>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80010ca:	f000 f897 	bl	80011fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80010ce:	1d3b      	adds	r3, r7, #4
 80010d0:	2204      	movs	r2, #4
 80010d2:	4619      	mov	r1, r3
 80010d4:	4807      	ldr	r0, [pc, #28]	; (80010f4 <MX_TIM2_Init+0x100>)
 80010d6:	f002 ff4b 	bl	8003f70 <HAL_TIM_PWM_ConfigChannel>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 80010e0:	f000 f88c 	bl	80011fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80010e4:	4803      	ldr	r0, [pc, #12]	; (80010f4 <MX_TIM2_Init+0x100>)
 80010e6:	f000 f9a9 	bl	800143c <HAL_TIM_MspPostInit>

}
 80010ea:	bf00      	nop
 80010ec:	3738      	adds	r7, #56	; 0x38
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	2000019c 	.word	0x2000019c

080010f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b08a      	sub	sp, #40	; 0x28
 80010fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010fe:	f107 0314 	add.w	r3, r7, #20
 8001102:	2200      	movs	r2, #0
 8001104:	601a      	str	r2, [r3, #0]
 8001106:	605a      	str	r2, [r3, #4]
 8001108:	609a      	str	r2, [r3, #8]
 800110a:	60da      	str	r2, [r3, #12]
 800110c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800110e:	2300      	movs	r3, #0
 8001110:	613b      	str	r3, [r7, #16]
 8001112:	4b2f      	ldr	r3, [pc, #188]	; (80011d0 <MX_GPIO_Init+0xd8>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001116:	4a2e      	ldr	r2, [pc, #184]	; (80011d0 <MX_GPIO_Init+0xd8>)
 8001118:	f043 0310 	orr.w	r3, r3, #16
 800111c:	6313      	str	r3, [r2, #48]	; 0x30
 800111e:	4b2c      	ldr	r3, [pc, #176]	; (80011d0 <MX_GPIO_Init+0xd8>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001122:	f003 0310 	and.w	r3, r3, #16
 8001126:	613b      	str	r3, [r7, #16]
 8001128:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800112a:	2300      	movs	r3, #0
 800112c:	60fb      	str	r3, [r7, #12]
 800112e:	4b28      	ldr	r3, [pc, #160]	; (80011d0 <MX_GPIO_Init+0xd8>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001132:	4a27      	ldr	r2, [pc, #156]	; (80011d0 <MX_GPIO_Init+0xd8>)
 8001134:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001138:	6313      	str	r3, [r2, #48]	; 0x30
 800113a:	4b25      	ldr	r3, [pc, #148]	; (80011d0 <MX_GPIO_Init+0xd8>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001142:	60fb      	str	r3, [r7, #12]
 8001144:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001146:	2300      	movs	r3, #0
 8001148:	60bb      	str	r3, [r7, #8]
 800114a:	4b21      	ldr	r3, [pc, #132]	; (80011d0 <MX_GPIO_Init+0xd8>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114e:	4a20      	ldr	r2, [pc, #128]	; (80011d0 <MX_GPIO_Init+0xd8>)
 8001150:	f043 0301 	orr.w	r3, r3, #1
 8001154:	6313      	str	r3, [r2, #48]	; 0x30
 8001156:	4b1e      	ldr	r3, [pc, #120]	; (80011d0 <MX_GPIO_Init+0xd8>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115a:	f003 0301 	and.w	r3, r3, #1
 800115e:	60bb      	str	r3, [r7, #8]
 8001160:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001162:	2300      	movs	r3, #0
 8001164:	607b      	str	r3, [r7, #4]
 8001166:	4b1a      	ldr	r3, [pc, #104]	; (80011d0 <MX_GPIO_Init+0xd8>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116a:	4a19      	ldr	r2, [pc, #100]	; (80011d0 <MX_GPIO_Init+0xd8>)
 800116c:	f043 0302 	orr.w	r3, r3, #2
 8001170:	6313      	str	r3, [r2, #48]	; 0x30
 8001172:	4b17      	ldr	r3, [pc, #92]	; (80011d0 <MX_GPIO_Init+0xd8>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001176:	f003 0302 	and.w	r3, r3, #2
 800117a:	607b      	str	r3, [r7, #4]
 800117c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PE2 PE3 PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 800117e:	231c      	movs	r3, #28
 8001180:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001182:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001186:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001188:	2301      	movs	r3, #1
 800118a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800118c:	f107 0314 	add.w	r3, r7, #20
 8001190:	4619      	mov	r1, r3
 8001192:	4810      	ldr	r0, [pc, #64]	; (80011d4 <MX_GPIO_Init+0xdc>)
 8001194:	f001 f944 	bl	8002420 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001198:	2200      	movs	r2, #0
 800119a:	2100      	movs	r1, #0
 800119c:	2008      	movs	r0, #8
 800119e:	f001 f915 	bl	80023cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80011a2:	2008      	movs	r0, #8
 80011a4:	f001 f92e 	bl	8002404 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80011a8:	2200      	movs	r2, #0
 80011aa:	2100      	movs	r1, #0
 80011ac:	2009      	movs	r0, #9
 80011ae:	f001 f90d 	bl	80023cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80011b2:	2009      	movs	r0, #9
 80011b4:	f001 f926 	bl	8002404 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80011b8:	2200      	movs	r2, #0
 80011ba:	2100      	movs	r1, #0
 80011bc:	200a      	movs	r0, #10
 80011be:	f001 f905 	bl	80023cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80011c2:	200a      	movs	r0, #10
 80011c4:	f001 f91e 	bl	8002404 <HAL_NVIC_EnableIRQ>

}
 80011c8:	bf00      	nop
 80011ca:	3728      	adds	r7, #40	; 0x28
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	40023800 	.word	0x40023800
 80011d4:	40021000 	.word	0x40021000

080011d8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a04      	ldr	r2, [pc, #16]	; (80011f8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d101      	bne.n	80011ee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80011ea:	f000 faaf 	bl	800174c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80011ee:	bf00      	nop
 80011f0:	3708      	adds	r7, #8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	40010000 	.word	0x40010000

080011fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001200:	b672      	cpsid	i
}
 8001202:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001204:	e7fe      	b.n	8001204 <Error_Handler+0x8>
	...

08001208 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800120e:	2300      	movs	r3, #0
 8001210:	607b      	str	r3, [r7, #4]
 8001212:	4b10      	ldr	r3, [pc, #64]	; (8001254 <HAL_MspInit+0x4c>)
 8001214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001216:	4a0f      	ldr	r2, [pc, #60]	; (8001254 <HAL_MspInit+0x4c>)
 8001218:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800121c:	6453      	str	r3, [r2, #68]	; 0x44
 800121e:	4b0d      	ldr	r3, [pc, #52]	; (8001254 <HAL_MspInit+0x4c>)
 8001220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001222:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001226:	607b      	str	r3, [r7, #4]
 8001228:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800122a:	2300      	movs	r3, #0
 800122c:	603b      	str	r3, [r7, #0]
 800122e:	4b09      	ldr	r3, [pc, #36]	; (8001254 <HAL_MspInit+0x4c>)
 8001230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001232:	4a08      	ldr	r2, [pc, #32]	; (8001254 <HAL_MspInit+0x4c>)
 8001234:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001238:	6413      	str	r3, [r2, #64]	; 0x40
 800123a:	4b06      	ldr	r3, [pc, #24]	; (8001254 <HAL_MspInit+0x4c>)
 800123c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001242:	603b      	str	r3, [r7, #0]
 8001244:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001246:	2007      	movs	r0, #7
 8001248:	f001 f8b5 	bl	80023b6 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800124c:	bf00      	nop
 800124e:	3708      	adds	r7, #8
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	40023800 	.word	0x40023800

08001258 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b08c      	sub	sp, #48	; 0x30
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001260:	f107 031c 	add.w	r3, r7, #28
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]
 8001268:	605a      	str	r2, [r3, #4]
 800126a:	609a      	str	r2, [r3, #8]
 800126c:	60da      	str	r2, [r3, #12]
 800126e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a36      	ldr	r2, [pc, #216]	; (8001350 <HAL_ADC_MspInit+0xf8>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d130      	bne.n	80012dc <HAL_ADC_MspInit+0x84>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800127a:	2300      	movs	r3, #0
 800127c:	61bb      	str	r3, [r7, #24]
 800127e:	4b35      	ldr	r3, [pc, #212]	; (8001354 <HAL_ADC_MspInit+0xfc>)
 8001280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001282:	4a34      	ldr	r2, [pc, #208]	; (8001354 <HAL_ADC_MspInit+0xfc>)
 8001284:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001288:	6453      	str	r3, [r2, #68]	; 0x44
 800128a:	4b32      	ldr	r3, [pc, #200]	; (8001354 <HAL_ADC_MspInit+0xfc>)
 800128c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800128e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001292:	61bb      	str	r3, [r7, #24]
 8001294:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001296:	2300      	movs	r3, #0
 8001298:	617b      	str	r3, [r7, #20]
 800129a:	4b2e      	ldr	r3, [pc, #184]	; (8001354 <HAL_ADC_MspInit+0xfc>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129e:	4a2d      	ldr	r2, [pc, #180]	; (8001354 <HAL_ADC_MspInit+0xfc>)
 80012a0:	f043 0301 	orr.w	r3, r3, #1
 80012a4:	6313      	str	r3, [r2, #48]	; 0x30
 80012a6:	4b2b      	ldr	r3, [pc, #172]	; (8001354 <HAL_ADC_MspInit+0xfc>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012aa:	f003 0301 	and.w	r3, r3, #1
 80012ae:	617b      	str	r3, [r7, #20]
 80012b0:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80012b2:	2320      	movs	r3, #32
 80012b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012b6:	2303      	movs	r3, #3
 80012b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ba:	2300      	movs	r3, #0
 80012bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012be:	f107 031c 	add.w	r3, r7, #28
 80012c2:	4619      	mov	r1, r3
 80012c4:	4824      	ldr	r0, [pc, #144]	; (8001358 <HAL_ADC_MspInit+0x100>)
 80012c6:	f001 f8ab 	bl	8002420 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80012ca:	2200      	movs	r2, #0
 80012cc:	2100      	movs	r1, #0
 80012ce:	2012      	movs	r0, #18
 80012d0:	f001 f87c 	bl	80023cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80012d4:	2012      	movs	r0, #18
 80012d6:	f001 f895 	bl	8002404 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80012da:	e034      	b.n	8001346 <HAL_ADC_MspInit+0xee>
  else if(hadc->Instance==ADC2)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a1e      	ldr	r2, [pc, #120]	; (800135c <HAL_ADC_MspInit+0x104>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d12f      	bne.n	8001346 <HAL_ADC_MspInit+0xee>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80012e6:	2300      	movs	r3, #0
 80012e8:	613b      	str	r3, [r7, #16]
 80012ea:	4b1a      	ldr	r3, [pc, #104]	; (8001354 <HAL_ADC_MspInit+0xfc>)
 80012ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ee:	4a19      	ldr	r2, [pc, #100]	; (8001354 <HAL_ADC_MspInit+0xfc>)
 80012f0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012f4:	6453      	str	r3, [r2, #68]	; 0x44
 80012f6:	4b17      	ldr	r3, [pc, #92]	; (8001354 <HAL_ADC_MspInit+0xfc>)
 80012f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80012fe:	613b      	str	r3, [r7, #16]
 8001300:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001302:	2300      	movs	r3, #0
 8001304:	60fb      	str	r3, [r7, #12]
 8001306:	4b13      	ldr	r3, [pc, #76]	; (8001354 <HAL_ADC_MspInit+0xfc>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130a:	4a12      	ldr	r2, [pc, #72]	; (8001354 <HAL_ADC_MspInit+0xfc>)
 800130c:	f043 0301 	orr.w	r3, r3, #1
 8001310:	6313      	str	r3, [r2, #48]	; 0x30
 8001312:	4b10      	ldr	r3, [pc, #64]	; (8001354 <HAL_ADC_MspInit+0xfc>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001316:	f003 0301 	and.w	r3, r3, #1
 800131a:	60fb      	str	r3, [r7, #12]
 800131c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800131e:	2340      	movs	r3, #64	; 0x40
 8001320:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001322:	2303      	movs	r3, #3
 8001324:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001326:	2300      	movs	r3, #0
 8001328:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800132a:	f107 031c 	add.w	r3, r7, #28
 800132e:	4619      	mov	r1, r3
 8001330:	4809      	ldr	r0, [pc, #36]	; (8001358 <HAL_ADC_MspInit+0x100>)
 8001332:	f001 f875 	bl	8002420 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001336:	2200      	movs	r2, #0
 8001338:	2100      	movs	r1, #0
 800133a:	2012      	movs	r0, #18
 800133c:	f001 f846 	bl	80023cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001340:	2012      	movs	r0, #18
 8001342:	f001 f85f 	bl	8002404 <HAL_NVIC_EnableIRQ>
}
 8001346:	bf00      	nop
 8001348:	3730      	adds	r7, #48	; 0x30
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	40012000 	.word	0x40012000
 8001354:	40023800 	.word	0x40023800
 8001358:	40020000 	.word	0x40020000
 800135c:	40012100 	.word	0x40012100

08001360 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b08a      	sub	sp, #40	; 0x28
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001368:	f107 0314 	add.w	r3, r7, #20
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]
 8001370:	605a      	str	r2, [r3, #4]
 8001372:	609a      	str	r2, [r3, #8]
 8001374:	60da      	str	r2, [r3, #12]
 8001376:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a19      	ldr	r2, [pc, #100]	; (80013e4 <HAL_I2C_MspInit+0x84>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d12b      	bne.n	80013da <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001382:	2300      	movs	r3, #0
 8001384:	613b      	str	r3, [r7, #16]
 8001386:	4b18      	ldr	r3, [pc, #96]	; (80013e8 <HAL_I2C_MspInit+0x88>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138a:	4a17      	ldr	r2, [pc, #92]	; (80013e8 <HAL_I2C_MspInit+0x88>)
 800138c:	f043 0302 	orr.w	r3, r3, #2
 8001390:	6313      	str	r3, [r2, #48]	; 0x30
 8001392:	4b15      	ldr	r3, [pc, #84]	; (80013e8 <HAL_I2C_MspInit+0x88>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001396:	f003 0302 	and.w	r3, r3, #2
 800139a:	613b      	str	r3, [r7, #16]
 800139c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800139e:	23c0      	movs	r3, #192	; 0xc0
 80013a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013a2:	2312      	movs	r3, #18
 80013a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013a6:	2301      	movs	r3, #1
 80013a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013aa:	2303      	movs	r3, #3
 80013ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013ae:	2304      	movs	r3, #4
 80013b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013b2:	f107 0314 	add.w	r3, r7, #20
 80013b6:	4619      	mov	r1, r3
 80013b8:	480c      	ldr	r0, [pc, #48]	; (80013ec <HAL_I2C_MspInit+0x8c>)
 80013ba:	f001 f831 	bl	8002420 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013be:	2300      	movs	r3, #0
 80013c0:	60fb      	str	r3, [r7, #12]
 80013c2:	4b09      	ldr	r3, [pc, #36]	; (80013e8 <HAL_I2C_MspInit+0x88>)
 80013c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c6:	4a08      	ldr	r2, [pc, #32]	; (80013e8 <HAL_I2C_MspInit+0x88>)
 80013c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013cc:	6413      	str	r3, [r2, #64]	; 0x40
 80013ce:	4b06      	ldr	r3, [pc, #24]	; (80013e8 <HAL_I2C_MspInit+0x88>)
 80013d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013d6:	60fb      	str	r3, [r7, #12]
 80013d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80013da:	bf00      	nop
 80013dc:	3728      	adds	r7, #40	; 0x28
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	40005400 	.word	0x40005400
 80013e8:	40023800 	.word	0x40023800
 80013ec:	40020400 	.word	0x40020400

080013f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001400:	d115      	bne.n	800142e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001402:	2300      	movs	r3, #0
 8001404:	60fb      	str	r3, [r7, #12]
 8001406:	4b0c      	ldr	r3, [pc, #48]	; (8001438 <HAL_TIM_Base_MspInit+0x48>)
 8001408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140a:	4a0b      	ldr	r2, [pc, #44]	; (8001438 <HAL_TIM_Base_MspInit+0x48>)
 800140c:	f043 0301 	orr.w	r3, r3, #1
 8001410:	6413      	str	r3, [r2, #64]	; 0x40
 8001412:	4b09      	ldr	r3, [pc, #36]	; (8001438 <HAL_TIM_Base_MspInit+0x48>)
 8001414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001416:	f003 0301 	and.w	r3, r3, #1
 800141a:	60fb      	str	r3, [r7, #12]
 800141c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800141e:	2200      	movs	r2, #0
 8001420:	2100      	movs	r1, #0
 8001422:	201c      	movs	r0, #28
 8001424:	f000 ffd2 	bl	80023cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001428:	201c      	movs	r0, #28
 800142a:	f000 ffeb 	bl	8002404 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800142e:	bf00      	nop
 8001430:	3710      	adds	r7, #16
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	40023800 	.word	0x40023800

0800143c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b088      	sub	sp, #32
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001444:	f107 030c 	add.w	r3, r7, #12
 8001448:	2200      	movs	r2, #0
 800144a:	601a      	str	r2, [r3, #0]
 800144c:	605a      	str	r2, [r3, #4]
 800144e:	609a      	str	r2, [r3, #8]
 8001450:	60da      	str	r2, [r3, #12]
 8001452:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800145c:	d11d      	bne.n	800149a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800145e:	2300      	movs	r3, #0
 8001460:	60bb      	str	r3, [r7, #8]
 8001462:	4b10      	ldr	r3, [pc, #64]	; (80014a4 <HAL_TIM_MspPostInit+0x68>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001466:	4a0f      	ldr	r2, [pc, #60]	; (80014a4 <HAL_TIM_MspPostInit+0x68>)
 8001468:	f043 0301 	orr.w	r3, r3, #1
 800146c:	6313      	str	r3, [r2, #48]	; 0x30
 800146e:	4b0d      	ldr	r3, [pc, #52]	; (80014a4 <HAL_TIM_MspPostInit+0x68>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	f003 0301 	and.w	r3, r3, #1
 8001476:	60bb      	str	r3, [r7, #8]
 8001478:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800147a:	2303      	movs	r3, #3
 800147c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800147e:	2302      	movs	r3, #2
 8001480:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001482:	2300      	movs	r3, #0
 8001484:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001486:	2300      	movs	r3, #0
 8001488:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800148a:	2301      	movs	r3, #1
 800148c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800148e:	f107 030c 	add.w	r3, r7, #12
 8001492:	4619      	mov	r1, r3
 8001494:	4804      	ldr	r0, [pc, #16]	; (80014a8 <HAL_TIM_MspPostInit+0x6c>)
 8001496:	f000 ffc3 	bl	8002420 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800149a:	bf00      	nop
 800149c:	3720      	adds	r7, #32
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	40023800 	.word	0x40023800
 80014a8:	40020000 	.word	0x40020000

080014ac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b08c      	sub	sp, #48	; 0x30
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80014b4:	2300      	movs	r3, #0
 80014b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80014b8:	2300      	movs	r3, #0
 80014ba:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 80014bc:	2200      	movs	r2, #0
 80014be:	6879      	ldr	r1, [r7, #4]
 80014c0:	2019      	movs	r0, #25
 80014c2:	f000 ff83 	bl	80023cc <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80014c6:	2019      	movs	r0, #25
 80014c8:	f000 ff9c 	bl	8002404 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80014cc:	2300      	movs	r3, #0
 80014ce:	60fb      	str	r3, [r7, #12]
 80014d0:	4b1f      	ldr	r3, [pc, #124]	; (8001550 <HAL_InitTick+0xa4>)
 80014d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014d4:	4a1e      	ldr	r2, [pc, #120]	; (8001550 <HAL_InitTick+0xa4>)
 80014d6:	f043 0301 	orr.w	r3, r3, #1
 80014da:	6453      	str	r3, [r2, #68]	; 0x44
 80014dc:	4b1c      	ldr	r3, [pc, #112]	; (8001550 <HAL_InitTick+0xa4>)
 80014de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014e0:	f003 0301 	and.w	r3, r3, #1
 80014e4:	60fb      	str	r3, [r7, #12]
 80014e6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80014e8:	f107 0210 	add.w	r2, r7, #16
 80014ec:	f107 0314 	add.w	r3, r7, #20
 80014f0:	4611      	mov	r1, r2
 80014f2:	4618      	mov	r0, r3
 80014f4:	f002 fa20 	bl	8003938 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80014f8:	f002 fa0a 	bl	8003910 <HAL_RCC_GetPCLK2Freq>
 80014fc:	4603      	mov	r3, r0
 80014fe:	005b      	lsls	r3, r3, #1
 8001500:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001504:	4a13      	ldr	r2, [pc, #76]	; (8001554 <HAL_InitTick+0xa8>)
 8001506:	fba2 2303 	umull	r2, r3, r2, r3
 800150a:	0c9b      	lsrs	r3, r3, #18
 800150c:	3b01      	subs	r3, #1
 800150e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001510:	4b11      	ldr	r3, [pc, #68]	; (8001558 <HAL_InitTick+0xac>)
 8001512:	4a12      	ldr	r2, [pc, #72]	; (800155c <HAL_InitTick+0xb0>)
 8001514:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001516:	4b10      	ldr	r3, [pc, #64]	; (8001558 <HAL_InitTick+0xac>)
 8001518:	f240 32e7 	movw	r2, #999	; 0x3e7
 800151c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800151e:	4a0e      	ldr	r2, [pc, #56]	; (8001558 <HAL_InitTick+0xac>)
 8001520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001522:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001524:	4b0c      	ldr	r3, [pc, #48]	; (8001558 <HAL_InitTick+0xac>)
 8001526:	2200      	movs	r2, #0
 8001528:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800152a:	4b0b      	ldr	r3, [pc, #44]	; (8001558 <HAL_InitTick+0xac>)
 800152c:	2200      	movs	r2, #0
 800152e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001530:	4809      	ldr	r0, [pc, #36]	; (8001558 <HAL_InitTick+0xac>)
 8001532:	f002 fa33 	bl	800399c <HAL_TIM_Base_Init>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d104      	bne.n	8001546 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800153c:	4806      	ldr	r0, [pc, #24]	; (8001558 <HAL_InitTick+0xac>)
 800153e:	f002 fa7d 	bl	8003a3c <HAL_TIM_Base_Start_IT>
 8001542:	4603      	mov	r3, r0
 8001544:	e000      	b.n	8001548 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
}
 8001548:	4618      	mov	r0, r3
 800154a:	3730      	adds	r7, #48	; 0x30
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	40023800 	.word	0x40023800
 8001554:	431bde83 	.word	0x431bde83
 8001558:	200001e4 	.word	0x200001e4
 800155c:	40010000 	.word	0x40010000

08001560 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001564:	e7fe      	b.n	8001564 <NMI_Handler+0x4>

08001566 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001566:	b480      	push	{r7}
 8001568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800156a:	e7fe      	b.n	800156a <HardFault_Handler+0x4>

0800156c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001570:	e7fe      	b.n	8001570 <MemManage_Handler+0x4>

08001572 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001572:	b480      	push	{r7}
 8001574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001576:	e7fe      	b.n	8001576 <BusFault_Handler+0x4>

08001578 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800157c:	e7fe      	b.n	800157c <UsageFault_Handler+0x4>

0800157e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800157e:	b480      	push	{r7}
 8001580:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001582:	bf00      	nop
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr

0800158c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001590:	bf00      	nop
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr

0800159a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800159a:	b480      	push	{r7}
 800159c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800159e:	bf00      	nop
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr

080015a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015ac:	bf00      	nop
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr

080015b6 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80015b6:	b580      	push	{r7, lr}
 80015b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80015ba:	2004      	movs	r0, #4
 80015bc:	f001 f8e4 	bl	8002788 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80015c0:	bf00      	nop
 80015c2:	bd80      	pop	{r7, pc}

080015c4 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80015c8:	2008      	movs	r0, #8
 80015ca:	f001 f8dd 	bl	8002788 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80015ce:	bf00      	nop
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80015d2:	b580      	push	{r7, lr}
 80015d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80015d6:	2010      	movs	r0, #16
 80015d8:	f001 f8d6 	bl	8002788 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80015dc:	bf00      	nop
 80015de:	bd80      	pop	{r7, pc}

080015e0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80015e4:	4803      	ldr	r0, [pc, #12]	; (80015f4 <ADC_IRQHandler+0x14>)
 80015e6:	f000 faa5 	bl	8001b34 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80015ea:	4803      	ldr	r0, [pc, #12]	; (80015f8 <ADC_IRQHandler+0x18>)
 80015ec:	f000 faa2 	bl	8001b34 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80015f0:	bf00      	nop
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	20000144 	.word	0x20000144
 80015f8:	200000a4 	.word	0x200000a4

080015fc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001600:	4802      	ldr	r0, [pc, #8]	; (800160c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001602:	f002 fbad 	bl	8003d60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001606:	bf00      	nop
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	200001e4 	.word	0x200001e4

08001610 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001614:	4802      	ldr	r0, [pc, #8]	; (8001620 <TIM2_IRQHandler+0x10>)
 8001616:	f002 fba3 	bl	8003d60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800161a:	bf00      	nop
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	2000019c 	.word	0x2000019c

08001624 <_sbrk>:
 8001624:	b580      	push	{r7, lr}
 8001626:	b086      	sub	sp, #24
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	4a14      	ldr	r2, [pc, #80]	; (8001680 <_sbrk+0x5c>)
 800162e:	4b15      	ldr	r3, [pc, #84]	; (8001684 <_sbrk+0x60>)
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	617b      	str	r3, [r7, #20]
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	613b      	str	r3, [r7, #16]
 8001638:	4b13      	ldr	r3, [pc, #76]	; (8001688 <_sbrk+0x64>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d102      	bne.n	8001646 <_sbrk+0x22>
 8001640:	4b11      	ldr	r3, [pc, #68]	; (8001688 <_sbrk+0x64>)
 8001642:	4a12      	ldr	r2, [pc, #72]	; (800168c <_sbrk+0x68>)
 8001644:	601a      	str	r2, [r3, #0]
 8001646:	4b10      	ldr	r3, [pc, #64]	; (8001688 <_sbrk+0x64>)
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	4413      	add	r3, r2
 800164e:	693a      	ldr	r2, [r7, #16]
 8001650:	429a      	cmp	r2, r3
 8001652:	d207      	bcs.n	8001664 <_sbrk+0x40>
 8001654:	f003 f9de 	bl	8004a14 <__errno>
 8001658:	4603      	mov	r3, r0
 800165a:	220c      	movs	r2, #12
 800165c:	601a      	str	r2, [r3, #0]
 800165e:	f04f 33ff 	mov.w	r3, #4294967295
 8001662:	e009      	b.n	8001678 <_sbrk+0x54>
 8001664:	4b08      	ldr	r3, [pc, #32]	; (8001688 <_sbrk+0x64>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	60fb      	str	r3, [r7, #12]
 800166a:	4b07      	ldr	r3, [pc, #28]	; (8001688 <_sbrk+0x64>)
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	4413      	add	r3, r2
 8001672:	4a05      	ldr	r2, [pc, #20]	; (8001688 <_sbrk+0x64>)
 8001674:	6013      	str	r3, [r2, #0]
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	4618      	mov	r0, r3
 800167a:	3718      	adds	r7, #24
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	20020000 	.word	0x20020000
 8001684:	00000400 	.word	0x00000400
 8001688:	20000098 	.word	0x20000098
 800168c:	20000240 	.word	0x20000240

08001690 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001694:	4b06      	ldr	r3, [pc, #24]	; (80016b0 <SystemInit+0x20>)
 8001696:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800169a:	4a05      	ldr	r2, [pc, #20]	; (80016b0 <SystemInit+0x20>)
 800169c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016a4:	bf00      	nop
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop
 80016b0:	e000ed00 	.word	0xe000ed00

080016b4 <Reset_Handler>:
 80016b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016ec <LoopFillZerobss+0x12>
 80016b8:	480d      	ldr	r0, [pc, #52]	; (80016f0 <LoopFillZerobss+0x16>)
 80016ba:	490e      	ldr	r1, [pc, #56]	; (80016f4 <LoopFillZerobss+0x1a>)
 80016bc:	4a0e      	ldr	r2, [pc, #56]	; (80016f8 <LoopFillZerobss+0x1e>)
 80016be:	2300      	movs	r3, #0
 80016c0:	e002      	b.n	80016c8 <LoopCopyDataInit>

080016c2 <CopyDataInit>:
 80016c2:	58d4      	ldr	r4, [r2, r3]
 80016c4:	50c4      	str	r4, [r0, r3]
 80016c6:	3304      	adds	r3, #4

080016c8 <LoopCopyDataInit>:
 80016c8:	18c4      	adds	r4, r0, r3
 80016ca:	428c      	cmp	r4, r1
 80016cc:	d3f9      	bcc.n	80016c2 <CopyDataInit>
 80016ce:	4a0b      	ldr	r2, [pc, #44]	; (80016fc <LoopFillZerobss+0x22>)
 80016d0:	4c0b      	ldr	r4, [pc, #44]	; (8001700 <LoopFillZerobss+0x26>)
 80016d2:	2300      	movs	r3, #0
 80016d4:	e001      	b.n	80016da <LoopFillZerobss>

080016d6 <FillZerobss>:
 80016d6:	6013      	str	r3, [r2, #0]
 80016d8:	3204      	adds	r2, #4

080016da <LoopFillZerobss>:
 80016da:	42a2      	cmp	r2, r4
 80016dc:	d3fb      	bcc.n	80016d6 <FillZerobss>
 80016de:	f7ff ffd7 	bl	8001690 <SystemInit>
 80016e2:	f003 f99d 	bl	8004a20 <__libc_init_array>
 80016e6:	f7ff fa73 	bl	8000bd0 <main>
 80016ea:	4770      	bx	lr
 80016ec:	20020000 	.word	0x20020000
 80016f0:	20000000 	.word	0x20000000
 80016f4:	20000070 	.word	0x20000070
 80016f8:	080053bc 	.word	0x080053bc
 80016fc:	20000070 	.word	0x20000070
 8001700:	20000240 	.word	0x20000240

08001704 <CAN1_RX0_IRQHandler>:
 8001704:	e7fe      	b.n	8001704 <CAN1_RX0_IRQHandler>
	...

08001708 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800170c:	4b0e      	ldr	r3, [pc, #56]	; (8001748 <HAL_Init+0x40>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a0d      	ldr	r2, [pc, #52]	; (8001748 <HAL_Init+0x40>)
 8001712:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001716:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001718:	4b0b      	ldr	r3, [pc, #44]	; (8001748 <HAL_Init+0x40>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a0a      	ldr	r2, [pc, #40]	; (8001748 <HAL_Init+0x40>)
 800171e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001722:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001724:	4b08      	ldr	r3, [pc, #32]	; (8001748 <HAL_Init+0x40>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a07      	ldr	r2, [pc, #28]	; (8001748 <HAL_Init+0x40>)
 800172a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800172e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001730:	2003      	movs	r0, #3
 8001732:	f000 fe40 	bl	80023b6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001736:	2000      	movs	r0, #0
 8001738:	f7ff feb8 	bl	80014ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800173c:	f7ff fd64 	bl	8001208 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001740:	2300      	movs	r3, #0
}
 8001742:	4618      	mov	r0, r3
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	40023c00 	.word	0x40023c00

0800174c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001750:	4b06      	ldr	r3, [pc, #24]	; (800176c <HAL_IncTick+0x20>)
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	461a      	mov	r2, r3
 8001756:	4b06      	ldr	r3, [pc, #24]	; (8001770 <HAL_IncTick+0x24>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4413      	add	r3, r2
 800175c:	4a04      	ldr	r2, [pc, #16]	; (8001770 <HAL_IncTick+0x24>)
 800175e:	6013      	str	r3, [r2, #0]
}
 8001760:	bf00      	nop
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	20000008 	.word	0x20000008
 8001770:	2000022c 	.word	0x2000022c

08001774 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  return uwTick;
 8001778:	4b03      	ldr	r3, [pc, #12]	; (8001788 <HAL_GetTick+0x14>)
 800177a:	681b      	ldr	r3, [r3, #0]
}
 800177c:	4618      	mov	r0, r3
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	2000022c 	.word	0x2000022c

0800178c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b084      	sub	sp, #16
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001794:	2300      	movs	r3, #0
 8001796:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d101      	bne.n	80017a2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e033      	b.n	800180a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d109      	bne.n	80017be <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80017aa:	6878      	ldr	r0, [r7, #4]
 80017ac:	f7ff fd54 	bl	8001258 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2200      	movs	r2, #0
 80017b4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2200      	movs	r2, #0
 80017ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c2:	f003 0310 	and.w	r3, r3, #16
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d118      	bne.n	80017fc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ce:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80017d2:	f023 0302 	bic.w	r3, r3, #2
 80017d6:	f043 0202 	orr.w	r2, r3, #2
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	f000 fc36 	bl	8002050 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2200      	movs	r2, #0
 80017e8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ee:	f023 0303 	bic.w	r3, r3, #3
 80017f2:	f043 0201 	orr.w	r2, r3, #1
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	641a      	str	r2, [r3, #64]	; 0x40
 80017fa:	e001      	b.n	8001800 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80017fc:	2301      	movs	r3, #1
 80017fe:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2200      	movs	r2, #0
 8001804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001808:	7bfb      	ldrb	r3, [r7, #15]
}
 800180a:	4618      	mov	r0, r3
 800180c:	3710      	adds	r7, #16
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
	...

08001814 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001814:	b480      	push	{r7}
 8001816:	b085      	sub	sp, #20
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800181c:	2300      	movs	r3, #0
 800181e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001826:	2b01      	cmp	r3, #1
 8001828:	d101      	bne.n	800182e <HAL_ADC_Start+0x1a>
 800182a:	2302      	movs	r3, #2
 800182c:	e0b2      	b.n	8001994 <HAL_ADC_Start+0x180>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2201      	movs	r2, #1
 8001832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	f003 0301 	and.w	r3, r3, #1
 8001840:	2b01      	cmp	r3, #1
 8001842:	d018      	beq.n	8001876 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	689a      	ldr	r2, [r3, #8]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f042 0201 	orr.w	r2, r2, #1
 8001852:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001854:	4b52      	ldr	r3, [pc, #328]	; (80019a0 <HAL_ADC_Start+0x18c>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a52      	ldr	r2, [pc, #328]	; (80019a4 <HAL_ADC_Start+0x190>)
 800185a:	fba2 2303 	umull	r2, r3, r2, r3
 800185e:	0c9a      	lsrs	r2, r3, #18
 8001860:	4613      	mov	r3, r2
 8001862:	005b      	lsls	r3, r3, #1
 8001864:	4413      	add	r3, r2
 8001866:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001868:	e002      	b.n	8001870 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800186a:	68bb      	ldr	r3, [r7, #8]
 800186c:	3b01      	subs	r3, #1
 800186e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d1f9      	bne.n	800186a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	f003 0301 	and.w	r3, r3, #1
 8001880:	2b01      	cmp	r3, #1
 8001882:	d17a      	bne.n	800197a <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001888:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800188c:	f023 0301 	bic.w	r3, r3, #1
 8001890:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d007      	beq.n	80018b6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018aa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80018ae:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80018c2:	d106      	bne.n	80018d2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018c8:	f023 0206 	bic.w	r2, r3, #6
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	645a      	str	r2, [r3, #68]	; 0x44
 80018d0:	e002      	b.n	80018d8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2200      	movs	r2, #0
 80018d6:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2200      	movs	r2, #0
 80018dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80018e0:	4b31      	ldr	r3, [pc, #196]	; (80019a8 <HAL_ADC_Start+0x194>)
 80018e2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80018ec:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	f003 031f 	and.w	r3, r3, #31
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d12a      	bne.n	8001950 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a2b      	ldr	r2, [pc, #172]	; (80019ac <HAL_ADC_Start+0x198>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d015      	beq.n	8001930 <HAL_ADC_Start+0x11c>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a29      	ldr	r2, [pc, #164]	; (80019b0 <HAL_ADC_Start+0x19c>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d105      	bne.n	800191a <HAL_ADC_Start+0x106>
 800190e:	4b26      	ldr	r3, [pc, #152]	; (80019a8 <HAL_ADC_Start+0x194>)
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	f003 031f 	and.w	r3, r3, #31
 8001916:	2b00      	cmp	r3, #0
 8001918:	d00a      	beq.n	8001930 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a25      	ldr	r2, [pc, #148]	; (80019b4 <HAL_ADC_Start+0x1a0>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d136      	bne.n	8001992 <HAL_ADC_Start+0x17e>
 8001924:	4b20      	ldr	r3, [pc, #128]	; (80019a8 <HAL_ADC_Start+0x194>)
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f003 0310 	and.w	r3, r3, #16
 800192c:	2b00      	cmp	r3, #0
 800192e:	d130      	bne.n	8001992 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800193a:	2b00      	cmp	r3, #0
 800193c:	d129      	bne.n	8001992 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	689a      	ldr	r2, [r3, #8]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800194c:	609a      	str	r2, [r3, #8]
 800194e:	e020      	b.n	8001992 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a15      	ldr	r2, [pc, #84]	; (80019ac <HAL_ADC_Start+0x198>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d11b      	bne.n	8001992 <HAL_ADC_Start+0x17e>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001964:	2b00      	cmp	r3, #0
 8001966:	d114      	bne.n	8001992 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	689a      	ldr	r2, [r3, #8]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001976:	609a      	str	r2, [r3, #8]
 8001978:	e00b      	b.n	8001992 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197e:	f043 0210 	orr.w	r2, r3, #16
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800198a:	f043 0201 	orr.w	r2, r3, #1
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001992:	2300      	movs	r3, #0
}
 8001994:	4618      	mov	r0, r3
 8001996:	3714      	adds	r7, #20
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr
 80019a0:	20000000 	.word	0x20000000
 80019a4:	431bde83 	.word	0x431bde83
 80019a8:	40012300 	.word	0x40012300
 80019ac:	40012000 	.word	0x40012000
 80019b0:	40012100 	.word	0x40012100
 80019b4:	40012200 	.word	0x40012200

080019b8 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d101      	bne.n	80019ce <HAL_ADC_Stop+0x16>
 80019ca:	2302      	movs	r3, #2
 80019cc:	e021      	b.n	8001a12 <HAL_ADC_Stop+0x5a>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2201      	movs	r2, #1
 80019d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	689a      	ldr	r2, [r3, #8]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f022 0201 	bic.w	r2, r2, #1
 80019e4:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	f003 0301 	and.w	r3, r3, #1
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d109      	bne.n	8001a08 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80019fc:	f023 0301 	bic.w	r3, r3, #1
 8001a00:	f043 0201 	orr.w	r2, r3, #1
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001a10:	2300      	movs	r3, #0
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	370c      	adds	r7, #12
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr

08001a1e <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001a1e:	b580      	push	{r7, lr}
 8001a20:	b084      	sub	sp, #16
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	6078      	str	r0, [r7, #4]
 8001a26:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a3a:	d113      	bne.n	8001a64 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001a46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a4a:	d10b      	bne.n	8001a64 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a50:	f043 0220 	orr.w	r2, r3, #32
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e063      	b.n	8001b2c <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001a64:	f7ff fe86 	bl	8001774 <HAL_GetTick>
 8001a68:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001a6a:	e021      	b.n	8001ab0 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a72:	d01d      	beq.n	8001ab0 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d007      	beq.n	8001a8a <HAL_ADC_PollForConversion+0x6c>
 8001a7a:	f7ff fe7b 	bl	8001774 <HAL_GetTick>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	1ad3      	subs	r3, r2, r3
 8001a84:	683a      	ldr	r2, [r7, #0]
 8001a86:	429a      	cmp	r2, r3
 8001a88:	d212      	bcs.n	8001ab0 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 0302 	and.w	r3, r3, #2
 8001a94:	2b02      	cmp	r3, #2
 8001a96:	d00b      	beq.n	8001ab0 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9c:	f043 0204 	orr.w	r2, r3, #4
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001aac:	2303      	movs	r3, #3
 8001aae:	e03d      	b.n	8001b2c <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 0302 	and.w	r3, r3, #2
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d1d6      	bne.n	8001a6c <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f06f 0212 	mvn.w	r2, #18
 8001ac6:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001acc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d123      	bne.n	8001b2a <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d11f      	bne.n	8001b2a <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001af0:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d006      	beq.n	8001b06 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d111      	bne.n	8001b2a <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b16:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d105      	bne.n	8001b2a <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b22:	f043 0201 	orr.w	r2, r3, #1
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001b2a:	2300      	movs	r3, #0
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3710      	adds	r7, #16
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}

08001b34 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b084      	sub	sp, #16
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	60fb      	str	r3, [r7, #12]
 8001b40:	2300      	movs	r3, #0
 8001b42:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 0302 	and.w	r3, r3, #2
 8001b4e:	2b02      	cmp	r3, #2
 8001b50:	bf0c      	ite	eq
 8001b52:	2301      	moveq	r3, #1
 8001b54:	2300      	movne	r3, #0
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f003 0320 	and.w	r3, r3, #32
 8001b64:	2b20      	cmp	r3, #32
 8001b66:	bf0c      	ite	eq
 8001b68:	2301      	moveq	r3, #1
 8001b6a:	2300      	movne	r3, #0
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d049      	beq.n	8001c0a <HAL_ADC_IRQHandler+0xd6>
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d046      	beq.n	8001c0a <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b80:	f003 0310 	and.w	r3, r3, #16
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d105      	bne.n	8001b94 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d12b      	bne.n	8001bfa <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d127      	bne.n	8001bfa <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bb0:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d006      	beq.n	8001bc6 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d119      	bne.n	8001bfa <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	685a      	ldr	r2, [r3, #4]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f022 0220 	bic.w	r2, r2, #32
 8001bd4:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bda:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d105      	bne.n	8001bfa <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf2:	f043 0201 	orr.w	r2, r3, #1
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f000 f8e8 	bl	8001dd0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f06f 0212 	mvn.w	r2, #18
 8001c08:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 0304 	and.w	r3, r3, #4
 8001c14:	2b04      	cmp	r3, #4
 8001c16:	bf0c      	ite	eq
 8001c18:	2301      	moveq	r3, #1
 8001c1a:	2300      	movne	r3, #0
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c2a:	2b80      	cmp	r3, #128	; 0x80
 8001c2c:	bf0c      	ite	eq
 8001c2e:	2301      	moveq	r3, #1
 8001c30:	2300      	movne	r3, #0
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d057      	beq.n	8001cec <HAL_ADC_IRQHandler+0x1b8>
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d054      	beq.n	8001cec <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c46:	f003 0310 	and.w	r3, r3, #16
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d105      	bne.n	8001c5a <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c52:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d139      	bne.n	8001cdc <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c6e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d006      	beq.n	8001c84 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d12b      	bne.n	8001cdc <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d124      	bne.n	8001cdc <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d11d      	bne.n	8001cdc <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d119      	bne.n	8001cdc <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	685a      	ldr	r2, [r3, #4]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001cb6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cbc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d105      	bne.n	8001cdc <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd4:	f043 0201 	orr.w	r2, r3, #1
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001cdc:	6878      	ldr	r0, [r7, #4]
 8001cde:	f000 fab3 	bl	8002248 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f06f 020c 	mvn.w	r2, #12
 8001cea:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 0301 	and.w	r3, r3, #1
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	bf0c      	ite	eq
 8001cfa:	2301      	moveq	r3, #1
 8001cfc:	2300      	movne	r3, #0
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d0c:	2b40      	cmp	r3, #64	; 0x40
 8001d0e:	bf0c      	ite	eq
 8001d10:	2301      	moveq	r3, #1
 8001d12:	2300      	movne	r3, #0
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d017      	beq.n	8001d4e <HAL_ADC_IRQHandler+0x21a>
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d014      	beq.n	8001d4e <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 0301 	and.w	r3, r3, #1
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d10d      	bne.n	8001d4e <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d36:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f000 f850 	bl	8001de4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f06f 0201 	mvn.w	r2, #1
 8001d4c:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 0320 	and.w	r3, r3, #32
 8001d58:	2b20      	cmp	r3, #32
 8001d5a:	bf0c      	ite	eq
 8001d5c:	2301      	moveq	r3, #1
 8001d5e:	2300      	movne	r3, #0
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d6e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001d72:	bf0c      	ite	eq
 8001d74:	2301      	moveq	r3, #1
 8001d76:	2300      	movne	r3, #0
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d015      	beq.n	8001dae <HAL_ADC_IRQHandler+0x27a>
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d012      	beq.n	8001dae <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d8c:	f043 0202 	orr.w	r2, r3, #2
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f06f 0220 	mvn.w	r2, #32
 8001d9c:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	f000 f82a 	bl	8001df8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f06f 0220 	mvn.w	r2, #32
 8001dac:	601a      	str	r2, [r3, #0]
  }
}
 8001dae:	bf00      	nop
 8001db0:	3710      	adds	r7, #16
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}

08001db6 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001db6:	b480      	push	{r7}
 8001db8:	b083      	sub	sp, #12
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	370c      	adds	r7, #12
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr

08001dd0 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001dd8:	bf00      	nop
 8001dda:	370c      	adds	r7, #12
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr

08001de4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001dec:	bf00      	nop
 8001dee:	370c      	adds	r7, #12
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr

08001df8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001e00:	bf00      	nop
 8001e02:	370c      	adds	r7, #12
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr

08001e0c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b085      	sub	sp, #20
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
 8001e14:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001e16:	2300      	movs	r3, #0
 8001e18:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d101      	bne.n	8001e28 <HAL_ADC_ConfigChannel+0x1c>
 8001e24:	2302      	movs	r3, #2
 8001e26:	e105      	b.n	8002034 <HAL_ADC_ConfigChannel+0x228>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	2b09      	cmp	r3, #9
 8001e36:	d925      	bls.n	8001e84 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	68d9      	ldr	r1, [r3, #12]
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	b29b      	uxth	r3, r3
 8001e44:	461a      	mov	r2, r3
 8001e46:	4613      	mov	r3, r2
 8001e48:	005b      	lsls	r3, r3, #1
 8001e4a:	4413      	add	r3, r2
 8001e4c:	3b1e      	subs	r3, #30
 8001e4e:	2207      	movs	r2, #7
 8001e50:	fa02 f303 	lsl.w	r3, r2, r3
 8001e54:	43da      	mvns	r2, r3
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	400a      	ands	r2, r1
 8001e5c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	68d9      	ldr	r1, [r3, #12]
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	689a      	ldr	r2, [r3, #8]
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	b29b      	uxth	r3, r3
 8001e6e:	4618      	mov	r0, r3
 8001e70:	4603      	mov	r3, r0
 8001e72:	005b      	lsls	r3, r3, #1
 8001e74:	4403      	add	r3, r0
 8001e76:	3b1e      	subs	r3, #30
 8001e78:	409a      	lsls	r2, r3
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	430a      	orrs	r2, r1
 8001e80:	60da      	str	r2, [r3, #12]
 8001e82:	e022      	b.n	8001eca <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	6919      	ldr	r1, [r3, #16]
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	b29b      	uxth	r3, r3
 8001e90:	461a      	mov	r2, r3
 8001e92:	4613      	mov	r3, r2
 8001e94:	005b      	lsls	r3, r3, #1
 8001e96:	4413      	add	r3, r2
 8001e98:	2207      	movs	r2, #7
 8001e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9e:	43da      	mvns	r2, r3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	400a      	ands	r2, r1
 8001ea6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	6919      	ldr	r1, [r3, #16]
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	689a      	ldr	r2, [r3, #8]
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	b29b      	uxth	r3, r3
 8001eb8:	4618      	mov	r0, r3
 8001eba:	4603      	mov	r3, r0
 8001ebc:	005b      	lsls	r3, r3, #1
 8001ebe:	4403      	add	r3, r0
 8001ec0:	409a      	lsls	r2, r3
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	430a      	orrs	r2, r1
 8001ec8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	2b06      	cmp	r3, #6
 8001ed0:	d824      	bhi.n	8001f1c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	685a      	ldr	r2, [r3, #4]
 8001edc:	4613      	mov	r3, r2
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	4413      	add	r3, r2
 8001ee2:	3b05      	subs	r3, #5
 8001ee4:	221f      	movs	r2, #31
 8001ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eea:	43da      	mvns	r2, r3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	400a      	ands	r2, r1
 8001ef2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	b29b      	uxth	r3, r3
 8001f00:	4618      	mov	r0, r3
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	685a      	ldr	r2, [r3, #4]
 8001f06:	4613      	mov	r3, r2
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	4413      	add	r3, r2
 8001f0c:	3b05      	subs	r3, #5
 8001f0e:	fa00 f203 	lsl.w	r2, r0, r3
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	430a      	orrs	r2, r1
 8001f18:	635a      	str	r2, [r3, #52]	; 0x34
 8001f1a:	e04c      	b.n	8001fb6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	2b0c      	cmp	r3, #12
 8001f22:	d824      	bhi.n	8001f6e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	685a      	ldr	r2, [r3, #4]
 8001f2e:	4613      	mov	r3, r2
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	4413      	add	r3, r2
 8001f34:	3b23      	subs	r3, #35	; 0x23
 8001f36:	221f      	movs	r2, #31
 8001f38:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3c:	43da      	mvns	r2, r3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	400a      	ands	r2, r1
 8001f44:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	b29b      	uxth	r3, r3
 8001f52:	4618      	mov	r0, r3
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	685a      	ldr	r2, [r3, #4]
 8001f58:	4613      	mov	r3, r2
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	4413      	add	r3, r2
 8001f5e:	3b23      	subs	r3, #35	; 0x23
 8001f60:	fa00 f203 	lsl.w	r2, r0, r3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	430a      	orrs	r2, r1
 8001f6a:	631a      	str	r2, [r3, #48]	; 0x30
 8001f6c:	e023      	b.n	8001fb6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	685a      	ldr	r2, [r3, #4]
 8001f78:	4613      	mov	r3, r2
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	4413      	add	r3, r2
 8001f7e:	3b41      	subs	r3, #65	; 0x41
 8001f80:	221f      	movs	r2, #31
 8001f82:	fa02 f303 	lsl.w	r3, r2, r3
 8001f86:	43da      	mvns	r2, r3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	400a      	ands	r2, r1
 8001f8e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	b29b      	uxth	r3, r3
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	685a      	ldr	r2, [r3, #4]
 8001fa2:	4613      	mov	r3, r2
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	4413      	add	r3, r2
 8001fa8:	3b41      	subs	r3, #65	; 0x41
 8001faa:	fa00 f203 	lsl.w	r2, r0, r3
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	430a      	orrs	r2, r1
 8001fb4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001fb6:	4b22      	ldr	r3, [pc, #136]	; (8002040 <HAL_ADC_ConfigChannel+0x234>)
 8001fb8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a21      	ldr	r2, [pc, #132]	; (8002044 <HAL_ADC_ConfigChannel+0x238>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d109      	bne.n	8001fd8 <HAL_ADC_ConfigChannel+0x1cc>
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	2b12      	cmp	r3, #18
 8001fca:	d105      	bne.n	8001fd8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a19      	ldr	r2, [pc, #100]	; (8002044 <HAL_ADC_ConfigChannel+0x238>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d123      	bne.n	800202a <HAL_ADC_ConfigChannel+0x21e>
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	2b10      	cmp	r3, #16
 8001fe8:	d003      	beq.n	8001ff2 <HAL_ADC_ConfigChannel+0x1e6>
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	2b11      	cmp	r3, #17
 8001ff0:	d11b      	bne.n	800202a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	2b10      	cmp	r3, #16
 8002004:	d111      	bne.n	800202a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002006:	4b10      	ldr	r3, [pc, #64]	; (8002048 <HAL_ADC_ConfigChannel+0x23c>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a10      	ldr	r2, [pc, #64]	; (800204c <HAL_ADC_ConfigChannel+0x240>)
 800200c:	fba2 2303 	umull	r2, r3, r2, r3
 8002010:	0c9a      	lsrs	r2, r3, #18
 8002012:	4613      	mov	r3, r2
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	4413      	add	r3, r2
 8002018:	005b      	lsls	r3, r3, #1
 800201a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800201c:	e002      	b.n	8002024 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	3b01      	subs	r3, #1
 8002022:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d1f9      	bne.n	800201e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2200      	movs	r2, #0
 800202e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002032:	2300      	movs	r3, #0
}
 8002034:	4618      	mov	r0, r3
 8002036:	3714      	adds	r7, #20
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr
 8002040:	40012300 	.word	0x40012300
 8002044:	40012000 	.word	0x40012000
 8002048:	20000000 	.word	0x20000000
 800204c:	431bde83 	.word	0x431bde83

08002050 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002050:	b480      	push	{r7}
 8002052:	b085      	sub	sp, #20
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002058:	4b79      	ldr	r3, [pc, #484]	; (8002240 <ADC_Init+0x1f0>)
 800205a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	685a      	ldr	r2, [r3, #4]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	431a      	orrs	r2, r3
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	685a      	ldr	r2, [r3, #4]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002084:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	6859      	ldr	r1, [r3, #4]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	691b      	ldr	r3, [r3, #16]
 8002090:	021a      	lsls	r2, r3, #8
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	430a      	orrs	r2, r1
 8002098:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	685a      	ldr	r2, [r3, #4]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80020a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	6859      	ldr	r1, [r3, #4]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	689a      	ldr	r2, [r3, #8]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	430a      	orrs	r2, r1
 80020ba:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	689a      	ldr	r2, [r3, #8]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	6899      	ldr	r1, [r3, #8]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	68da      	ldr	r2, [r3, #12]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	430a      	orrs	r2, r1
 80020dc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020e2:	4a58      	ldr	r2, [pc, #352]	; (8002244 <ADC_Init+0x1f4>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d022      	beq.n	800212e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	689a      	ldr	r2, [r3, #8]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80020f6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	6899      	ldr	r1, [r3, #8]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	430a      	orrs	r2, r1
 8002108:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	689a      	ldr	r2, [r3, #8]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002118:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	6899      	ldr	r1, [r3, #8]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	430a      	orrs	r2, r1
 800212a:	609a      	str	r2, [r3, #8]
 800212c:	e00f      	b.n	800214e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	689a      	ldr	r2, [r3, #8]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800213c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	689a      	ldr	r2, [r3, #8]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800214c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	689a      	ldr	r2, [r3, #8]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f022 0202 	bic.w	r2, r2, #2
 800215c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	6899      	ldr	r1, [r3, #8]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	7e1b      	ldrb	r3, [r3, #24]
 8002168:	005a      	lsls	r2, r3, #1
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	430a      	orrs	r2, r1
 8002170:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d01b      	beq.n	80021b4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	685a      	ldr	r2, [r3, #4]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800218a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	685a      	ldr	r2, [r3, #4]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800219a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	6859      	ldr	r1, [r3, #4]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a6:	3b01      	subs	r3, #1
 80021a8:	035a      	lsls	r2, r3, #13
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	430a      	orrs	r2, r1
 80021b0:	605a      	str	r2, [r3, #4]
 80021b2:	e007      	b.n	80021c4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	685a      	ldr	r2, [r3, #4]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021c2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80021d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	69db      	ldr	r3, [r3, #28]
 80021de:	3b01      	subs	r3, #1
 80021e0:	051a      	lsls	r2, r3, #20
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	430a      	orrs	r2, r1
 80021e8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	689a      	ldr	r2, [r3, #8]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80021f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	6899      	ldr	r1, [r3, #8]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002206:	025a      	lsls	r2, r3, #9
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	430a      	orrs	r2, r1
 800220e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	689a      	ldr	r2, [r3, #8]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800221e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	6899      	ldr	r1, [r3, #8]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	695b      	ldr	r3, [r3, #20]
 800222a:	029a      	lsls	r2, r3, #10
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	430a      	orrs	r2, r1
 8002232:	609a      	str	r2, [r3, #8]
}
 8002234:	bf00      	nop
 8002236:	3714      	adds	r7, #20
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr
 8002240:	40012300 	.word	0x40012300
 8002244:	0f000001 	.word	0x0f000001

08002248 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002250:	bf00      	nop
 8002252:	370c      	adds	r7, #12
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr

0800225c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800225c:	b480      	push	{r7}
 800225e:	b085      	sub	sp, #20
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	f003 0307 	and.w	r3, r3, #7
 800226a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800226c:	4b0c      	ldr	r3, [pc, #48]	; (80022a0 <__NVIC_SetPriorityGrouping+0x44>)
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002272:	68ba      	ldr	r2, [r7, #8]
 8002274:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002278:	4013      	ands	r3, r2
 800227a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002284:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002288:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800228c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800228e:	4a04      	ldr	r2, [pc, #16]	; (80022a0 <__NVIC_SetPriorityGrouping+0x44>)
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	60d3      	str	r3, [r2, #12]
}
 8002294:	bf00      	nop
 8002296:	3714      	adds	r7, #20
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr
 80022a0:	e000ed00 	.word	0xe000ed00

080022a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022a8:	4b04      	ldr	r3, [pc, #16]	; (80022bc <__NVIC_GetPriorityGrouping+0x18>)
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	0a1b      	lsrs	r3, r3, #8
 80022ae:	f003 0307 	and.w	r3, r3, #7
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr
 80022bc:	e000ed00 	.word	0xe000ed00

080022c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	4603      	mov	r3, r0
 80022c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	db0b      	blt.n	80022ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022d2:	79fb      	ldrb	r3, [r7, #7]
 80022d4:	f003 021f 	and.w	r2, r3, #31
 80022d8:	4907      	ldr	r1, [pc, #28]	; (80022f8 <__NVIC_EnableIRQ+0x38>)
 80022da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022de:	095b      	lsrs	r3, r3, #5
 80022e0:	2001      	movs	r0, #1
 80022e2:	fa00 f202 	lsl.w	r2, r0, r2
 80022e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022ea:	bf00      	nop
 80022ec:	370c      	adds	r7, #12
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop
 80022f8:	e000e100 	.word	0xe000e100

080022fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b083      	sub	sp, #12
 8002300:	af00      	add	r7, sp, #0
 8002302:	4603      	mov	r3, r0
 8002304:	6039      	str	r1, [r7, #0]
 8002306:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002308:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800230c:	2b00      	cmp	r3, #0
 800230e:	db0a      	blt.n	8002326 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	b2da      	uxtb	r2, r3
 8002314:	490c      	ldr	r1, [pc, #48]	; (8002348 <__NVIC_SetPriority+0x4c>)
 8002316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800231a:	0112      	lsls	r2, r2, #4
 800231c:	b2d2      	uxtb	r2, r2
 800231e:	440b      	add	r3, r1
 8002320:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002324:	e00a      	b.n	800233c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	b2da      	uxtb	r2, r3
 800232a:	4908      	ldr	r1, [pc, #32]	; (800234c <__NVIC_SetPriority+0x50>)
 800232c:	79fb      	ldrb	r3, [r7, #7]
 800232e:	f003 030f 	and.w	r3, r3, #15
 8002332:	3b04      	subs	r3, #4
 8002334:	0112      	lsls	r2, r2, #4
 8002336:	b2d2      	uxtb	r2, r2
 8002338:	440b      	add	r3, r1
 800233a:	761a      	strb	r2, [r3, #24]
}
 800233c:	bf00      	nop
 800233e:	370c      	adds	r7, #12
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr
 8002348:	e000e100 	.word	0xe000e100
 800234c:	e000ed00 	.word	0xe000ed00

08002350 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002350:	b480      	push	{r7}
 8002352:	b089      	sub	sp, #36	; 0x24
 8002354:	af00      	add	r7, sp, #0
 8002356:	60f8      	str	r0, [r7, #12]
 8002358:	60b9      	str	r1, [r7, #8]
 800235a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	f003 0307 	and.w	r3, r3, #7
 8002362:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002364:	69fb      	ldr	r3, [r7, #28]
 8002366:	f1c3 0307 	rsb	r3, r3, #7
 800236a:	2b04      	cmp	r3, #4
 800236c:	bf28      	it	cs
 800236e:	2304      	movcs	r3, #4
 8002370:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	3304      	adds	r3, #4
 8002376:	2b06      	cmp	r3, #6
 8002378:	d902      	bls.n	8002380 <NVIC_EncodePriority+0x30>
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	3b03      	subs	r3, #3
 800237e:	e000      	b.n	8002382 <NVIC_EncodePriority+0x32>
 8002380:	2300      	movs	r3, #0
 8002382:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002384:	f04f 32ff 	mov.w	r2, #4294967295
 8002388:	69bb      	ldr	r3, [r7, #24]
 800238a:	fa02 f303 	lsl.w	r3, r2, r3
 800238e:	43da      	mvns	r2, r3
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	401a      	ands	r2, r3
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002398:	f04f 31ff 	mov.w	r1, #4294967295
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	fa01 f303 	lsl.w	r3, r1, r3
 80023a2:	43d9      	mvns	r1, r3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023a8:	4313      	orrs	r3, r2
         );
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3724      	adds	r7, #36	; 0x24
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr

080023b6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023b6:	b580      	push	{r7, lr}
 80023b8:	b082      	sub	sp, #8
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f7ff ff4c 	bl	800225c <__NVIC_SetPriorityGrouping>
}
 80023c4:	bf00      	nop
 80023c6:	3708      	adds	r7, #8
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}

080023cc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b086      	sub	sp, #24
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	4603      	mov	r3, r0
 80023d4:	60b9      	str	r1, [r7, #8]
 80023d6:	607a      	str	r2, [r7, #4]
 80023d8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023da:	2300      	movs	r3, #0
 80023dc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023de:	f7ff ff61 	bl	80022a4 <__NVIC_GetPriorityGrouping>
 80023e2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023e4:	687a      	ldr	r2, [r7, #4]
 80023e6:	68b9      	ldr	r1, [r7, #8]
 80023e8:	6978      	ldr	r0, [r7, #20]
 80023ea:	f7ff ffb1 	bl	8002350 <NVIC_EncodePriority>
 80023ee:	4602      	mov	r2, r0
 80023f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023f4:	4611      	mov	r1, r2
 80023f6:	4618      	mov	r0, r3
 80023f8:	f7ff ff80 	bl	80022fc <__NVIC_SetPriority>
}
 80023fc:	bf00      	nop
 80023fe:	3718      	adds	r7, #24
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}

08002404 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
 800240a:	4603      	mov	r3, r0
 800240c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800240e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002412:	4618      	mov	r0, r3
 8002414:	f7ff ff54 	bl	80022c0 <__NVIC_EnableIRQ>
}
 8002418:	bf00      	nop
 800241a:	3708      	adds	r7, #8
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}

08002420 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002420:	b480      	push	{r7}
 8002422:	b089      	sub	sp, #36	; 0x24
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
 8002428:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800242a:	2300      	movs	r3, #0
 800242c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800242e:	2300      	movs	r3, #0
 8002430:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002432:	2300      	movs	r3, #0
 8002434:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002436:	2300      	movs	r3, #0
 8002438:	61fb      	str	r3, [r7, #28]
 800243a:	e16b      	b.n	8002714 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800243c:	2201      	movs	r2, #1
 800243e:	69fb      	ldr	r3, [r7, #28]
 8002440:	fa02 f303 	lsl.w	r3, r2, r3
 8002444:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	697a      	ldr	r2, [r7, #20]
 800244c:	4013      	ands	r3, r2
 800244e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002450:	693a      	ldr	r2, [r7, #16]
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	429a      	cmp	r2, r3
 8002456:	f040 815a 	bne.w	800270e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	f003 0303 	and.w	r3, r3, #3
 8002462:	2b01      	cmp	r3, #1
 8002464:	d005      	beq.n	8002472 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800246e:	2b02      	cmp	r3, #2
 8002470:	d130      	bne.n	80024d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	005b      	lsls	r3, r3, #1
 800247c:	2203      	movs	r2, #3
 800247e:	fa02 f303 	lsl.w	r3, r2, r3
 8002482:	43db      	mvns	r3, r3
 8002484:	69ba      	ldr	r2, [r7, #24]
 8002486:	4013      	ands	r3, r2
 8002488:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	68da      	ldr	r2, [r3, #12]
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	005b      	lsls	r3, r3, #1
 8002492:	fa02 f303 	lsl.w	r3, r2, r3
 8002496:	69ba      	ldr	r2, [r7, #24]
 8002498:	4313      	orrs	r3, r2
 800249a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	69ba      	ldr	r2, [r7, #24]
 80024a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024a8:	2201      	movs	r2, #1
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	fa02 f303 	lsl.w	r3, r2, r3
 80024b0:	43db      	mvns	r3, r3
 80024b2:	69ba      	ldr	r2, [r7, #24]
 80024b4:	4013      	ands	r3, r2
 80024b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	091b      	lsrs	r3, r3, #4
 80024be:	f003 0201 	and.w	r2, r3, #1
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	fa02 f303 	lsl.w	r3, r2, r3
 80024c8:	69ba      	ldr	r2, [r7, #24]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	69ba      	ldr	r2, [r7, #24]
 80024d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	f003 0303 	and.w	r3, r3, #3
 80024dc:	2b03      	cmp	r3, #3
 80024de:	d017      	beq.n	8002510 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	005b      	lsls	r3, r3, #1
 80024ea:	2203      	movs	r2, #3
 80024ec:	fa02 f303 	lsl.w	r3, r2, r3
 80024f0:	43db      	mvns	r3, r3
 80024f2:	69ba      	ldr	r2, [r7, #24]
 80024f4:	4013      	ands	r3, r2
 80024f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	689a      	ldr	r2, [r3, #8]
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	005b      	lsls	r3, r3, #1
 8002500:	fa02 f303 	lsl.w	r3, r2, r3
 8002504:	69ba      	ldr	r2, [r7, #24]
 8002506:	4313      	orrs	r3, r2
 8002508:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	69ba      	ldr	r2, [r7, #24]
 800250e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f003 0303 	and.w	r3, r3, #3
 8002518:	2b02      	cmp	r3, #2
 800251a:	d123      	bne.n	8002564 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	08da      	lsrs	r2, r3, #3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	3208      	adds	r2, #8
 8002524:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002528:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800252a:	69fb      	ldr	r3, [r7, #28]
 800252c:	f003 0307 	and.w	r3, r3, #7
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	220f      	movs	r2, #15
 8002534:	fa02 f303 	lsl.w	r3, r2, r3
 8002538:	43db      	mvns	r3, r3
 800253a:	69ba      	ldr	r2, [r7, #24]
 800253c:	4013      	ands	r3, r2
 800253e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	691a      	ldr	r2, [r3, #16]
 8002544:	69fb      	ldr	r3, [r7, #28]
 8002546:	f003 0307 	and.w	r3, r3, #7
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	fa02 f303 	lsl.w	r3, r2, r3
 8002550:	69ba      	ldr	r2, [r7, #24]
 8002552:	4313      	orrs	r3, r2
 8002554:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	08da      	lsrs	r2, r3, #3
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	3208      	adds	r2, #8
 800255e:	69b9      	ldr	r1, [r7, #24]
 8002560:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	005b      	lsls	r3, r3, #1
 800256e:	2203      	movs	r2, #3
 8002570:	fa02 f303 	lsl.w	r3, r2, r3
 8002574:	43db      	mvns	r3, r3
 8002576:	69ba      	ldr	r2, [r7, #24]
 8002578:	4013      	ands	r3, r2
 800257a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f003 0203 	and.w	r2, r3, #3
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	005b      	lsls	r3, r3, #1
 8002588:	fa02 f303 	lsl.w	r3, r2, r3
 800258c:	69ba      	ldr	r2, [r7, #24]
 800258e:	4313      	orrs	r3, r2
 8002590:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	69ba      	ldr	r2, [r7, #24]
 8002596:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	f000 80b4 	beq.w	800270e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025a6:	2300      	movs	r3, #0
 80025a8:	60fb      	str	r3, [r7, #12]
 80025aa:	4b60      	ldr	r3, [pc, #384]	; (800272c <HAL_GPIO_Init+0x30c>)
 80025ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ae:	4a5f      	ldr	r2, [pc, #380]	; (800272c <HAL_GPIO_Init+0x30c>)
 80025b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025b4:	6453      	str	r3, [r2, #68]	; 0x44
 80025b6:	4b5d      	ldr	r3, [pc, #372]	; (800272c <HAL_GPIO_Init+0x30c>)
 80025b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025be:	60fb      	str	r3, [r7, #12]
 80025c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025c2:	4a5b      	ldr	r2, [pc, #364]	; (8002730 <HAL_GPIO_Init+0x310>)
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	089b      	lsrs	r3, r3, #2
 80025c8:	3302      	adds	r3, #2
 80025ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	f003 0303 	and.w	r3, r3, #3
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	220f      	movs	r2, #15
 80025da:	fa02 f303 	lsl.w	r3, r2, r3
 80025de:	43db      	mvns	r3, r3
 80025e0:	69ba      	ldr	r2, [r7, #24]
 80025e2:	4013      	ands	r3, r2
 80025e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	4a52      	ldr	r2, [pc, #328]	; (8002734 <HAL_GPIO_Init+0x314>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d02b      	beq.n	8002646 <HAL_GPIO_Init+0x226>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	4a51      	ldr	r2, [pc, #324]	; (8002738 <HAL_GPIO_Init+0x318>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d025      	beq.n	8002642 <HAL_GPIO_Init+0x222>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	4a50      	ldr	r2, [pc, #320]	; (800273c <HAL_GPIO_Init+0x31c>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d01f      	beq.n	800263e <HAL_GPIO_Init+0x21e>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	4a4f      	ldr	r2, [pc, #316]	; (8002740 <HAL_GPIO_Init+0x320>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d019      	beq.n	800263a <HAL_GPIO_Init+0x21a>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	4a4e      	ldr	r2, [pc, #312]	; (8002744 <HAL_GPIO_Init+0x324>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d013      	beq.n	8002636 <HAL_GPIO_Init+0x216>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4a4d      	ldr	r2, [pc, #308]	; (8002748 <HAL_GPIO_Init+0x328>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d00d      	beq.n	8002632 <HAL_GPIO_Init+0x212>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4a4c      	ldr	r2, [pc, #304]	; (800274c <HAL_GPIO_Init+0x32c>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d007      	beq.n	800262e <HAL_GPIO_Init+0x20e>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4a4b      	ldr	r2, [pc, #300]	; (8002750 <HAL_GPIO_Init+0x330>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d101      	bne.n	800262a <HAL_GPIO_Init+0x20a>
 8002626:	2307      	movs	r3, #7
 8002628:	e00e      	b.n	8002648 <HAL_GPIO_Init+0x228>
 800262a:	2308      	movs	r3, #8
 800262c:	e00c      	b.n	8002648 <HAL_GPIO_Init+0x228>
 800262e:	2306      	movs	r3, #6
 8002630:	e00a      	b.n	8002648 <HAL_GPIO_Init+0x228>
 8002632:	2305      	movs	r3, #5
 8002634:	e008      	b.n	8002648 <HAL_GPIO_Init+0x228>
 8002636:	2304      	movs	r3, #4
 8002638:	e006      	b.n	8002648 <HAL_GPIO_Init+0x228>
 800263a:	2303      	movs	r3, #3
 800263c:	e004      	b.n	8002648 <HAL_GPIO_Init+0x228>
 800263e:	2302      	movs	r3, #2
 8002640:	e002      	b.n	8002648 <HAL_GPIO_Init+0x228>
 8002642:	2301      	movs	r3, #1
 8002644:	e000      	b.n	8002648 <HAL_GPIO_Init+0x228>
 8002646:	2300      	movs	r3, #0
 8002648:	69fa      	ldr	r2, [r7, #28]
 800264a:	f002 0203 	and.w	r2, r2, #3
 800264e:	0092      	lsls	r2, r2, #2
 8002650:	4093      	lsls	r3, r2
 8002652:	69ba      	ldr	r2, [r7, #24]
 8002654:	4313      	orrs	r3, r2
 8002656:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002658:	4935      	ldr	r1, [pc, #212]	; (8002730 <HAL_GPIO_Init+0x310>)
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	089b      	lsrs	r3, r3, #2
 800265e:	3302      	adds	r3, #2
 8002660:	69ba      	ldr	r2, [r7, #24]
 8002662:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002666:	4b3b      	ldr	r3, [pc, #236]	; (8002754 <HAL_GPIO_Init+0x334>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	43db      	mvns	r3, r3
 8002670:	69ba      	ldr	r2, [r7, #24]
 8002672:	4013      	ands	r3, r2
 8002674:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d003      	beq.n	800268a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002682:	69ba      	ldr	r2, [r7, #24]
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	4313      	orrs	r3, r2
 8002688:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800268a:	4a32      	ldr	r2, [pc, #200]	; (8002754 <HAL_GPIO_Init+0x334>)
 800268c:	69bb      	ldr	r3, [r7, #24]
 800268e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002690:	4b30      	ldr	r3, [pc, #192]	; (8002754 <HAL_GPIO_Init+0x334>)
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	43db      	mvns	r3, r3
 800269a:	69ba      	ldr	r2, [r7, #24]
 800269c:	4013      	ands	r3, r2
 800269e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d003      	beq.n	80026b4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80026ac:	69ba      	ldr	r2, [r7, #24]
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026b4:	4a27      	ldr	r2, [pc, #156]	; (8002754 <HAL_GPIO_Init+0x334>)
 80026b6:	69bb      	ldr	r3, [r7, #24]
 80026b8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026ba:	4b26      	ldr	r3, [pc, #152]	; (8002754 <HAL_GPIO_Init+0x334>)
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	43db      	mvns	r3, r3
 80026c4:	69ba      	ldr	r2, [r7, #24]
 80026c6:	4013      	ands	r3, r2
 80026c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d003      	beq.n	80026de <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80026d6:	69ba      	ldr	r2, [r7, #24]
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	4313      	orrs	r3, r2
 80026dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026de:	4a1d      	ldr	r2, [pc, #116]	; (8002754 <HAL_GPIO_Init+0x334>)
 80026e0:	69bb      	ldr	r3, [r7, #24]
 80026e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026e4:	4b1b      	ldr	r3, [pc, #108]	; (8002754 <HAL_GPIO_Init+0x334>)
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	43db      	mvns	r3, r3
 80026ee:	69ba      	ldr	r2, [r7, #24]
 80026f0:	4013      	ands	r3, r2
 80026f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d003      	beq.n	8002708 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002700:	69ba      	ldr	r2, [r7, #24]
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	4313      	orrs	r3, r2
 8002706:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002708:	4a12      	ldr	r2, [pc, #72]	; (8002754 <HAL_GPIO_Init+0x334>)
 800270a:	69bb      	ldr	r3, [r7, #24]
 800270c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	3301      	adds	r3, #1
 8002712:	61fb      	str	r3, [r7, #28]
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	2b0f      	cmp	r3, #15
 8002718:	f67f ae90 	bls.w	800243c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800271c:	bf00      	nop
 800271e:	bf00      	nop
 8002720:	3724      	adds	r7, #36	; 0x24
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
 800272a:	bf00      	nop
 800272c:	40023800 	.word	0x40023800
 8002730:	40013800 	.word	0x40013800
 8002734:	40020000 	.word	0x40020000
 8002738:	40020400 	.word	0x40020400
 800273c:	40020800 	.word	0x40020800
 8002740:	40020c00 	.word	0x40020c00
 8002744:	40021000 	.word	0x40021000
 8002748:	40021400 	.word	0x40021400
 800274c:	40021800 	.word	0x40021800
 8002750:	40021c00 	.word	0x40021c00
 8002754:	40013c00 	.word	0x40013c00

08002758 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002758:	b480      	push	{r7}
 800275a:	b085      	sub	sp, #20
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
 8002760:	460b      	mov	r3, r1
 8002762:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	691a      	ldr	r2, [r3, #16]
 8002768:	887b      	ldrh	r3, [r7, #2]
 800276a:	4013      	ands	r3, r2
 800276c:	2b00      	cmp	r3, #0
 800276e:	d002      	beq.n	8002776 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002770:	2301      	movs	r3, #1
 8002772:	73fb      	strb	r3, [r7, #15]
 8002774:	e001      	b.n	800277a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002776:	2300      	movs	r3, #0
 8002778:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800277a:	7bfb      	ldrb	r3, [r7, #15]
}
 800277c:	4618      	mov	r0, r3
 800277e:	3714      	adds	r7, #20
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr

08002788 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b082      	sub	sp, #8
 800278c:	af00      	add	r7, sp, #0
 800278e:	4603      	mov	r3, r0
 8002790:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002792:	4b08      	ldr	r3, [pc, #32]	; (80027b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002794:	695a      	ldr	r2, [r3, #20]
 8002796:	88fb      	ldrh	r3, [r7, #6]
 8002798:	4013      	ands	r3, r2
 800279a:	2b00      	cmp	r3, #0
 800279c:	d006      	beq.n	80027ac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800279e:	4a05      	ldr	r2, [pc, #20]	; (80027b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80027a0:	88fb      	ldrh	r3, [r7, #6]
 80027a2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80027a4:	88fb      	ldrh	r3, [r7, #6]
 80027a6:	4618      	mov	r0, r3
 80027a8:	f7fd fefa 	bl	80005a0 <HAL_GPIO_EXTI_Callback>
  }
}
 80027ac:	bf00      	nop
 80027ae:	3708      	adds	r7, #8
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	40013c00 	.word	0x40013c00

080027b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b084      	sub	sp, #16
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d101      	bne.n	80027ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e12b      	b.n	8002a22 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d106      	bne.n	80027e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2200      	movs	r2, #0
 80027da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f7fe fdbe 	bl	8001360 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2224      	movs	r2, #36	; 0x24
 80027e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f022 0201 	bic.w	r2, r2, #1
 80027fa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800280a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800281a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800281c:	f001 f864 	bl	80038e8 <HAL_RCC_GetPCLK1Freq>
 8002820:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	4a81      	ldr	r2, [pc, #516]	; (8002a2c <HAL_I2C_Init+0x274>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d807      	bhi.n	800283c <HAL_I2C_Init+0x84>
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	4a80      	ldr	r2, [pc, #512]	; (8002a30 <HAL_I2C_Init+0x278>)
 8002830:	4293      	cmp	r3, r2
 8002832:	bf94      	ite	ls
 8002834:	2301      	movls	r3, #1
 8002836:	2300      	movhi	r3, #0
 8002838:	b2db      	uxtb	r3, r3
 800283a:	e006      	b.n	800284a <HAL_I2C_Init+0x92>
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	4a7d      	ldr	r2, [pc, #500]	; (8002a34 <HAL_I2C_Init+0x27c>)
 8002840:	4293      	cmp	r3, r2
 8002842:	bf94      	ite	ls
 8002844:	2301      	movls	r3, #1
 8002846:	2300      	movhi	r3, #0
 8002848:	b2db      	uxtb	r3, r3
 800284a:	2b00      	cmp	r3, #0
 800284c:	d001      	beq.n	8002852 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e0e7      	b.n	8002a22 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	4a78      	ldr	r2, [pc, #480]	; (8002a38 <HAL_I2C_Init+0x280>)
 8002856:	fba2 2303 	umull	r2, r3, r2, r3
 800285a:	0c9b      	lsrs	r3, r3, #18
 800285c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	68ba      	ldr	r2, [r7, #8]
 800286e:	430a      	orrs	r2, r1
 8002870:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	6a1b      	ldr	r3, [r3, #32]
 8002878:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	4a6a      	ldr	r2, [pc, #424]	; (8002a2c <HAL_I2C_Init+0x274>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d802      	bhi.n	800288c <HAL_I2C_Init+0xd4>
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	3301      	adds	r3, #1
 800288a:	e009      	b.n	80028a0 <HAL_I2C_Init+0xe8>
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002892:	fb02 f303 	mul.w	r3, r2, r3
 8002896:	4a69      	ldr	r2, [pc, #420]	; (8002a3c <HAL_I2C_Init+0x284>)
 8002898:	fba2 2303 	umull	r2, r3, r2, r3
 800289c:	099b      	lsrs	r3, r3, #6
 800289e:	3301      	adds	r3, #1
 80028a0:	687a      	ldr	r2, [r7, #4]
 80028a2:	6812      	ldr	r2, [r2, #0]
 80028a4:	430b      	orrs	r3, r1
 80028a6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	69db      	ldr	r3, [r3, #28]
 80028ae:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80028b2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	495c      	ldr	r1, [pc, #368]	; (8002a2c <HAL_I2C_Init+0x274>)
 80028bc:	428b      	cmp	r3, r1
 80028be:	d819      	bhi.n	80028f4 <HAL_I2C_Init+0x13c>
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	1e59      	subs	r1, r3, #1
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	005b      	lsls	r3, r3, #1
 80028ca:	fbb1 f3f3 	udiv	r3, r1, r3
 80028ce:	1c59      	adds	r1, r3, #1
 80028d0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80028d4:	400b      	ands	r3, r1
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d00a      	beq.n	80028f0 <HAL_I2C_Init+0x138>
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	1e59      	subs	r1, r3, #1
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	005b      	lsls	r3, r3, #1
 80028e4:	fbb1 f3f3 	udiv	r3, r1, r3
 80028e8:	3301      	adds	r3, #1
 80028ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028ee:	e051      	b.n	8002994 <HAL_I2C_Init+0x1dc>
 80028f0:	2304      	movs	r3, #4
 80028f2:	e04f      	b.n	8002994 <HAL_I2C_Init+0x1dc>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d111      	bne.n	8002920 <HAL_I2C_Init+0x168>
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	1e58      	subs	r0, r3, #1
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6859      	ldr	r1, [r3, #4]
 8002904:	460b      	mov	r3, r1
 8002906:	005b      	lsls	r3, r3, #1
 8002908:	440b      	add	r3, r1
 800290a:	fbb0 f3f3 	udiv	r3, r0, r3
 800290e:	3301      	adds	r3, #1
 8002910:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002914:	2b00      	cmp	r3, #0
 8002916:	bf0c      	ite	eq
 8002918:	2301      	moveq	r3, #1
 800291a:	2300      	movne	r3, #0
 800291c:	b2db      	uxtb	r3, r3
 800291e:	e012      	b.n	8002946 <HAL_I2C_Init+0x18e>
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	1e58      	subs	r0, r3, #1
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6859      	ldr	r1, [r3, #4]
 8002928:	460b      	mov	r3, r1
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	440b      	add	r3, r1
 800292e:	0099      	lsls	r1, r3, #2
 8002930:	440b      	add	r3, r1
 8002932:	fbb0 f3f3 	udiv	r3, r0, r3
 8002936:	3301      	adds	r3, #1
 8002938:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800293c:	2b00      	cmp	r3, #0
 800293e:	bf0c      	ite	eq
 8002940:	2301      	moveq	r3, #1
 8002942:	2300      	movne	r3, #0
 8002944:	b2db      	uxtb	r3, r3
 8002946:	2b00      	cmp	r3, #0
 8002948:	d001      	beq.n	800294e <HAL_I2C_Init+0x196>
 800294a:	2301      	movs	r3, #1
 800294c:	e022      	b.n	8002994 <HAL_I2C_Init+0x1dc>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d10e      	bne.n	8002974 <HAL_I2C_Init+0x1bc>
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	1e58      	subs	r0, r3, #1
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6859      	ldr	r1, [r3, #4]
 800295e:	460b      	mov	r3, r1
 8002960:	005b      	lsls	r3, r3, #1
 8002962:	440b      	add	r3, r1
 8002964:	fbb0 f3f3 	udiv	r3, r0, r3
 8002968:	3301      	adds	r3, #1
 800296a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800296e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002972:	e00f      	b.n	8002994 <HAL_I2C_Init+0x1dc>
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	1e58      	subs	r0, r3, #1
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6859      	ldr	r1, [r3, #4]
 800297c:	460b      	mov	r3, r1
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	440b      	add	r3, r1
 8002982:	0099      	lsls	r1, r3, #2
 8002984:	440b      	add	r3, r1
 8002986:	fbb0 f3f3 	udiv	r3, r0, r3
 800298a:	3301      	adds	r3, #1
 800298c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002990:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002994:	6879      	ldr	r1, [r7, #4]
 8002996:	6809      	ldr	r1, [r1, #0]
 8002998:	4313      	orrs	r3, r2
 800299a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	69da      	ldr	r2, [r3, #28]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6a1b      	ldr	r3, [r3, #32]
 80029ae:	431a      	orrs	r2, r3
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	430a      	orrs	r2, r1
 80029b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80029c2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	6911      	ldr	r1, [r2, #16]
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	68d2      	ldr	r2, [r2, #12]
 80029ce:	4311      	orrs	r1, r2
 80029d0:	687a      	ldr	r2, [r7, #4]
 80029d2:	6812      	ldr	r2, [r2, #0]
 80029d4:	430b      	orrs	r3, r1
 80029d6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	68db      	ldr	r3, [r3, #12]
 80029de:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	695a      	ldr	r2, [r3, #20]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	699b      	ldr	r3, [r3, #24]
 80029ea:	431a      	orrs	r2, r3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	430a      	orrs	r2, r1
 80029f2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f042 0201 	orr.w	r2, r2, #1
 8002a02:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2200      	movs	r2, #0
 8002a08:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2220      	movs	r2, #32
 8002a0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2200      	movs	r2, #0
 8002a16:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002a20:	2300      	movs	r3, #0
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3710      	adds	r7, #16
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	000186a0 	.word	0x000186a0
 8002a30:	001e847f 	.word	0x001e847f
 8002a34:	003d08ff 	.word	0x003d08ff
 8002a38:	431bde83 	.word	0x431bde83
 8002a3c:	10624dd3 	.word	0x10624dd3

08002a40 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b088      	sub	sp, #32
 8002a44:	af02      	add	r7, sp, #8
 8002a46:	60f8      	str	r0, [r7, #12]
 8002a48:	607a      	str	r2, [r7, #4]
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	460b      	mov	r3, r1
 8002a4e:	817b      	strh	r3, [r7, #10]
 8002a50:	4613      	mov	r3, r2
 8002a52:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002a54:	f7fe fe8e 	bl	8001774 <HAL_GetTick>
 8002a58:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	2b20      	cmp	r3, #32
 8002a64:	f040 80e0 	bne.w	8002c28 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	9300      	str	r3, [sp, #0]
 8002a6c:	2319      	movs	r3, #25
 8002a6e:	2201      	movs	r2, #1
 8002a70:	4970      	ldr	r1, [pc, #448]	; (8002c34 <HAL_I2C_Master_Transmit+0x1f4>)
 8002a72:	68f8      	ldr	r0, [r7, #12]
 8002a74:	f000 f964 	bl	8002d40 <I2C_WaitOnFlagUntilTimeout>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d001      	beq.n	8002a82 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002a7e:	2302      	movs	r3, #2
 8002a80:	e0d3      	b.n	8002c2a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d101      	bne.n	8002a90 <HAL_I2C_Master_Transmit+0x50>
 8002a8c:	2302      	movs	r3, #2
 8002a8e:	e0cc      	b.n	8002c2a <HAL_I2C_Master_Transmit+0x1ea>
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2201      	movs	r2, #1
 8002a94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0301 	and.w	r3, r3, #1
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d007      	beq.n	8002ab6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f042 0201 	orr.w	r2, r2, #1
 8002ab4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ac4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2221      	movs	r2, #33	; 0x21
 8002aca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2210      	movs	r2, #16
 8002ad2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	893a      	ldrh	r2, [r7, #8]
 8002ae6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aec:	b29a      	uxth	r2, r3
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	4a50      	ldr	r2, [pc, #320]	; (8002c38 <HAL_I2C_Master_Transmit+0x1f8>)
 8002af6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002af8:	8979      	ldrh	r1, [r7, #10]
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	6a3a      	ldr	r2, [r7, #32]
 8002afe:	68f8      	ldr	r0, [r7, #12]
 8002b00:	f000 f89c 	bl	8002c3c <I2C_MasterRequestWrite>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d001      	beq.n	8002b0e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e08d      	b.n	8002c2a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b0e:	2300      	movs	r3, #0
 8002b10:	613b      	str	r3, [r7, #16]
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	695b      	ldr	r3, [r3, #20]
 8002b18:	613b      	str	r3, [r7, #16]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	699b      	ldr	r3, [r3, #24]
 8002b20:	613b      	str	r3, [r7, #16]
 8002b22:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002b24:	e066      	b.n	8002bf4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b26:	697a      	ldr	r2, [r7, #20]
 8002b28:	6a39      	ldr	r1, [r7, #32]
 8002b2a:	68f8      	ldr	r0, [r7, #12]
 8002b2c:	f000 f9de 	bl	8002eec <I2C_WaitOnTXEFlagUntilTimeout>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d00d      	beq.n	8002b52 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3a:	2b04      	cmp	r3, #4
 8002b3c:	d107      	bne.n	8002b4e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b4c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e06b      	b.n	8002c2a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b56:	781a      	ldrb	r2, [r3, #0]
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b62:	1c5a      	adds	r2, r3, #1
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b6c:	b29b      	uxth	r3, r3
 8002b6e:	3b01      	subs	r3, #1
 8002b70:	b29a      	uxth	r2, r3
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b7a:	3b01      	subs	r3, #1
 8002b7c:	b29a      	uxth	r2, r3
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	695b      	ldr	r3, [r3, #20]
 8002b88:	f003 0304 	and.w	r3, r3, #4
 8002b8c:	2b04      	cmp	r3, #4
 8002b8e:	d11b      	bne.n	8002bc8 <HAL_I2C_Master_Transmit+0x188>
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d017      	beq.n	8002bc8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b9c:	781a      	ldrb	r2, [r3, #0]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba8:	1c5a      	adds	r2, r3, #1
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	3b01      	subs	r3, #1
 8002bb6:	b29a      	uxth	r2, r3
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bc0:	3b01      	subs	r3, #1
 8002bc2:	b29a      	uxth	r2, r3
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bc8:	697a      	ldr	r2, [r7, #20]
 8002bca:	6a39      	ldr	r1, [r7, #32]
 8002bcc:	68f8      	ldr	r0, [r7, #12]
 8002bce:	f000 f9ce 	bl	8002f6e <I2C_WaitOnBTFFlagUntilTimeout>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d00d      	beq.n	8002bf4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bdc:	2b04      	cmp	r3, #4
 8002bde:	d107      	bne.n	8002bf0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bee:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e01a      	b.n	8002c2a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d194      	bne.n	8002b26 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c0a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2220      	movs	r2, #32
 8002c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2200      	movs	r2, #0
 8002c18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002c24:	2300      	movs	r3, #0
 8002c26:	e000      	b.n	8002c2a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002c28:	2302      	movs	r3, #2
  }
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3718      	adds	r7, #24
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	00100002 	.word	0x00100002
 8002c38:	ffff0000 	.word	0xffff0000

08002c3c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b088      	sub	sp, #32
 8002c40:	af02      	add	r7, sp, #8
 8002c42:	60f8      	str	r0, [r7, #12]
 8002c44:	607a      	str	r2, [r7, #4]
 8002c46:	603b      	str	r3, [r7, #0]
 8002c48:	460b      	mov	r3, r1
 8002c4a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c50:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	2b08      	cmp	r3, #8
 8002c56:	d006      	beq.n	8002c66 <I2C_MasterRequestWrite+0x2a>
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d003      	beq.n	8002c66 <I2C_MasterRequestWrite+0x2a>
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002c64:	d108      	bne.n	8002c78 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c74:	601a      	str	r2, [r3, #0]
 8002c76:	e00b      	b.n	8002c90 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7c:	2b12      	cmp	r3, #18
 8002c7e:	d107      	bne.n	8002c90 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c8e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	9300      	str	r3, [sp, #0]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2200      	movs	r2, #0
 8002c98:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002c9c:	68f8      	ldr	r0, [r7, #12]
 8002c9e:	f000 f84f 	bl	8002d40 <I2C_WaitOnFlagUntilTimeout>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d00d      	beq.n	8002cc4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cb6:	d103      	bne.n	8002cc0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002cbe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002cc0:	2303      	movs	r3, #3
 8002cc2:	e035      	b.n	8002d30 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	691b      	ldr	r3, [r3, #16]
 8002cc8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ccc:	d108      	bne.n	8002ce0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002cce:	897b      	ldrh	r3, [r7, #10]
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002cdc:	611a      	str	r2, [r3, #16]
 8002cde:	e01b      	b.n	8002d18 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002ce0:	897b      	ldrh	r3, [r7, #10]
 8002ce2:	11db      	asrs	r3, r3, #7
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	f003 0306 	and.w	r3, r3, #6
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	f063 030f 	orn	r3, r3, #15
 8002cf0:	b2da      	uxtb	r2, r3
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	687a      	ldr	r2, [r7, #4]
 8002cfc:	490e      	ldr	r1, [pc, #56]	; (8002d38 <I2C_MasterRequestWrite+0xfc>)
 8002cfe:	68f8      	ldr	r0, [r7, #12]
 8002d00:	f000 f875 	bl	8002dee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d04:	4603      	mov	r3, r0
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d001      	beq.n	8002d0e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e010      	b.n	8002d30 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002d0e:	897b      	ldrh	r3, [r7, #10]
 8002d10:	b2da      	uxtb	r2, r3
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	687a      	ldr	r2, [r7, #4]
 8002d1c:	4907      	ldr	r1, [pc, #28]	; (8002d3c <I2C_MasterRequestWrite+0x100>)
 8002d1e:	68f8      	ldr	r0, [r7, #12]
 8002d20:	f000 f865 	bl	8002dee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d001      	beq.n	8002d2e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e000      	b.n	8002d30 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002d2e:	2300      	movs	r3, #0
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	3718      	adds	r7, #24
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}
 8002d38:	00010008 	.word	0x00010008
 8002d3c:	00010002 	.word	0x00010002

08002d40 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b084      	sub	sp, #16
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	60f8      	str	r0, [r7, #12]
 8002d48:	60b9      	str	r1, [r7, #8]
 8002d4a:	603b      	str	r3, [r7, #0]
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d50:	e025      	b.n	8002d9e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d58:	d021      	beq.n	8002d9e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d5a:	f7fe fd0b 	bl	8001774 <HAL_GetTick>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	69bb      	ldr	r3, [r7, #24]
 8002d62:	1ad3      	subs	r3, r2, r3
 8002d64:	683a      	ldr	r2, [r7, #0]
 8002d66:	429a      	cmp	r2, r3
 8002d68:	d302      	bcc.n	8002d70 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d116      	bne.n	8002d9e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2200      	movs	r2, #0
 8002d74:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2220      	movs	r2, #32
 8002d7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2200      	movs	r2, #0
 8002d82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8a:	f043 0220 	orr.w	r2, r3, #32
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2200      	movs	r2, #0
 8002d96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e023      	b.n	8002de6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	0c1b      	lsrs	r3, r3, #16
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d10d      	bne.n	8002dc4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	695b      	ldr	r3, [r3, #20]
 8002dae:	43da      	mvns	r2, r3
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	4013      	ands	r3, r2
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	bf0c      	ite	eq
 8002dba:	2301      	moveq	r3, #1
 8002dbc:	2300      	movne	r3, #0
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	e00c      	b.n	8002dde <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	699b      	ldr	r3, [r3, #24]
 8002dca:	43da      	mvns	r2, r3
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	4013      	ands	r3, r2
 8002dd0:	b29b      	uxth	r3, r3
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	bf0c      	ite	eq
 8002dd6:	2301      	moveq	r3, #1
 8002dd8:	2300      	movne	r3, #0
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	461a      	mov	r2, r3
 8002dde:	79fb      	ldrb	r3, [r7, #7]
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d0b6      	beq.n	8002d52 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002de4:	2300      	movs	r3, #0
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3710      	adds	r7, #16
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}

08002dee <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002dee:	b580      	push	{r7, lr}
 8002df0:	b084      	sub	sp, #16
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	60f8      	str	r0, [r7, #12]
 8002df6:	60b9      	str	r1, [r7, #8]
 8002df8:	607a      	str	r2, [r7, #4]
 8002dfa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002dfc:	e051      	b.n	8002ea2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	695b      	ldr	r3, [r3, #20]
 8002e04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e0c:	d123      	bne.n	8002e56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e1c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002e26:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2220      	movs	r2, #32
 8002e32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e42:	f043 0204 	orr.w	r2, r3, #4
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e046      	b.n	8002ee4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e5c:	d021      	beq.n	8002ea2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e5e:	f7fe fc89 	bl	8001774 <HAL_GetTick>
 8002e62:	4602      	mov	r2, r0
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	1ad3      	subs	r3, r2, r3
 8002e68:	687a      	ldr	r2, [r7, #4]
 8002e6a:	429a      	cmp	r2, r3
 8002e6c:	d302      	bcc.n	8002e74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d116      	bne.n	8002ea2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2200      	movs	r2, #0
 8002e78:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2220      	movs	r2, #32
 8002e7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2200      	movs	r2, #0
 8002e86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8e:	f043 0220 	orr.w	r2, r3, #32
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e020      	b.n	8002ee4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	0c1b      	lsrs	r3, r3, #16
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d10c      	bne.n	8002ec6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	695b      	ldr	r3, [r3, #20]
 8002eb2:	43da      	mvns	r2, r3
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	b29b      	uxth	r3, r3
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	bf14      	ite	ne
 8002ebe:	2301      	movne	r3, #1
 8002ec0:	2300      	moveq	r3, #0
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	e00b      	b.n	8002ede <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	699b      	ldr	r3, [r3, #24]
 8002ecc:	43da      	mvns	r2, r3
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	bf14      	ite	ne
 8002ed8:	2301      	movne	r3, #1
 8002eda:	2300      	moveq	r3, #0
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d18d      	bne.n	8002dfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002ee2:	2300      	movs	r3, #0
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3710      	adds	r7, #16
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}

08002eec <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b084      	sub	sp, #16
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	60f8      	str	r0, [r7, #12]
 8002ef4:	60b9      	str	r1, [r7, #8]
 8002ef6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ef8:	e02d      	b.n	8002f56 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002efa:	68f8      	ldr	r0, [r7, #12]
 8002efc:	f000 f878 	bl	8002ff0 <I2C_IsAcknowledgeFailed>
 8002f00:	4603      	mov	r3, r0
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d001      	beq.n	8002f0a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e02d      	b.n	8002f66 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f10:	d021      	beq.n	8002f56 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f12:	f7fe fc2f 	bl	8001774 <HAL_GetTick>
 8002f16:	4602      	mov	r2, r0
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	1ad3      	subs	r3, r2, r3
 8002f1c:	68ba      	ldr	r2, [r7, #8]
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	d302      	bcc.n	8002f28 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d116      	bne.n	8002f56 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2220      	movs	r2, #32
 8002f32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f42:	f043 0220 	orr.w	r2, r3, #32
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e007      	b.n	8002f66 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	695b      	ldr	r3, [r3, #20]
 8002f5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f60:	2b80      	cmp	r3, #128	; 0x80
 8002f62:	d1ca      	bne.n	8002efa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002f64:	2300      	movs	r3, #0
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3710      	adds	r7, #16
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}

08002f6e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f6e:	b580      	push	{r7, lr}
 8002f70:	b084      	sub	sp, #16
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	60f8      	str	r0, [r7, #12]
 8002f76:	60b9      	str	r1, [r7, #8]
 8002f78:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f7a:	e02d      	b.n	8002fd8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f7c:	68f8      	ldr	r0, [r7, #12]
 8002f7e:	f000 f837 	bl	8002ff0 <I2C_IsAcknowledgeFailed>
 8002f82:	4603      	mov	r3, r0
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d001      	beq.n	8002f8c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e02d      	b.n	8002fe8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f92:	d021      	beq.n	8002fd8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f94:	f7fe fbee 	bl	8001774 <HAL_GetTick>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	68ba      	ldr	r2, [r7, #8]
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d302      	bcc.n	8002faa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d116      	bne.n	8002fd8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2200      	movs	r2, #0
 8002fae:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2220      	movs	r2, #32
 8002fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc4:	f043 0220 	orr.w	r2, r3, #32
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e007      	b.n	8002fe8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	695b      	ldr	r3, [r3, #20]
 8002fde:	f003 0304 	and.w	r3, r3, #4
 8002fe2:	2b04      	cmp	r3, #4
 8002fe4:	d1ca      	bne.n	8002f7c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002fe6:	2300      	movs	r3, #0
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	3710      	adds	r7, #16
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}

08002ff0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b083      	sub	sp, #12
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	695b      	ldr	r3, [r3, #20]
 8002ffe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003002:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003006:	d11b      	bne.n	8003040 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003010:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2200      	movs	r2, #0
 8003016:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2220      	movs	r2, #32
 800301c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2200      	movs	r2, #0
 8003024:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302c:	f043 0204 	orr.w	r2, r3, #4
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2200      	movs	r2, #0
 8003038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e000      	b.n	8003042 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003040:	2300      	movs	r3, #0
}
 8003042:	4618      	mov	r0, r3
 8003044:	370c      	adds	r7, #12
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr
	...

08003050 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b086      	sub	sp, #24
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d101      	bne.n	8003062 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e264      	b.n	800352c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 0301 	and.w	r3, r3, #1
 800306a:	2b00      	cmp	r3, #0
 800306c:	d075      	beq.n	800315a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800306e:	4ba3      	ldr	r3, [pc, #652]	; (80032fc <HAL_RCC_OscConfig+0x2ac>)
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	f003 030c 	and.w	r3, r3, #12
 8003076:	2b04      	cmp	r3, #4
 8003078:	d00c      	beq.n	8003094 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800307a:	4ba0      	ldr	r3, [pc, #640]	; (80032fc <HAL_RCC_OscConfig+0x2ac>)
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003082:	2b08      	cmp	r3, #8
 8003084:	d112      	bne.n	80030ac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003086:	4b9d      	ldr	r3, [pc, #628]	; (80032fc <HAL_RCC_OscConfig+0x2ac>)
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800308e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003092:	d10b      	bne.n	80030ac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003094:	4b99      	ldr	r3, [pc, #612]	; (80032fc <HAL_RCC_OscConfig+0x2ac>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800309c:	2b00      	cmp	r3, #0
 800309e:	d05b      	beq.n	8003158 <HAL_RCC_OscConfig+0x108>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d157      	bne.n	8003158 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	e23f      	b.n	800352c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030b4:	d106      	bne.n	80030c4 <HAL_RCC_OscConfig+0x74>
 80030b6:	4b91      	ldr	r3, [pc, #580]	; (80032fc <HAL_RCC_OscConfig+0x2ac>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a90      	ldr	r2, [pc, #576]	; (80032fc <HAL_RCC_OscConfig+0x2ac>)
 80030bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030c0:	6013      	str	r3, [r2, #0]
 80030c2:	e01d      	b.n	8003100 <HAL_RCC_OscConfig+0xb0>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030cc:	d10c      	bne.n	80030e8 <HAL_RCC_OscConfig+0x98>
 80030ce:	4b8b      	ldr	r3, [pc, #556]	; (80032fc <HAL_RCC_OscConfig+0x2ac>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a8a      	ldr	r2, [pc, #552]	; (80032fc <HAL_RCC_OscConfig+0x2ac>)
 80030d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030d8:	6013      	str	r3, [r2, #0]
 80030da:	4b88      	ldr	r3, [pc, #544]	; (80032fc <HAL_RCC_OscConfig+0x2ac>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a87      	ldr	r2, [pc, #540]	; (80032fc <HAL_RCC_OscConfig+0x2ac>)
 80030e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030e4:	6013      	str	r3, [r2, #0]
 80030e6:	e00b      	b.n	8003100 <HAL_RCC_OscConfig+0xb0>
 80030e8:	4b84      	ldr	r3, [pc, #528]	; (80032fc <HAL_RCC_OscConfig+0x2ac>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a83      	ldr	r2, [pc, #524]	; (80032fc <HAL_RCC_OscConfig+0x2ac>)
 80030ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030f2:	6013      	str	r3, [r2, #0]
 80030f4:	4b81      	ldr	r3, [pc, #516]	; (80032fc <HAL_RCC_OscConfig+0x2ac>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a80      	ldr	r2, [pc, #512]	; (80032fc <HAL_RCC_OscConfig+0x2ac>)
 80030fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d013      	beq.n	8003130 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003108:	f7fe fb34 	bl	8001774 <HAL_GetTick>
 800310c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800310e:	e008      	b.n	8003122 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003110:	f7fe fb30 	bl	8001774 <HAL_GetTick>
 8003114:	4602      	mov	r2, r0
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	2b64      	cmp	r3, #100	; 0x64
 800311c:	d901      	bls.n	8003122 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800311e:	2303      	movs	r3, #3
 8003120:	e204      	b.n	800352c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003122:	4b76      	ldr	r3, [pc, #472]	; (80032fc <HAL_RCC_OscConfig+0x2ac>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d0f0      	beq.n	8003110 <HAL_RCC_OscConfig+0xc0>
 800312e:	e014      	b.n	800315a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003130:	f7fe fb20 	bl	8001774 <HAL_GetTick>
 8003134:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003136:	e008      	b.n	800314a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003138:	f7fe fb1c 	bl	8001774 <HAL_GetTick>
 800313c:	4602      	mov	r2, r0
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	2b64      	cmp	r3, #100	; 0x64
 8003144:	d901      	bls.n	800314a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003146:	2303      	movs	r3, #3
 8003148:	e1f0      	b.n	800352c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800314a:	4b6c      	ldr	r3, [pc, #432]	; (80032fc <HAL_RCC_OscConfig+0x2ac>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d1f0      	bne.n	8003138 <HAL_RCC_OscConfig+0xe8>
 8003156:	e000      	b.n	800315a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003158:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0302 	and.w	r3, r3, #2
 8003162:	2b00      	cmp	r3, #0
 8003164:	d063      	beq.n	800322e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003166:	4b65      	ldr	r3, [pc, #404]	; (80032fc <HAL_RCC_OscConfig+0x2ac>)
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	f003 030c 	and.w	r3, r3, #12
 800316e:	2b00      	cmp	r3, #0
 8003170:	d00b      	beq.n	800318a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003172:	4b62      	ldr	r3, [pc, #392]	; (80032fc <HAL_RCC_OscConfig+0x2ac>)
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800317a:	2b08      	cmp	r3, #8
 800317c:	d11c      	bne.n	80031b8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800317e:	4b5f      	ldr	r3, [pc, #380]	; (80032fc <HAL_RCC_OscConfig+0x2ac>)
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d116      	bne.n	80031b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800318a:	4b5c      	ldr	r3, [pc, #368]	; (80032fc <HAL_RCC_OscConfig+0x2ac>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 0302 	and.w	r3, r3, #2
 8003192:	2b00      	cmp	r3, #0
 8003194:	d005      	beq.n	80031a2 <HAL_RCC_OscConfig+0x152>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	68db      	ldr	r3, [r3, #12]
 800319a:	2b01      	cmp	r3, #1
 800319c:	d001      	beq.n	80031a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	e1c4      	b.n	800352c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031a2:	4b56      	ldr	r3, [pc, #344]	; (80032fc <HAL_RCC_OscConfig+0x2ac>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	691b      	ldr	r3, [r3, #16]
 80031ae:	00db      	lsls	r3, r3, #3
 80031b0:	4952      	ldr	r1, [pc, #328]	; (80032fc <HAL_RCC_OscConfig+0x2ac>)
 80031b2:	4313      	orrs	r3, r2
 80031b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031b6:	e03a      	b.n	800322e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d020      	beq.n	8003202 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031c0:	4b4f      	ldr	r3, [pc, #316]	; (8003300 <HAL_RCC_OscConfig+0x2b0>)
 80031c2:	2201      	movs	r2, #1
 80031c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031c6:	f7fe fad5 	bl	8001774 <HAL_GetTick>
 80031ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031cc:	e008      	b.n	80031e0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031ce:	f7fe fad1 	bl	8001774 <HAL_GetTick>
 80031d2:	4602      	mov	r2, r0
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	1ad3      	subs	r3, r2, r3
 80031d8:	2b02      	cmp	r3, #2
 80031da:	d901      	bls.n	80031e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80031dc:	2303      	movs	r3, #3
 80031de:	e1a5      	b.n	800352c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031e0:	4b46      	ldr	r3, [pc, #280]	; (80032fc <HAL_RCC_OscConfig+0x2ac>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 0302 	and.w	r3, r3, #2
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d0f0      	beq.n	80031ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031ec:	4b43      	ldr	r3, [pc, #268]	; (80032fc <HAL_RCC_OscConfig+0x2ac>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	691b      	ldr	r3, [r3, #16]
 80031f8:	00db      	lsls	r3, r3, #3
 80031fa:	4940      	ldr	r1, [pc, #256]	; (80032fc <HAL_RCC_OscConfig+0x2ac>)
 80031fc:	4313      	orrs	r3, r2
 80031fe:	600b      	str	r3, [r1, #0]
 8003200:	e015      	b.n	800322e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003202:	4b3f      	ldr	r3, [pc, #252]	; (8003300 <HAL_RCC_OscConfig+0x2b0>)
 8003204:	2200      	movs	r2, #0
 8003206:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003208:	f7fe fab4 	bl	8001774 <HAL_GetTick>
 800320c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800320e:	e008      	b.n	8003222 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003210:	f7fe fab0 	bl	8001774 <HAL_GetTick>
 8003214:	4602      	mov	r2, r0
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	2b02      	cmp	r3, #2
 800321c:	d901      	bls.n	8003222 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	e184      	b.n	800352c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003222:	4b36      	ldr	r3, [pc, #216]	; (80032fc <HAL_RCC_OscConfig+0x2ac>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0302 	and.w	r3, r3, #2
 800322a:	2b00      	cmp	r3, #0
 800322c:	d1f0      	bne.n	8003210 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 0308 	and.w	r3, r3, #8
 8003236:	2b00      	cmp	r3, #0
 8003238:	d030      	beq.n	800329c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	695b      	ldr	r3, [r3, #20]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d016      	beq.n	8003270 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003242:	4b30      	ldr	r3, [pc, #192]	; (8003304 <HAL_RCC_OscConfig+0x2b4>)
 8003244:	2201      	movs	r2, #1
 8003246:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003248:	f7fe fa94 	bl	8001774 <HAL_GetTick>
 800324c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800324e:	e008      	b.n	8003262 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003250:	f7fe fa90 	bl	8001774 <HAL_GetTick>
 8003254:	4602      	mov	r2, r0
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	2b02      	cmp	r3, #2
 800325c:	d901      	bls.n	8003262 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800325e:	2303      	movs	r3, #3
 8003260:	e164      	b.n	800352c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003262:	4b26      	ldr	r3, [pc, #152]	; (80032fc <HAL_RCC_OscConfig+0x2ac>)
 8003264:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003266:	f003 0302 	and.w	r3, r3, #2
 800326a:	2b00      	cmp	r3, #0
 800326c:	d0f0      	beq.n	8003250 <HAL_RCC_OscConfig+0x200>
 800326e:	e015      	b.n	800329c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003270:	4b24      	ldr	r3, [pc, #144]	; (8003304 <HAL_RCC_OscConfig+0x2b4>)
 8003272:	2200      	movs	r2, #0
 8003274:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003276:	f7fe fa7d 	bl	8001774 <HAL_GetTick>
 800327a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800327c:	e008      	b.n	8003290 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800327e:	f7fe fa79 	bl	8001774 <HAL_GetTick>
 8003282:	4602      	mov	r2, r0
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	1ad3      	subs	r3, r2, r3
 8003288:	2b02      	cmp	r3, #2
 800328a:	d901      	bls.n	8003290 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800328c:	2303      	movs	r3, #3
 800328e:	e14d      	b.n	800352c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003290:	4b1a      	ldr	r3, [pc, #104]	; (80032fc <HAL_RCC_OscConfig+0x2ac>)
 8003292:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003294:	f003 0302 	and.w	r3, r3, #2
 8003298:	2b00      	cmp	r3, #0
 800329a:	d1f0      	bne.n	800327e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 0304 	and.w	r3, r3, #4
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	f000 80a0 	beq.w	80033ea <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032aa:	2300      	movs	r3, #0
 80032ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032ae:	4b13      	ldr	r3, [pc, #76]	; (80032fc <HAL_RCC_OscConfig+0x2ac>)
 80032b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d10f      	bne.n	80032da <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032ba:	2300      	movs	r3, #0
 80032bc:	60bb      	str	r3, [r7, #8]
 80032be:	4b0f      	ldr	r3, [pc, #60]	; (80032fc <HAL_RCC_OscConfig+0x2ac>)
 80032c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c2:	4a0e      	ldr	r2, [pc, #56]	; (80032fc <HAL_RCC_OscConfig+0x2ac>)
 80032c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032c8:	6413      	str	r3, [r2, #64]	; 0x40
 80032ca:	4b0c      	ldr	r3, [pc, #48]	; (80032fc <HAL_RCC_OscConfig+0x2ac>)
 80032cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032d2:	60bb      	str	r3, [r7, #8]
 80032d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032d6:	2301      	movs	r3, #1
 80032d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032da:	4b0b      	ldr	r3, [pc, #44]	; (8003308 <HAL_RCC_OscConfig+0x2b8>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d121      	bne.n	800332a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032e6:	4b08      	ldr	r3, [pc, #32]	; (8003308 <HAL_RCC_OscConfig+0x2b8>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a07      	ldr	r2, [pc, #28]	; (8003308 <HAL_RCC_OscConfig+0x2b8>)
 80032ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032f2:	f7fe fa3f 	bl	8001774 <HAL_GetTick>
 80032f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032f8:	e011      	b.n	800331e <HAL_RCC_OscConfig+0x2ce>
 80032fa:	bf00      	nop
 80032fc:	40023800 	.word	0x40023800
 8003300:	42470000 	.word	0x42470000
 8003304:	42470e80 	.word	0x42470e80
 8003308:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800330c:	f7fe fa32 	bl	8001774 <HAL_GetTick>
 8003310:	4602      	mov	r2, r0
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	2b02      	cmp	r3, #2
 8003318:	d901      	bls.n	800331e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800331a:	2303      	movs	r3, #3
 800331c:	e106      	b.n	800352c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800331e:	4b85      	ldr	r3, [pc, #532]	; (8003534 <HAL_RCC_OscConfig+0x4e4>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003326:	2b00      	cmp	r3, #0
 8003328:	d0f0      	beq.n	800330c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	2b01      	cmp	r3, #1
 8003330:	d106      	bne.n	8003340 <HAL_RCC_OscConfig+0x2f0>
 8003332:	4b81      	ldr	r3, [pc, #516]	; (8003538 <HAL_RCC_OscConfig+0x4e8>)
 8003334:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003336:	4a80      	ldr	r2, [pc, #512]	; (8003538 <HAL_RCC_OscConfig+0x4e8>)
 8003338:	f043 0301 	orr.w	r3, r3, #1
 800333c:	6713      	str	r3, [r2, #112]	; 0x70
 800333e:	e01c      	b.n	800337a <HAL_RCC_OscConfig+0x32a>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	2b05      	cmp	r3, #5
 8003346:	d10c      	bne.n	8003362 <HAL_RCC_OscConfig+0x312>
 8003348:	4b7b      	ldr	r3, [pc, #492]	; (8003538 <HAL_RCC_OscConfig+0x4e8>)
 800334a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800334c:	4a7a      	ldr	r2, [pc, #488]	; (8003538 <HAL_RCC_OscConfig+0x4e8>)
 800334e:	f043 0304 	orr.w	r3, r3, #4
 8003352:	6713      	str	r3, [r2, #112]	; 0x70
 8003354:	4b78      	ldr	r3, [pc, #480]	; (8003538 <HAL_RCC_OscConfig+0x4e8>)
 8003356:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003358:	4a77      	ldr	r2, [pc, #476]	; (8003538 <HAL_RCC_OscConfig+0x4e8>)
 800335a:	f043 0301 	orr.w	r3, r3, #1
 800335e:	6713      	str	r3, [r2, #112]	; 0x70
 8003360:	e00b      	b.n	800337a <HAL_RCC_OscConfig+0x32a>
 8003362:	4b75      	ldr	r3, [pc, #468]	; (8003538 <HAL_RCC_OscConfig+0x4e8>)
 8003364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003366:	4a74      	ldr	r2, [pc, #464]	; (8003538 <HAL_RCC_OscConfig+0x4e8>)
 8003368:	f023 0301 	bic.w	r3, r3, #1
 800336c:	6713      	str	r3, [r2, #112]	; 0x70
 800336e:	4b72      	ldr	r3, [pc, #456]	; (8003538 <HAL_RCC_OscConfig+0x4e8>)
 8003370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003372:	4a71      	ldr	r2, [pc, #452]	; (8003538 <HAL_RCC_OscConfig+0x4e8>)
 8003374:	f023 0304 	bic.w	r3, r3, #4
 8003378:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d015      	beq.n	80033ae <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003382:	f7fe f9f7 	bl	8001774 <HAL_GetTick>
 8003386:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003388:	e00a      	b.n	80033a0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800338a:	f7fe f9f3 	bl	8001774 <HAL_GetTick>
 800338e:	4602      	mov	r2, r0
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	1ad3      	subs	r3, r2, r3
 8003394:	f241 3288 	movw	r2, #5000	; 0x1388
 8003398:	4293      	cmp	r3, r2
 800339a:	d901      	bls.n	80033a0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800339c:	2303      	movs	r3, #3
 800339e:	e0c5      	b.n	800352c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033a0:	4b65      	ldr	r3, [pc, #404]	; (8003538 <HAL_RCC_OscConfig+0x4e8>)
 80033a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033a4:	f003 0302 	and.w	r3, r3, #2
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d0ee      	beq.n	800338a <HAL_RCC_OscConfig+0x33a>
 80033ac:	e014      	b.n	80033d8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033ae:	f7fe f9e1 	bl	8001774 <HAL_GetTick>
 80033b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033b4:	e00a      	b.n	80033cc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033b6:	f7fe f9dd 	bl	8001774 <HAL_GetTick>
 80033ba:	4602      	mov	r2, r0
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	1ad3      	subs	r3, r2, r3
 80033c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d901      	bls.n	80033cc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80033c8:	2303      	movs	r3, #3
 80033ca:	e0af      	b.n	800352c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033cc:	4b5a      	ldr	r3, [pc, #360]	; (8003538 <HAL_RCC_OscConfig+0x4e8>)
 80033ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033d0:	f003 0302 	and.w	r3, r3, #2
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d1ee      	bne.n	80033b6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80033d8:	7dfb      	ldrb	r3, [r7, #23]
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d105      	bne.n	80033ea <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033de:	4b56      	ldr	r3, [pc, #344]	; (8003538 <HAL_RCC_OscConfig+0x4e8>)
 80033e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e2:	4a55      	ldr	r2, [pc, #340]	; (8003538 <HAL_RCC_OscConfig+0x4e8>)
 80033e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033e8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	699b      	ldr	r3, [r3, #24]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	f000 809b 	beq.w	800352a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80033f4:	4b50      	ldr	r3, [pc, #320]	; (8003538 <HAL_RCC_OscConfig+0x4e8>)
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	f003 030c 	and.w	r3, r3, #12
 80033fc:	2b08      	cmp	r3, #8
 80033fe:	d05c      	beq.n	80034ba <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	699b      	ldr	r3, [r3, #24]
 8003404:	2b02      	cmp	r3, #2
 8003406:	d141      	bne.n	800348c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003408:	4b4c      	ldr	r3, [pc, #304]	; (800353c <HAL_RCC_OscConfig+0x4ec>)
 800340a:	2200      	movs	r2, #0
 800340c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800340e:	f7fe f9b1 	bl	8001774 <HAL_GetTick>
 8003412:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003414:	e008      	b.n	8003428 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003416:	f7fe f9ad 	bl	8001774 <HAL_GetTick>
 800341a:	4602      	mov	r2, r0
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	1ad3      	subs	r3, r2, r3
 8003420:	2b02      	cmp	r3, #2
 8003422:	d901      	bls.n	8003428 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003424:	2303      	movs	r3, #3
 8003426:	e081      	b.n	800352c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003428:	4b43      	ldr	r3, [pc, #268]	; (8003538 <HAL_RCC_OscConfig+0x4e8>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003430:	2b00      	cmp	r3, #0
 8003432:	d1f0      	bne.n	8003416 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	69da      	ldr	r2, [r3, #28]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6a1b      	ldr	r3, [r3, #32]
 800343c:	431a      	orrs	r2, r3
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003442:	019b      	lsls	r3, r3, #6
 8003444:	431a      	orrs	r2, r3
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800344a:	085b      	lsrs	r3, r3, #1
 800344c:	3b01      	subs	r3, #1
 800344e:	041b      	lsls	r3, r3, #16
 8003450:	431a      	orrs	r2, r3
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003456:	061b      	lsls	r3, r3, #24
 8003458:	4937      	ldr	r1, [pc, #220]	; (8003538 <HAL_RCC_OscConfig+0x4e8>)
 800345a:	4313      	orrs	r3, r2
 800345c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800345e:	4b37      	ldr	r3, [pc, #220]	; (800353c <HAL_RCC_OscConfig+0x4ec>)
 8003460:	2201      	movs	r2, #1
 8003462:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003464:	f7fe f986 	bl	8001774 <HAL_GetTick>
 8003468:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800346a:	e008      	b.n	800347e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800346c:	f7fe f982 	bl	8001774 <HAL_GetTick>
 8003470:	4602      	mov	r2, r0
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	2b02      	cmp	r3, #2
 8003478:	d901      	bls.n	800347e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800347a:	2303      	movs	r3, #3
 800347c:	e056      	b.n	800352c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800347e:	4b2e      	ldr	r3, [pc, #184]	; (8003538 <HAL_RCC_OscConfig+0x4e8>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d0f0      	beq.n	800346c <HAL_RCC_OscConfig+0x41c>
 800348a:	e04e      	b.n	800352a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800348c:	4b2b      	ldr	r3, [pc, #172]	; (800353c <HAL_RCC_OscConfig+0x4ec>)
 800348e:	2200      	movs	r2, #0
 8003490:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003492:	f7fe f96f 	bl	8001774 <HAL_GetTick>
 8003496:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003498:	e008      	b.n	80034ac <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800349a:	f7fe f96b 	bl	8001774 <HAL_GetTick>
 800349e:	4602      	mov	r2, r0
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	1ad3      	subs	r3, r2, r3
 80034a4:	2b02      	cmp	r3, #2
 80034a6:	d901      	bls.n	80034ac <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80034a8:	2303      	movs	r3, #3
 80034aa:	e03f      	b.n	800352c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034ac:	4b22      	ldr	r3, [pc, #136]	; (8003538 <HAL_RCC_OscConfig+0x4e8>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d1f0      	bne.n	800349a <HAL_RCC_OscConfig+0x44a>
 80034b8:	e037      	b.n	800352a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	699b      	ldr	r3, [r3, #24]
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d101      	bne.n	80034c6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e032      	b.n	800352c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80034c6:	4b1c      	ldr	r3, [pc, #112]	; (8003538 <HAL_RCC_OscConfig+0x4e8>)
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	699b      	ldr	r3, [r3, #24]
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d028      	beq.n	8003526 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034de:	429a      	cmp	r2, r3
 80034e0:	d121      	bne.n	8003526 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d11a      	bne.n	8003526 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034f0:	68fa      	ldr	r2, [r7, #12]
 80034f2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80034f6:	4013      	ands	r3, r2
 80034f8:	687a      	ldr	r2, [r7, #4]
 80034fa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80034fc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034fe:	4293      	cmp	r3, r2
 8003500:	d111      	bne.n	8003526 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800350c:	085b      	lsrs	r3, r3, #1
 800350e:	3b01      	subs	r3, #1
 8003510:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003512:	429a      	cmp	r2, r3
 8003514:	d107      	bne.n	8003526 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003520:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003522:	429a      	cmp	r2, r3
 8003524:	d001      	beq.n	800352a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e000      	b.n	800352c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800352a:	2300      	movs	r3, #0
}
 800352c:	4618      	mov	r0, r3
 800352e:	3718      	adds	r7, #24
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}
 8003534:	40007000 	.word	0x40007000
 8003538:	40023800 	.word	0x40023800
 800353c:	42470060 	.word	0x42470060

08003540 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b084      	sub	sp, #16
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
 8003548:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d101      	bne.n	8003554 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	e0cc      	b.n	80036ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003554:	4b68      	ldr	r3, [pc, #416]	; (80036f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 0307 	and.w	r3, r3, #7
 800355c:	683a      	ldr	r2, [r7, #0]
 800355e:	429a      	cmp	r2, r3
 8003560:	d90c      	bls.n	800357c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003562:	4b65      	ldr	r3, [pc, #404]	; (80036f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003564:	683a      	ldr	r2, [r7, #0]
 8003566:	b2d2      	uxtb	r2, r2
 8003568:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800356a:	4b63      	ldr	r3, [pc, #396]	; (80036f8 <HAL_RCC_ClockConfig+0x1b8>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0307 	and.w	r3, r3, #7
 8003572:	683a      	ldr	r2, [r7, #0]
 8003574:	429a      	cmp	r2, r3
 8003576:	d001      	beq.n	800357c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	e0b8      	b.n	80036ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 0302 	and.w	r3, r3, #2
 8003584:	2b00      	cmp	r3, #0
 8003586:	d020      	beq.n	80035ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 0304 	and.w	r3, r3, #4
 8003590:	2b00      	cmp	r3, #0
 8003592:	d005      	beq.n	80035a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003594:	4b59      	ldr	r3, [pc, #356]	; (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	4a58      	ldr	r2, [pc, #352]	; (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 800359a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800359e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 0308 	and.w	r3, r3, #8
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d005      	beq.n	80035b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035ac:	4b53      	ldr	r3, [pc, #332]	; (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	4a52      	ldr	r2, [pc, #328]	; (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 80035b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80035b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035b8:	4b50      	ldr	r3, [pc, #320]	; (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	494d      	ldr	r1, [pc, #308]	; (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 80035c6:	4313      	orrs	r3, r2
 80035c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0301 	and.w	r3, r3, #1
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d044      	beq.n	8003660 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d107      	bne.n	80035ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035de:	4b47      	ldr	r3, [pc, #284]	; (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d119      	bne.n	800361e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e07f      	b.n	80036ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	2b02      	cmp	r3, #2
 80035f4:	d003      	beq.n	80035fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035fa:	2b03      	cmp	r3, #3
 80035fc:	d107      	bne.n	800360e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035fe:	4b3f      	ldr	r3, [pc, #252]	; (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003606:	2b00      	cmp	r3, #0
 8003608:	d109      	bne.n	800361e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e06f      	b.n	80036ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800360e:	4b3b      	ldr	r3, [pc, #236]	; (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0302 	and.w	r3, r3, #2
 8003616:	2b00      	cmp	r3, #0
 8003618:	d101      	bne.n	800361e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e067      	b.n	80036ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800361e:	4b37      	ldr	r3, [pc, #220]	; (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	f023 0203 	bic.w	r2, r3, #3
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	4934      	ldr	r1, [pc, #208]	; (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 800362c:	4313      	orrs	r3, r2
 800362e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003630:	f7fe f8a0 	bl	8001774 <HAL_GetTick>
 8003634:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003636:	e00a      	b.n	800364e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003638:	f7fe f89c 	bl	8001774 <HAL_GetTick>
 800363c:	4602      	mov	r2, r0
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	1ad3      	subs	r3, r2, r3
 8003642:	f241 3288 	movw	r2, #5000	; 0x1388
 8003646:	4293      	cmp	r3, r2
 8003648:	d901      	bls.n	800364e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800364a:	2303      	movs	r3, #3
 800364c:	e04f      	b.n	80036ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800364e:	4b2b      	ldr	r3, [pc, #172]	; (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	f003 020c 	and.w	r2, r3, #12
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	429a      	cmp	r2, r3
 800365e:	d1eb      	bne.n	8003638 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003660:	4b25      	ldr	r3, [pc, #148]	; (80036f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 0307 	and.w	r3, r3, #7
 8003668:	683a      	ldr	r2, [r7, #0]
 800366a:	429a      	cmp	r2, r3
 800366c:	d20c      	bcs.n	8003688 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800366e:	4b22      	ldr	r3, [pc, #136]	; (80036f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003670:	683a      	ldr	r2, [r7, #0]
 8003672:	b2d2      	uxtb	r2, r2
 8003674:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003676:	4b20      	ldr	r3, [pc, #128]	; (80036f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 0307 	and.w	r3, r3, #7
 800367e:	683a      	ldr	r2, [r7, #0]
 8003680:	429a      	cmp	r2, r3
 8003682:	d001      	beq.n	8003688 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e032      	b.n	80036ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 0304 	and.w	r3, r3, #4
 8003690:	2b00      	cmp	r3, #0
 8003692:	d008      	beq.n	80036a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003694:	4b19      	ldr	r3, [pc, #100]	; (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	4916      	ldr	r1, [pc, #88]	; (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 80036a2:	4313      	orrs	r3, r2
 80036a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 0308 	and.w	r3, r3, #8
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d009      	beq.n	80036c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036b2:	4b12      	ldr	r3, [pc, #72]	; (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	691b      	ldr	r3, [r3, #16]
 80036be:	00db      	lsls	r3, r3, #3
 80036c0:	490e      	ldr	r1, [pc, #56]	; (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 80036c2:	4313      	orrs	r3, r2
 80036c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80036c6:	f000 f821 	bl	800370c <HAL_RCC_GetSysClockFreq>
 80036ca:	4602      	mov	r2, r0
 80036cc:	4b0b      	ldr	r3, [pc, #44]	; (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	091b      	lsrs	r3, r3, #4
 80036d2:	f003 030f 	and.w	r3, r3, #15
 80036d6:	490a      	ldr	r1, [pc, #40]	; (8003700 <HAL_RCC_ClockConfig+0x1c0>)
 80036d8:	5ccb      	ldrb	r3, [r1, r3]
 80036da:	fa22 f303 	lsr.w	r3, r2, r3
 80036de:	4a09      	ldr	r2, [pc, #36]	; (8003704 <HAL_RCC_ClockConfig+0x1c4>)
 80036e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80036e2:	4b09      	ldr	r3, [pc, #36]	; (8003708 <HAL_RCC_ClockConfig+0x1c8>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4618      	mov	r0, r3
 80036e8:	f7fd fee0 	bl	80014ac <HAL_InitTick>

  return HAL_OK;
 80036ec:	2300      	movs	r3, #0
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3710      	adds	r7, #16
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	bf00      	nop
 80036f8:	40023c00 	.word	0x40023c00
 80036fc:	40023800 	.word	0x40023800
 8003700:	08005360 	.word	0x08005360
 8003704:	20000000 	.word	0x20000000
 8003708:	20000004 	.word	0x20000004

0800370c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800370c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003710:	b084      	sub	sp, #16
 8003712:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003714:	2300      	movs	r3, #0
 8003716:	607b      	str	r3, [r7, #4]
 8003718:	2300      	movs	r3, #0
 800371a:	60fb      	str	r3, [r7, #12]
 800371c:	2300      	movs	r3, #0
 800371e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003720:	2300      	movs	r3, #0
 8003722:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003724:	4b67      	ldr	r3, [pc, #412]	; (80038c4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	f003 030c 	and.w	r3, r3, #12
 800372c:	2b08      	cmp	r3, #8
 800372e:	d00d      	beq.n	800374c <HAL_RCC_GetSysClockFreq+0x40>
 8003730:	2b08      	cmp	r3, #8
 8003732:	f200 80bd 	bhi.w	80038b0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003736:	2b00      	cmp	r3, #0
 8003738:	d002      	beq.n	8003740 <HAL_RCC_GetSysClockFreq+0x34>
 800373a:	2b04      	cmp	r3, #4
 800373c:	d003      	beq.n	8003746 <HAL_RCC_GetSysClockFreq+0x3a>
 800373e:	e0b7      	b.n	80038b0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003740:	4b61      	ldr	r3, [pc, #388]	; (80038c8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003742:	60bb      	str	r3, [r7, #8]
       break;
 8003744:	e0b7      	b.n	80038b6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003746:	4b61      	ldr	r3, [pc, #388]	; (80038cc <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003748:	60bb      	str	r3, [r7, #8]
      break;
 800374a:	e0b4      	b.n	80038b6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800374c:	4b5d      	ldr	r3, [pc, #372]	; (80038c4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003754:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003756:	4b5b      	ldr	r3, [pc, #364]	; (80038c4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800375e:	2b00      	cmp	r3, #0
 8003760:	d04d      	beq.n	80037fe <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003762:	4b58      	ldr	r3, [pc, #352]	; (80038c4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	099b      	lsrs	r3, r3, #6
 8003768:	461a      	mov	r2, r3
 800376a:	f04f 0300 	mov.w	r3, #0
 800376e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003772:	f04f 0100 	mov.w	r1, #0
 8003776:	ea02 0800 	and.w	r8, r2, r0
 800377a:	ea03 0901 	and.w	r9, r3, r1
 800377e:	4640      	mov	r0, r8
 8003780:	4649      	mov	r1, r9
 8003782:	f04f 0200 	mov.w	r2, #0
 8003786:	f04f 0300 	mov.w	r3, #0
 800378a:	014b      	lsls	r3, r1, #5
 800378c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003790:	0142      	lsls	r2, r0, #5
 8003792:	4610      	mov	r0, r2
 8003794:	4619      	mov	r1, r3
 8003796:	ebb0 0008 	subs.w	r0, r0, r8
 800379a:	eb61 0109 	sbc.w	r1, r1, r9
 800379e:	f04f 0200 	mov.w	r2, #0
 80037a2:	f04f 0300 	mov.w	r3, #0
 80037a6:	018b      	lsls	r3, r1, #6
 80037a8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80037ac:	0182      	lsls	r2, r0, #6
 80037ae:	1a12      	subs	r2, r2, r0
 80037b0:	eb63 0301 	sbc.w	r3, r3, r1
 80037b4:	f04f 0000 	mov.w	r0, #0
 80037b8:	f04f 0100 	mov.w	r1, #0
 80037bc:	00d9      	lsls	r1, r3, #3
 80037be:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80037c2:	00d0      	lsls	r0, r2, #3
 80037c4:	4602      	mov	r2, r0
 80037c6:	460b      	mov	r3, r1
 80037c8:	eb12 0208 	adds.w	r2, r2, r8
 80037cc:	eb43 0309 	adc.w	r3, r3, r9
 80037d0:	f04f 0000 	mov.w	r0, #0
 80037d4:	f04f 0100 	mov.w	r1, #0
 80037d8:	0259      	lsls	r1, r3, #9
 80037da:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80037de:	0250      	lsls	r0, r2, #9
 80037e0:	4602      	mov	r2, r0
 80037e2:	460b      	mov	r3, r1
 80037e4:	4610      	mov	r0, r2
 80037e6:	4619      	mov	r1, r3
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	461a      	mov	r2, r3
 80037ec:	f04f 0300 	mov.w	r3, #0
 80037f0:	f7fc fd3e 	bl	8000270 <__aeabi_uldivmod>
 80037f4:	4602      	mov	r2, r0
 80037f6:	460b      	mov	r3, r1
 80037f8:	4613      	mov	r3, r2
 80037fa:	60fb      	str	r3, [r7, #12]
 80037fc:	e04a      	b.n	8003894 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037fe:	4b31      	ldr	r3, [pc, #196]	; (80038c4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	099b      	lsrs	r3, r3, #6
 8003804:	461a      	mov	r2, r3
 8003806:	f04f 0300 	mov.w	r3, #0
 800380a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800380e:	f04f 0100 	mov.w	r1, #0
 8003812:	ea02 0400 	and.w	r4, r2, r0
 8003816:	ea03 0501 	and.w	r5, r3, r1
 800381a:	4620      	mov	r0, r4
 800381c:	4629      	mov	r1, r5
 800381e:	f04f 0200 	mov.w	r2, #0
 8003822:	f04f 0300 	mov.w	r3, #0
 8003826:	014b      	lsls	r3, r1, #5
 8003828:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800382c:	0142      	lsls	r2, r0, #5
 800382e:	4610      	mov	r0, r2
 8003830:	4619      	mov	r1, r3
 8003832:	1b00      	subs	r0, r0, r4
 8003834:	eb61 0105 	sbc.w	r1, r1, r5
 8003838:	f04f 0200 	mov.w	r2, #0
 800383c:	f04f 0300 	mov.w	r3, #0
 8003840:	018b      	lsls	r3, r1, #6
 8003842:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003846:	0182      	lsls	r2, r0, #6
 8003848:	1a12      	subs	r2, r2, r0
 800384a:	eb63 0301 	sbc.w	r3, r3, r1
 800384e:	f04f 0000 	mov.w	r0, #0
 8003852:	f04f 0100 	mov.w	r1, #0
 8003856:	00d9      	lsls	r1, r3, #3
 8003858:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800385c:	00d0      	lsls	r0, r2, #3
 800385e:	4602      	mov	r2, r0
 8003860:	460b      	mov	r3, r1
 8003862:	1912      	adds	r2, r2, r4
 8003864:	eb45 0303 	adc.w	r3, r5, r3
 8003868:	f04f 0000 	mov.w	r0, #0
 800386c:	f04f 0100 	mov.w	r1, #0
 8003870:	0299      	lsls	r1, r3, #10
 8003872:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003876:	0290      	lsls	r0, r2, #10
 8003878:	4602      	mov	r2, r0
 800387a:	460b      	mov	r3, r1
 800387c:	4610      	mov	r0, r2
 800387e:	4619      	mov	r1, r3
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	461a      	mov	r2, r3
 8003884:	f04f 0300 	mov.w	r3, #0
 8003888:	f7fc fcf2 	bl	8000270 <__aeabi_uldivmod>
 800388c:	4602      	mov	r2, r0
 800388e:	460b      	mov	r3, r1
 8003890:	4613      	mov	r3, r2
 8003892:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003894:	4b0b      	ldr	r3, [pc, #44]	; (80038c4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	0c1b      	lsrs	r3, r3, #16
 800389a:	f003 0303 	and.w	r3, r3, #3
 800389e:	3301      	adds	r3, #1
 80038a0:	005b      	lsls	r3, r3, #1
 80038a2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80038a4:	68fa      	ldr	r2, [r7, #12]
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80038ac:	60bb      	str	r3, [r7, #8]
      break;
 80038ae:	e002      	b.n	80038b6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80038b0:	4b05      	ldr	r3, [pc, #20]	; (80038c8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80038b2:	60bb      	str	r3, [r7, #8]
      break;
 80038b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038b6:	68bb      	ldr	r3, [r7, #8]
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	3710      	adds	r7, #16
 80038bc:	46bd      	mov	sp, r7
 80038be:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80038c2:	bf00      	nop
 80038c4:	40023800 	.word	0x40023800
 80038c8:	00f42400 	.word	0x00f42400
 80038cc:	007a1200 	.word	0x007a1200

080038d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038d0:	b480      	push	{r7}
 80038d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038d4:	4b03      	ldr	r3, [pc, #12]	; (80038e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80038d6:	681b      	ldr	r3, [r3, #0]
}
 80038d8:	4618      	mov	r0, r3
 80038da:	46bd      	mov	sp, r7
 80038dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e0:	4770      	bx	lr
 80038e2:	bf00      	nop
 80038e4:	20000000 	.word	0x20000000

080038e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80038ec:	f7ff fff0 	bl	80038d0 <HAL_RCC_GetHCLKFreq>
 80038f0:	4602      	mov	r2, r0
 80038f2:	4b05      	ldr	r3, [pc, #20]	; (8003908 <HAL_RCC_GetPCLK1Freq+0x20>)
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	0a9b      	lsrs	r3, r3, #10
 80038f8:	f003 0307 	and.w	r3, r3, #7
 80038fc:	4903      	ldr	r1, [pc, #12]	; (800390c <HAL_RCC_GetPCLK1Freq+0x24>)
 80038fe:	5ccb      	ldrb	r3, [r1, r3]
 8003900:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003904:	4618      	mov	r0, r3
 8003906:	bd80      	pop	{r7, pc}
 8003908:	40023800 	.word	0x40023800
 800390c:	08005370 	.word	0x08005370

08003910 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003914:	f7ff ffdc 	bl	80038d0 <HAL_RCC_GetHCLKFreq>
 8003918:	4602      	mov	r2, r0
 800391a:	4b05      	ldr	r3, [pc, #20]	; (8003930 <HAL_RCC_GetPCLK2Freq+0x20>)
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	0b5b      	lsrs	r3, r3, #13
 8003920:	f003 0307 	and.w	r3, r3, #7
 8003924:	4903      	ldr	r1, [pc, #12]	; (8003934 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003926:	5ccb      	ldrb	r3, [r1, r3]
 8003928:	fa22 f303 	lsr.w	r3, r2, r3
}
 800392c:	4618      	mov	r0, r3
 800392e:	bd80      	pop	{r7, pc}
 8003930:	40023800 	.word	0x40023800
 8003934:	08005370 	.word	0x08005370

08003938 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003938:	b480      	push	{r7}
 800393a:	b083      	sub	sp, #12
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
 8003940:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	220f      	movs	r2, #15
 8003946:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003948:	4b12      	ldr	r3, [pc, #72]	; (8003994 <HAL_RCC_GetClockConfig+0x5c>)
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	f003 0203 	and.w	r2, r3, #3
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003954:	4b0f      	ldr	r3, [pc, #60]	; (8003994 <HAL_RCC_GetClockConfig+0x5c>)
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003960:	4b0c      	ldr	r3, [pc, #48]	; (8003994 <HAL_RCC_GetClockConfig+0x5c>)
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800396c:	4b09      	ldr	r3, [pc, #36]	; (8003994 <HAL_RCC_GetClockConfig+0x5c>)
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	08db      	lsrs	r3, r3, #3
 8003972:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800397a:	4b07      	ldr	r3, [pc, #28]	; (8003998 <HAL_RCC_GetClockConfig+0x60>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0207 	and.w	r2, r3, #7
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	601a      	str	r2, [r3, #0]
}
 8003986:	bf00      	nop
 8003988:	370c      	adds	r7, #12
 800398a:	46bd      	mov	sp, r7
 800398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003990:	4770      	bx	lr
 8003992:	bf00      	nop
 8003994:	40023800 	.word	0x40023800
 8003998:	40023c00 	.word	0x40023c00

0800399c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b082      	sub	sp, #8
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d101      	bne.n	80039ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	e041      	b.n	8003a32 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d106      	bne.n	80039c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2200      	movs	r2, #0
 80039be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f7fd fd14 	bl	80013f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2202      	movs	r2, #2
 80039cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	3304      	adds	r3, #4
 80039d8:	4619      	mov	r1, r3
 80039da:	4610      	mov	r0, r2
 80039dc:	f000 fc7a 	bl	80042d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2201      	movs	r2, #1
 80039e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2201      	movs	r2, #1
 80039ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2201      	movs	r2, #1
 80039f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2201      	movs	r2, #1
 80039fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2201      	movs	r2, #1
 8003a04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2201      	movs	r2, #1
 8003a14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2201      	movs	r2, #1
 8003a24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a30:	2300      	movs	r3, #0
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3708      	adds	r7, #8
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
	...

08003a3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b085      	sub	sp, #20
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a4a:	b2db      	uxtb	r3, r3
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d001      	beq.n	8003a54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	e04e      	b.n	8003af2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2202      	movs	r2, #2
 8003a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	68da      	ldr	r2, [r3, #12]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f042 0201 	orr.w	r2, r2, #1
 8003a6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a23      	ldr	r2, [pc, #140]	; (8003b00 <HAL_TIM_Base_Start_IT+0xc4>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d022      	beq.n	8003abc <HAL_TIM_Base_Start_IT+0x80>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a7e:	d01d      	beq.n	8003abc <HAL_TIM_Base_Start_IT+0x80>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a1f      	ldr	r2, [pc, #124]	; (8003b04 <HAL_TIM_Base_Start_IT+0xc8>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d018      	beq.n	8003abc <HAL_TIM_Base_Start_IT+0x80>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a1e      	ldr	r2, [pc, #120]	; (8003b08 <HAL_TIM_Base_Start_IT+0xcc>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d013      	beq.n	8003abc <HAL_TIM_Base_Start_IT+0x80>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a1c      	ldr	r2, [pc, #112]	; (8003b0c <HAL_TIM_Base_Start_IT+0xd0>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d00e      	beq.n	8003abc <HAL_TIM_Base_Start_IT+0x80>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a1b      	ldr	r2, [pc, #108]	; (8003b10 <HAL_TIM_Base_Start_IT+0xd4>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d009      	beq.n	8003abc <HAL_TIM_Base_Start_IT+0x80>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a19      	ldr	r2, [pc, #100]	; (8003b14 <HAL_TIM_Base_Start_IT+0xd8>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d004      	beq.n	8003abc <HAL_TIM_Base_Start_IT+0x80>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a18      	ldr	r2, [pc, #96]	; (8003b18 <HAL_TIM_Base_Start_IT+0xdc>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d111      	bne.n	8003ae0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	f003 0307 	and.w	r3, r3, #7
 8003ac6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2b06      	cmp	r3, #6
 8003acc:	d010      	beq.n	8003af0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f042 0201 	orr.w	r2, r2, #1
 8003adc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ade:	e007      	b.n	8003af0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f042 0201 	orr.w	r2, r2, #1
 8003aee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003af0:	2300      	movs	r3, #0
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3714      	adds	r7, #20
 8003af6:	46bd      	mov	sp, r7
 8003af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afc:	4770      	bx	lr
 8003afe:	bf00      	nop
 8003b00:	40010000 	.word	0x40010000
 8003b04:	40000400 	.word	0x40000400
 8003b08:	40000800 	.word	0x40000800
 8003b0c:	40000c00 	.word	0x40000c00
 8003b10:	40010400 	.word	0x40010400
 8003b14:	40014000 	.word	0x40014000
 8003b18:	40001800 	.word	0x40001800

08003b1c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b082      	sub	sp, #8
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d101      	bne.n	8003b2e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e041      	b.n	8003bb2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d106      	bne.n	8003b48 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f000 f839 	bl	8003bba <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2202      	movs	r2, #2
 8003b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	3304      	adds	r3, #4
 8003b58:	4619      	mov	r1, r3
 8003b5a:	4610      	mov	r0, r2
 8003b5c:	f000 fbba 	bl	80042d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2201      	movs	r2, #1
 8003b64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2201      	movs	r2, #1
 8003b74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2201      	movs	r2, #1
 8003b84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2201      	movs	r2, #1
 8003b94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2201      	movs	r2, #1
 8003bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003bb0:	2300      	movs	r3, #0
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	3708      	adds	r7, #8
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}

08003bba <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003bba:	b480      	push	{r7}
 8003bbc:	b083      	sub	sp, #12
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003bc2:	bf00      	nop
 8003bc4:	370c      	adds	r7, #12
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bcc:	4770      	bx	lr
	...

08003bd0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b084      	sub	sp, #16
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
 8003bd8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d109      	bne.n	8003bf4 <HAL_TIM_PWM_Start+0x24>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003be6:	b2db      	uxtb	r3, r3
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	bf14      	ite	ne
 8003bec:	2301      	movne	r3, #1
 8003bee:	2300      	moveq	r3, #0
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	e022      	b.n	8003c3a <HAL_TIM_PWM_Start+0x6a>
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	2b04      	cmp	r3, #4
 8003bf8:	d109      	bne.n	8003c0e <HAL_TIM_PWM_Start+0x3e>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	bf14      	ite	ne
 8003c06:	2301      	movne	r3, #1
 8003c08:	2300      	moveq	r3, #0
 8003c0a:	b2db      	uxtb	r3, r3
 8003c0c:	e015      	b.n	8003c3a <HAL_TIM_PWM_Start+0x6a>
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	2b08      	cmp	r3, #8
 8003c12:	d109      	bne.n	8003c28 <HAL_TIM_PWM_Start+0x58>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	bf14      	ite	ne
 8003c20:	2301      	movne	r3, #1
 8003c22:	2300      	moveq	r3, #0
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	e008      	b.n	8003c3a <HAL_TIM_PWM_Start+0x6a>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	bf14      	ite	ne
 8003c34:	2301      	movne	r3, #1
 8003c36:	2300      	moveq	r3, #0
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d001      	beq.n	8003c42 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e07c      	b.n	8003d3c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d104      	bne.n	8003c52 <HAL_TIM_PWM_Start+0x82>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2202      	movs	r2, #2
 8003c4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c50:	e013      	b.n	8003c7a <HAL_TIM_PWM_Start+0xaa>
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	2b04      	cmp	r3, #4
 8003c56:	d104      	bne.n	8003c62 <HAL_TIM_PWM_Start+0x92>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2202      	movs	r2, #2
 8003c5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c60:	e00b      	b.n	8003c7a <HAL_TIM_PWM_Start+0xaa>
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	2b08      	cmp	r3, #8
 8003c66:	d104      	bne.n	8003c72 <HAL_TIM_PWM_Start+0xa2>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2202      	movs	r2, #2
 8003c6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c70:	e003      	b.n	8003c7a <HAL_TIM_PWM_Start+0xaa>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2202      	movs	r2, #2
 8003c76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	6839      	ldr	r1, [r7, #0]
 8003c82:	4618      	mov	r0, r3
 8003c84:	f000 fe10 	bl	80048a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a2d      	ldr	r2, [pc, #180]	; (8003d44 <HAL_TIM_PWM_Start+0x174>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d004      	beq.n	8003c9c <HAL_TIM_PWM_Start+0xcc>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a2c      	ldr	r2, [pc, #176]	; (8003d48 <HAL_TIM_PWM_Start+0x178>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d101      	bne.n	8003ca0 <HAL_TIM_PWM_Start+0xd0>
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	e000      	b.n	8003ca2 <HAL_TIM_PWM_Start+0xd2>
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d007      	beq.n	8003cb6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003cb4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a22      	ldr	r2, [pc, #136]	; (8003d44 <HAL_TIM_PWM_Start+0x174>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d022      	beq.n	8003d06 <HAL_TIM_PWM_Start+0x136>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cc8:	d01d      	beq.n	8003d06 <HAL_TIM_PWM_Start+0x136>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a1f      	ldr	r2, [pc, #124]	; (8003d4c <HAL_TIM_PWM_Start+0x17c>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d018      	beq.n	8003d06 <HAL_TIM_PWM_Start+0x136>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a1d      	ldr	r2, [pc, #116]	; (8003d50 <HAL_TIM_PWM_Start+0x180>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d013      	beq.n	8003d06 <HAL_TIM_PWM_Start+0x136>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a1c      	ldr	r2, [pc, #112]	; (8003d54 <HAL_TIM_PWM_Start+0x184>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d00e      	beq.n	8003d06 <HAL_TIM_PWM_Start+0x136>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a16      	ldr	r2, [pc, #88]	; (8003d48 <HAL_TIM_PWM_Start+0x178>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d009      	beq.n	8003d06 <HAL_TIM_PWM_Start+0x136>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a18      	ldr	r2, [pc, #96]	; (8003d58 <HAL_TIM_PWM_Start+0x188>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d004      	beq.n	8003d06 <HAL_TIM_PWM_Start+0x136>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a16      	ldr	r2, [pc, #88]	; (8003d5c <HAL_TIM_PWM_Start+0x18c>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d111      	bne.n	8003d2a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	f003 0307 	and.w	r3, r3, #7
 8003d10:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2b06      	cmp	r3, #6
 8003d16:	d010      	beq.n	8003d3a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f042 0201 	orr.w	r2, r2, #1
 8003d26:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d28:	e007      	b.n	8003d3a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f042 0201 	orr.w	r2, r2, #1
 8003d38:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d3a:	2300      	movs	r3, #0
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	3710      	adds	r7, #16
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}
 8003d44:	40010000 	.word	0x40010000
 8003d48:	40010400 	.word	0x40010400
 8003d4c:	40000400 	.word	0x40000400
 8003d50:	40000800 	.word	0x40000800
 8003d54:	40000c00 	.word	0x40000c00
 8003d58:	40014000 	.word	0x40014000
 8003d5c:	40001800 	.word	0x40001800

08003d60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b082      	sub	sp, #8
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	691b      	ldr	r3, [r3, #16]
 8003d6e:	f003 0302 	and.w	r3, r3, #2
 8003d72:	2b02      	cmp	r3, #2
 8003d74:	d122      	bne.n	8003dbc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	f003 0302 	and.w	r3, r3, #2
 8003d80:	2b02      	cmp	r3, #2
 8003d82:	d11b      	bne.n	8003dbc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f06f 0202 	mvn.w	r2, #2
 8003d8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2201      	movs	r2, #1
 8003d92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	699b      	ldr	r3, [r3, #24]
 8003d9a:	f003 0303 	and.w	r3, r3, #3
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d003      	beq.n	8003daa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	f000 fa77 	bl	8004296 <HAL_TIM_IC_CaptureCallback>
 8003da8:	e005      	b.n	8003db6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f000 fa69 	bl	8004282 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003db0:	6878      	ldr	r0, [r7, #4]
 8003db2:	f000 fa7a 	bl	80042aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2200      	movs	r2, #0
 8003dba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	691b      	ldr	r3, [r3, #16]
 8003dc2:	f003 0304 	and.w	r3, r3, #4
 8003dc6:	2b04      	cmp	r3, #4
 8003dc8:	d122      	bne.n	8003e10 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	f003 0304 	and.w	r3, r3, #4
 8003dd4:	2b04      	cmp	r3, #4
 8003dd6:	d11b      	bne.n	8003e10 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f06f 0204 	mvn.w	r2, #4
 8003de0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2202      	movs	r2, #2
 8003de6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	699b      	ldr	r3, [r3, #24]
 8003dee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d003      	beq.n	8003dfe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f000 fa4d 	bl	8004296 <HAL_TIM_IC_CaptureCallback>
 8003dfc:	e005      	b.n	8003e0a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f000 fa3f 	bl	8004282 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	f000 fa50 	bl	80042aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	691b      	ldr	r3, [r3, #16]
 8003e16:	f003 0308 	and.w	r3, r3, #8
 8003e1a:	2b08      	cmp	r3, #8
 8003e1c:	d122      	bne.n	8003e64 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	68db      	ldr	r3, [r3, #12]
 8003e24:	f003 0308 	and.w	r3, r3, #8
 8003e28:	2b08      	cmp	r3, #8
 8003e2a:	d11b      	bne.n	8003e64 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f06f 0208 	mvn.w	r2, #8
 8003e34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2204      	movs	r2, #4
 8003e3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	69db      	ldr	r3, [r3, #28]
 8003e42:	f003 0303 	and.w	r3, r3, #3
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d003      	beq.n	8003e52 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f000 fa23 	bl	8004296 <HAL_TIM_IC_CaptureCallback>
 8003e50:	e005      	b.n	8003e5e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f000 fa15 	bl	8004282 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e58:	6878      	ldr	r0, [r7, #4]
 8003e5a:	f000 fa26 	bl	80042aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2200      	movs	r2, #0
 8003e62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	691b      	ldr	r3, [r3, #16]
 8003e6a:	f003 0310 	and.w	r3, r3, #16
 8003e6e:	2b10      	cmp	r3, #16
 8003e70:	d122      	bne.n	8003eb8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	68db      	ldr	r3, [r3, #12]
 8003e78:	f003 0310 	and.w	r3, r3, #16
 8003e7c:	2b10      	cmp	r3, #16
 8003e7e:	d11b      	bne.n	8003eb8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f06f 0210 	mvn.w	r2, #16
 8003e88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2208      	movs	r2, #8
 8003e8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	69db      	ldr	r3, [r3, #28]
 8003e96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d003      	beq.n	8003ea6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f000 f9f9 	bl	8004296 <HAL_TIM_IC_CaptureCallback>
 8003ea4:	e005      	b.n	8003eb2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f000 f9eb 	bl	8004282 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003eac:	6878      	ldr	r0, [r7, #4]
 8003eae:	f000 f9fc 	bl	80042aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	691b      	ldr	r3, [r3, #16]
 8003ebe:	f003 0301 	and.w	r3, r3, #1
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	d10e      	bne.n	8003ee4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	f003 0301 	and.w	r3, r3, #1
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d107      	bne.n	8003ee4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f06f 0201 	mvn.w	r2, #1
 8003edc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f7fd f97a 	bl	80011d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	691b      	ldr	r3, [r3, #16]
 8003eea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eee:	2b80      	cmp	r3, #128	; 0x80
 8003ef0:	d10e      	bne.n	8003f10 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003efc:	2b80      	cmp	r3, #128	; 0x80
 8003efe:	d107      	bne.n	8003f10 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003f08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f000 fd78 	bl	8004a00 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	691b      	ldr	r3, [r3, #16]
 8003f16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f1a:	2b40      	cmp	r3, #64	; 0x40
 8003f1c:	d10e      	bne.n	8003f3c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	68db      	ldr	r3, [r3, #12]
 8003f24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f28:	2b40      	cmp	r3, #64	; 0x40
 8003f2a:	d107      	bne.n	8003f3c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003f34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f000 f9c1 	bl	80042be <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	691b      	ldr	r3, [r3, #16]
 8003f42:	f003 0320 	and.w	r3, r3, #32
 8003f46:	2b20      	cmp	r3, #32
 8003f48:	d10e      	bne.n	8003f68 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	68db      	ldr	r3, [r3, #12]
 8003f50:	f003 0320 	and.w	r3, r3, #32
 8003f54:	2b20      	cmp	r3, #32
 8003f56:	d107      	bne.n	8003f68 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f06f 0220 	mvn.w	r2, #32
 8003f60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f000 fd42 	bl	80049ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f68:	bf00      	nop
 8003f6a:	3708      	adds	r7, #8
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}

08003f70 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b086      	sub	sp, #24
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	60f8      	str	r0, [r7, #12]
 8003f78:	60b9      	str	r1, [r7, #8]
 8003f7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d101      	bne.n	8003f8e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003f8a:	2302      	movs	r3, #2
 8003f8c:	e0ae      	b.n	80040ec <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2201      	movs	r2, #1
 8003f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2b0c      	cmp	r3, #12
 8003f9a:	f200 809f 	bhi.w	80040dc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003f9e:	a201      	add	r2, pc, #4	; (adr r2, 8003fa4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fa4:	08003fd9 	.word	0x08003fd9
 8003fa8:	080040dd 	.word	0x080040dd
 8003fac:	080040dd 	.word	0x080040dd
 8003fb0:	080040dd 	.word	0x080040dd
 8003fb4:	08004019 	.word	0x08004019
 8003fb8:	080040dd 	.word	0x080040dd
 8003fbc:	080040dd 	.word	0x080040dd
 8003fc0:	080040dd 	.word	0x080040dd
 8003fc4:	0800405b 	.word	0x0800405b
 8003fc8:	080040dd 	.word	0x080040dd
 8003fcc:	080040dd 	.word	0x080040dd
 8003fd0:	080040dd 	.word	0x080040dd
 8003fd4:	0800409b 	.word	0x0800409b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	68b9      	ldr	r1, [r7, #8]
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f000 fa18 	bl	8004414 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	699a      	ldr	r2, [r3, #24]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f042 0208 	orr.w	r2, r2, #8
 8003ff2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	699a      	ldr	r2, [r3, #24]
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f022 0204 	bic.w	r2, r2, #4
 8004002:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	6999      	ldr	r1, [r3, #24]
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	691a      	ldr	r2, [r3, #16]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	430a      	orrs	r2, r1
 8004014:	619a      	str	r2, [r3, #24]
      break;
 8004016:	e064      	b.n	80040e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	68b9      	ldr	r1, [r7, #8]
 800401e:	4618      	mov	r0, r3
 8004020:	f000 fa68 	bl	80044f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	699a      	ldr	r2, [r3, #24]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004032:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	699a      	ldr	r2, [r3, #24]
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004042:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	6999      	ldr	r1, [r3, #24]
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	691b      	ldr	r3, [r3, #16]
 800404e:	021a      	lsls	r2, r3, #8
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	430a      	orrs	r2, r1
 8004056:	619a      	str	r2, [r3, #24]
      break;
 8004058:	e043      	b.n	80040e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	68b9      	ldr	r1, [r7, #8]
 8004060:	4618      	mov	r0, r3
 8004062:	f000 fabd 	bl	80045e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	69da      	ldr	r2, [r3, #28]
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f042 0208 	orr.w	r2, r2, #8
 8004074:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	69da      	ldr	r2, [r3, #28]
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f022 0204 	bic.w	r2, r2, #4
 8004084:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	69d9      	ldr	r1, [r3, #28]
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	691a      	ldr	r2, [r3, #16]
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	430a      	orrs	r2, r1
 8004096:	61da      	str	r2, [r3, #28]
      break;
 8004098:	e023      	b.n	80040e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	68b9      	ldr	r1, [r7, #8]
 80040a0:	4618      	mov	r0, r3
 80040a2:	f000 fb11 	bl	80046c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	69da      	ldr	r2, [r3, #28]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	69da      	ldr	r2, [r3, #28]
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	69d9      	ldr	r1, [r3, #28]
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	691b      	ldr	r3, [r3, #16]
 80040d0:	021a      	lsls	r2, r3, #8
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	430a      	orrs	r2, r1
 80040d8:	61da      	str	r2, [r3, #28]
      break;
 80040da:	e002      	b.n	80040e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	75fb      	strb	r3, [r7, #23]
      break;
 80040e0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2200      	movs	r2, #0
 80040e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80040ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	3718      	adds	r7, #24
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}

080040f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b084      	sub	sp, #16
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
 80040fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80040fe:	2300      	movs	r3, #0
 8004100:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004108:	2b01      	cmp	r3, #1
 800410a:	d101      	bne.n	8004110 <HAL_TIM_ConfigClockSource+0x1c>
 800410c:	2302      	movs	r3, #2
 800410e:	e0b4      	b.n	800427a <HAL_TIM_ConfigClockSource+0x186>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2201      	movs	r2, #1
 8004114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2202      	movs	r2, #2
 800411c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800412e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004136:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	68ba      	ldr	r2, [r7, #8]
 800413e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004148:	d03e      	beq.n	80041c8 <HAL_TIM_ConfigClockSource+0xd4>
 800414a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800414e:	f200 8087 	bhi.w	8004260 <HAL_TIM_ConfigClockSource+0x16c>
 8004152:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004156:	f000 8086 	beq.w	8004266 <HAL_TIM_ConfigClockSource+0x172>
 800415a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800415e:	d87f      	bhi.n	8004260 <HAL_TIM_ConfigClockSource+0x16c>
 8004160:	2b70      	cmp	r3, #112	; 0x70
 8004162:	d01a      	beq.n	800419a <HAL_TIM_ConfigClockSource+0xa6>
 8004164:	2b70      	cmp	r3, #112	; 0x70
 8004166:	d87b      	bhi.n	8004260 <HAL_TIM_ConfigClockSource+0x16c>
 8004168:	2b60      	cmp	r3, #96	; 0x60
 800416a:	d050      	beq.n	800420e <HAL_TIM_ConfigClockSource+0x11a>
 800416c:	2b60      	cmp	r3, #96	; 0x60
 800416e:	d877      	bhi.n	8004260 <HAL_TIM_ConfigClockSource+0x16c>
 8004170:	2b50      	cmp	r3, #80	; 0x50
 8004172:	d03c      	beq.n	80041ee <HAL_TIM_ConfigClockSource+0xfa>
 8004174:	2b50      	cmp	r3, #80	; 0x50
 8004176:	d873      	bhi.n	8004260 <HAL_TIM_ConfigClockSource+0x16c>
 8004178:	2b40      	cmp	r3, #64	; 0x40
 800417a:	d058      	beq.n	800422e <HAL_TIM_ConfigClockSource+0x13a>
 800417c:	2b40      	cmp	r3, #64	; 0x40
 800417e:	d86f      	bhi.n	8004260 <HAL_TIM_ConfigClockSource+0x16c>
 8004180:	2b30      	cmp	r3, #48	; 0x30
 8004182:	d064      	beq.n	800424e <HAL_TIM_ConfigClockSource+0x15a>
 8004184:	2b30      	cmp	r3, #48	; 0x30
 8004186:	d86b      	bhi.n	8004260 <HAL_TIM_ConfigClockSource+0x16c>
 8004188:	2b20      	cmp	r3, #32
 800418a:	d060      	beq.n	800424e <HAL_TIM_ConfigClockSource+0x15a>
 800418c:	2b20      	cmp	r3, #32
 800418e:	d867      	bhi.n	8004260 <HAL_TIM_ConfigClockSource+0x16c>
 8004190:	2b00      	cmp	r3, #0
 8004192:	d05c      	beq.n	800424e <HAL_TIM_ConfigClockSource+0x15a>
 8004194:	2b10      	cmp	r3, #16
 8004196:	d05a      	beq.n	800424e <HAL_TIM_ConfigClockSource+0x15a>
 8004198:	e062      	b.n	8004260 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6818      	ldr	r0, [r3, #0]
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	6899      	ldr	r1, [r3, #8]
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	685a      	ldr	r2, [r3, #4]
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	68db      	ldr	r3, [r3, #12]
 80041aa:	f000 fb5d 	bl	8004868 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80041bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	68ba      	ldr	r2, [r7, #8]
 80041c4:	609a      	str	r2, [r3, #8]
      break;
 80041c6:	e04f      	b.n	8004268 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6818      	ldr	r0, [r3, #0]
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	6899      	ldr	r1, [r3, #8]
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	685a      	ldr	r2, [r3, #4]
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	68db      	ldr	r3, [r3, #12]
 80041d8:	f000 fb46 	bl	8004868 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	689a      	ldr	r2, [r3, #8]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80041ea:	609a      	str	r2, [r3, #8]
      break;
 80041ec:	e03c      	b.n	8004268 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6818      	ldr	r0, [r3, #0]
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	6859      	ldr	r1, [r3, #4]
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	68db      	ldr	r3, [r3, #12]
 80041fa:	461a      	mov	r2, r3
 80041fc:	f000 faba 	bl	8004774 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	2150      	movs	r1, #80	; 0x50
 8004206:	4618      	mov	r0, r3
 8004208:	f000 fb13 	bl	8004832 <TIM_ITRx_SetConfig>
      break;
 800420c:	e02c      	b.n	8004268 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6818      	ldr	r0, [r3, #0]
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	6859      	ldr	r1, [r3, #4]
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	68db      	ldr	r3, [r3, #12]
 800421a:	461a      	mov	r2, r3
 800421c:	f000 fad9 	bl	80047d2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	2160      	movs	r1, #96	; 0x60
 8004226:	4618      	mov	r0, r3
 8004228:	f000 fb03 	bl	8004832 <TIM_ITRx_SetConfig>
      break;
 800422c:	e01c      	b.n	8004268 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6818      	ldr	r0, [r3, #0]
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	6859      	ldr	r1, [r3, #4]
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	68db      	ldr	r3, [r3, #12]
 800423a:	461a      	mov	r2, r3
 800423c:	f000 fa9a 	bl	8004774 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	2140      	movs	r1, #64	; 0x40
 8004246:	4618      	mov	r0, r3
 8004248:	f000 faf3 	bl	8004832 <TIM_ITRx_SetConfig>
      break;
 800424c:	e00c      	b.n	8004268 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4619      	mov	r1, r3
 8004258:	4610      	mov	r0, r2
 800425a:	f000 faea 	bl	8004832 <TIM_ITRx_SetConfig>
      break;
 800425e:	e003      	b.n	8004268 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	73fb      	strb	r3, [r7, #15]
      break;
 8004264:	e000      	b.n	8004268 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004266:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2201      	movs	r2, #1
 800426c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2200      	movs	r2, #0
 8004274:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004278:	7bfb      	ldrb	r3, [r7, #15]
}
 800427a:	4618      	mov	r0, r3
 800427c:	3710      	adds	r7, #16
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}

08004282 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004282:	b480      	push	{r7}
 8004284:	b083      	sub	sp, #12
 8004286:	af00      	add	r7, sp, #0
 8004288:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800428a:	bf00      	nop
 800428c:	370c      	adds	r7, #12
 800428e:	46bd      	mov	sp, r7
 8004290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004294:	4770      	bx	lr

08004296 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004296:	b480      	push	{r7}
 8004298:	b083      	sub	sp, #12
 800429a:	af00      	add	r7, sp, #0
 800429c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800429e:	bf00      	nop
 80042a0:	370c      	adds	r7, #12
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr

080042aa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80042aa:	b480      	push	{r7}
 80042ac:	b083      	sub	sp, #12
 80042ae:	af00      	add	r7, sp, #0
 80042b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80042b2:	bf00      	nop
 80042b4:	370c      	adds	r7, #12
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr

080042be <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80042be:	b480      	push	{r7}
 80042c0:	b083      	sub	sp, #12
 80042c2:	af00      	add	r7, sp, #0
 80042c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80042c6:	bf00      	nop
 80042c8:	370c      	adds	r7, #12
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr
	...

080042d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b085      	sub	sp, #20
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	4a40      	ldr	r2, [pc, #256]	; (80043e8 <TIM_Base_SetConfig+0x114>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d013      	beq.n	8004314 <TIM_Base_SetConfig+0x40>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042f2:	d00f      	beq.n	8004314 <TIM_Base_SetConfig+0x40>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	4a3d      	ldr	r2, [pc, #244]	; (80043ec <TIM_Base_SetConfig+0x118>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d00b      	beq.n	8004314 <TIM_Base_SetConfig+0x40>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	4a3c      	ldr	r2, [pc, #240]	; (80043f0 <TIM_Base_SetConfig+0x11c>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d007      	beq.n	8004314 <TIM_Base_SetConfig+0x40>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	4a3b      	ldr	r2, [pc, #236]	; (80043f4 <TIM_Base_SetConfig+0x120>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d003      	beq.n	8004314 <TIM_Base_SetConfig+0x40>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	4a3a      	ldr	r2, [pc, #232]	; (80043f8 <TIM_Base_SetConfig+0x124>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d108      	bne.n	8004326 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800431a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	68fa      	ldr	r2, [r7, #12]
 8004322:	4313      	orrs	r3, r2
 8004324:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	4a2f      	ldr	r2, [pc, #188]	; (80043e8 <TIM_Base_SetConfig+0x114>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d02b      	beq.n	8004386 <TIM_Base_SetConfig+0xb2>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004334:	d027      	beq.n	8004386 <TIM_Base_SetConfig+0xb2>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	4a2c      	ldr	r2, [pc, #176]	; (80043ec <TIM_Base_SetConfig+0x118>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d023      	beq.n	8004386 <TIM_Base_SetConfig+0xb2>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	4a2b      	ldr	r2, [pc, #172]	; (80043f0 <TIM_Base_SetConfig+0x11c>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d01f      	beq.n	8004386 <TIM_Base_SetConfig+0xb2>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	4a2a      	ldr	r2, [pc, #168]	; (80043f4 <TIM_Base_SetConfig+0x120>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d01b      	beq.n	8004386 <TIM_Base_SetConfig+0xb2>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	4a29      	ldr	r2, [pc, #164]	; (80043f8 <TIM_Base_SetConfig+0x124>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d017      	beq.n	8004386 <TIM_Base_SetConfig+0xb2>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	4a28      	ldr	r2, [pc, #160]	; (80043fc <TIM_Base_SetConfig+0x128>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d013      	beq.n	8004386 <TIM_Base_SetConfig+0xb2>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	4a27      	ldr	r2, [pc, #156]	; (8004400 <TIM_Base_SetConfig+0x12c>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d00f      	beq.n	8004386 <TIM_Base_SetConfig+0xb2>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	4a26      	ldr	r2, [pc, #152]	; (8004404 <TIM_Base_SetConfig+0x130>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d00b      	beq.n	8004386 <TIM_Base_SetConfig+0xb2>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	4a25      	ldr	r2, [pc, #148]	; (8004408 <TIM_Base_SetConfig+0x134>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d007      	beq.n	8004386 <TIM_Base_SetConfig+0xb2>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	4a24      	ldr	r2, [pc, #144]	; (800440c <TIM_Base_SetConfig+0x138>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d003      	beq.n	8004386 <TIM_Base_SetConfig+0xb2>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	4a23      	ldr	r2, [pc, #140]	; (8004410 <TIM_Base_SetConfig+0x13c>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d108      	bne.n	8004398 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800438c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	68db      	ldr	r3, [r3, #12]
 8004392:	68fa      	ldr	r2, [r7, #12]
 8004394:	4313      	orrs	r3, r2
 8004396:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	695b      	ldr	r3, [r3, #20]
 80043a2:	4313      	orrs	r3, r2
 80043a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	68fa      	ldr	r2, [r7, #12]
 80043aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	689a      	ldr	r2, [r3, #8]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	681a      	ldr	r2, [r3, #0]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	4a0a      	ldr	r2, [pc, #40]	; (80043e8 <TIM_Base_SetConfig+0x114>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d003      	beq.n	80043cc <TIM_Base_SetConfig+0xf8>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	4a0c      	ldr	r2, [pc, #48]	; (80043f8 <TIM_Base_SetConfig+0x124>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d103      	bne.n	80043d4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	691a      	ldr	r2, [r3, #16]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2201      	movs	r2, #1
 80043d8:	615a      	str	r2, [r3, #20]
}
 80043da:	bf00      	nop
 80043dc:	3714      	adds	r7, #20
 80043de:	46bd      	mov	sp, r7
 80043e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e4:	4770      	bx	lr
 80043e6:	bf00      	nop
 80043e8:	40010000 	.word	0x40010000
 80043ec:	40000400 	.word	0x40000400
 80043f0:	40000800 	.word	0x40000800
 80043f4:	40000c00 	.word	0x40000c00
 80043f8:	40010400 	.word	0x40010400
 80043fc:	40014000 	.word	0x40014000
 8004400:	40014400 	.word	0x40014400
 8004404:	40014800 	.word	0x40014800
 8004408:	40001800 	.word	0x40001800
 800440c:	40001c00 	.word	0x40001c00
 8004410:	40002000 	.word	0x40002000

08004414 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004414:	b480      	push	{r7}
 8004416:	b087      	sub	sp, #28
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
 800441c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6a1b      	ldr	r3, [r3, #32]
 8004422:	f023 0201 	bic.w	r2, r3, #1
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6a1b      	ldr	r3, [r3, #32]
 800442e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	699b      	ldr	r3, [r3, #24]
 800443a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004442:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	f023 0303 	bic.w	r3, r3, #3
 800444a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	68fa      	ldr	r2, [r7, #12]
 8004452:	4313      	orrs	r3, r2
 8004454:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	f023 0302 	bic.w	r3, r3, #2
 800445c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	697a      	ldr	r2, [r7, #20]
 8004464:	4313      	orrs	r3, r2
 8004466:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	4a20      	ldr	r2, [pc, #128]	; (80044ec <TIM_OC1_SetConfig+0xd8>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d003      	beq.n	8004478 <TIM_OC1_SetConfig+0x64>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	4a1f      	ldr	r2, [pc, #124]	; (80044f0 <TIM_OC1_SetConfig+0xdc>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d10c      	bne.n	8004492 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	f023 0308 	bic.w	r3, r3, #8
 800447e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	697a      	ldr	r2, [r7, #20]
 8004486:	4313      	orrs	r3, r2
 8004488:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	f023 0304 	bic.w	r3, r3, #4
 8004490:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	4a15      	ldr	r2, [pc, #84]	; (80044ec <TIM_OC1_SetConfig+0xd8>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d003      	beq.n	80044a2 <TIM_OC1_SetConfig+0x8e>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	4a14      	ldr	r2, [pc, #80]	; (80044f0 <TIM_OC1_SetConfig+0xdc>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d111      	bne.n	80044c6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80044b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	695b      	ldr	r3, [r3, #20]
 80044b6:	693a      	ldr	r2, [r7, #16]
 80044b8:	4313      	orrs	r3, r2
 80044ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	699b      	ldr	r3, [r3, #24]
 80044c0:	693a      	ldr	r2, [r7, #16]
 80044c2:	4313      	orrs	r3, r2
 80044c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	693a      	ldr	r2, [r7, #16]
 80044ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	68fa      	ldr	r2, [r7, #12]
 80044d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	685a      	ldr	r2, [r3, #4]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	697a      	ldr	r2, [r7, #20]
 80044de:	621a      	str	r2, [r3, #32]
}
 80044e0:	bf00      	nop
 80044e2:	371c      	adds	r7, #28
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr
 80044ec:	40010000 	.word	0x40010000
 80044f0:	40010400 	.word	0x40010400

080044f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b087      	sub	sp, #28
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
 80044fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6a1b      	ldr	r3, [r3, #32]
 8004502:	f023 0210 	bic.w	r2, r3, #16
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6a1b      	ldr	r3, [r3, #32]
 800450e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	699b      	ldr	r3, [r3, #24]
 800451a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004522:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800452a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	021b      	lsls	r3, r3, #8
 8004532:	68fa      	ldr	r2, [r7, #12]
 8004534:	4313      	orrs	r3, r2
 8004536:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	f023 0320 	bic.w	r3, r3, #32
 800453e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	011b      	lsls	r3, r3, #4
 8004546:	697a      	ldr	r2, [r7, #20]
 8004548:	4313      	orrs	r3, r2
 800454a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	4a22      	ldr	r2, [pc, #136]	; (80045d8 <TIM_OC2_SetConfig+0xe4>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d003      	beq.n	800455c <TIM_OC2_SetConfig+0x68>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	4a21      	ldr	r2, [pc, #132]	; (80045dc <TIM_OC2_SetConfig+0xe8>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d10d      	bne.n	8004578 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004562:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	68db      	ldr	r3, [r3, #12]
 8004568:	011b      	lsls	r3, r3, #4
 800456a:	697a      	ldr	r2, [r7, #20]
 800456c:	4313      	orrs	r3, r2
 800456e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004576:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	4a17      	ldr	r2, [pc, #92]	; (80045d8 <TIM_OC2_SetConfig+0xe4>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d003      	beq.n	8004588 <TIM_OC2_SetConfig+0x94>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	4a16      	ldr	r2, [pc, #88]	; (80045dc <TIM_OC2_SetConfig+0xe8>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d113      	bne.n	80045b0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800458e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004596:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	695b      	ldr	r3, [r3, #20]
 800459c:	009b      	lsls	r3, r3, #2
 800459e:	693a      	ldr	r2, [r7, #16]
 80045a0:	4313      	orrs	r3, r2
 80045a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	699b      	ldr	r3, [r3, #24]
 80045a8:	009b      	lsls	r3, r3, #2
 80045aa:	693a      	ldr	r2, [r7, #16]
 80045ac:	4313      	orrs	r3, r2
 80045ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	693a      	ldr	r2, [r7, #16]
 80045b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	68fa      	ldr	r2, [r7, #12]
 80045ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	685a      	ldr	r2, [r3, #4]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	697a      	ldr	r2, [r7, #20]
 80045c8:	621a      	str	r2, [r3, #32]
}
 80045ca:	bf00      	nop
 80045cc:	371c      	adds	r7, #28
 80045ce:	46bd      	mov	sp, r7
 80045d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d4:	4770      	bx	lr
 80045d6:	bf00      	nop
 80045d8:	40010000 	.word	0x40010000
 80045dc:	40010400 	.word	0x40010400

080045e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b087      	sub	sp, #28
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6a1b      	ldr	r3, [r3, #32]
 80045ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6a1b      	ldr	r3, [r3, #32]
 80045fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	69db      	ldr	r3, [r3, #28]
 8004606:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800460e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f023 0303 	bic.w	r3, r3, #3
 8004616:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	68fa      	ldr	r2, [r7, #12]
 800461e:	4313      	orrs	r3, r2
 8004620:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004628:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	021b      	lsls	r3, r3, #8
 8004630:	697a      	ldr	r2, [r7, #20]
 8004632:	4313      	orrs	r3, r2
 8004634:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	4a21      	ldr	r2, [pc, #132]	; (80046c0 <TIM_OC3_SetConfig+0xe0>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d003      	beq.n	8004646 <TIM_OC3_SetConfig+0x66>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	4a20      	ldr	r2, [pc, #128]	; (80046c4 <TIM_OC3_SetConfig+0xe4>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d10d      	bne.n	8004662 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800464c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	68db      	ldr	r3, [r3, #12]
 8004652:	021b      	lsls	r3, r3, #8
 8004654:	697a      	ldr	r2, [r7, #20]
 8004656:	4313      	orrs	r3, r2
 8004658:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004660:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	4a16      	ldr	r2, [pc, #88]	; (80046c0 <TIM_OC3_SetConfig+0xe0>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d003      	beq.n	8004672 <TIM_OC3_SetConfig+0x92>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	4a15      	ldr	r2, [pc, #84]	; (80046c4 <TIM_OC3_SetConfig+0xe4>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d113      	bne.n	800469a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004678:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004680:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	695b      	ldr	r3, [r3, #20]
 8004686:	011b      	lsls	r3, r3, #4
 8004688:	693a      	ldr	r2, [r7, #16]
 800468a:	4313      	orrs	r3, r2
 800468c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	699b      	ldr	r3, [r3, #24]
 8004692:	011b      	lsls	r3, r3, #4
 8004694:	693a      	ldr	r2, [r7, #16]
 8004696:	4313      	orrs	r3, r2
 8004698:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	693a      	ldr	r2, [r7, #16]
 800469e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	68fa      	ldr	r2, [r7, #12]
 80046a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	685a      	ldr	r2, [r3, #4]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	697a      	ldr	r2, [r7, #20]
 80046b2:	621a      	str	r2, [r3, #32]
}
 80046b4:	bf00      	nop
 80046b6:	371c      	adds	r7, #28
 80046b8:	46bd      	mov	sp, r7
 80046ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046be:	4770      	bx	lr
 80046c0:	40010000 	.word	0x40010000
 80046c4:	40010400 	.word	0x40010400

080046c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b087      	sub	sp, #28
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
 80046d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6a1b      	ldr	r3, [r3, #32]
 80046d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6a1b      	ldr	r3, [r3, #32]
 80046e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	69db      	ldr	r3, [r3, #28]
 80046ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	021b      	lsls	r3, r3, #8
 8004706:	68fa      	ldr	r2, [r7, #12]
 8004708:	4313      	orrs	r3, r2
 800470a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004712:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	031b      	lsls	r3, r3, #12
 800471a:	693a      	ldr	r2, [r7, #16]
 800471c:	4313      	orrs	r3, r2
 800471e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	4a12      	ldr	r2, [pc, #72]	; (800476c <TIM_OC4_SetConfig+0xa4>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d003      	beq.n	8004730 <TIM_OC4_SetConfig+0x68>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	4a11      	ldr	r2, [pc, #68]	; (8004770 <TIM_OC4_SetConfig+0xa8>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d109      	bne.n	8004744 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004736:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	695b      	ldr	r3, [r3, #20]
 800473c:	019b      	lsls	r3, r3, #6
 800473e:	697a      	ldr	r2, [r7, #20]
 8004740:	4313      	orrs	r3, r2
 8004742:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	697a      	ldr	r2, [r7, #20]
 8004748:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	68fa      	ldr	r2, [r7, #12]
 800474e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	685a      	ldr	r2, [r3, #4]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	693a      	ldr	r2, [r7, #16]
 800475c:	621a      	str	r2, [r3, #32]
}
 800475e:	bf00      	nop
 8004760:	371c      	adds	r7, #28
 8004762:	46bd      	mov	sp, r7
 8004764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004768:	4770      	bx	lr
 800476a:	bf00      	nop
 800476c:	40010000 	.word	0x40010000
 8004770:	40010400 	.word	0x40010400

08004774 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004774:	b480      	push	{r7}
 8004776:	b087      	sub	sp, #28
 8004778:	af00      	add	r7, sp, #0
 800477a:	60f8      	str	r0, [r7, #12]
 800477c:	60b9      	str	r1, [r7, #8]
 800477e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	6a1b      	ldr	r3, [r3, #32]
 8004784:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	6a1b      	ldr	r3, [r3, #32]
 800478a:	f023 0201 	bic.w	r2, r3, #1
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	699b      	ldr	r3, [r3, #24]
 8004796:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800479e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	011b      	lsls	r3, r3, #4
 80047a4:	693a      	ldr	r2, [r7, #16]
 80047a6:	4313      	orrs	r3, r2
 80047a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	f023 030a 	bic.w	r3, r3, #10
 80047b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80047b2:	697a      	ldr	r2, [r7, #20]
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	4313      	orrs	r3, r2
 80047b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	693a      	ldr	r2, [r7, #16]
 80047be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	697a      	ldr	r2, [r7, #20]
 80047c4:	621a      	str	r2, [r3, #32]
}
 80047c6:	bf00      	nop
 80047c8:	371c      	adds	r7, #28
 80047ca:	46bd      	mov	sp, r7
 80047cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d0:	4770      	bx	lr

080047d2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047d2:	b480      	push	{r7}
 80047d4:	b087      	sub	sp, #28
 80047d6:	af00      	add	r7, sp, #0
 80047d8:	60f8      	str	r0, [r7, #12]
 80047da:	60b9      	str	r1, [r7, #8]
 80047dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	6a1b      	ldr	r3, [r3, #32]
 80047e2:	f023 0210 	bic.w	r2, r3, #16
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	699b      	ldr	r3, [r3, #24]
 80047ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	6a1b      	ldr	r3, [r3, #32]
 80047f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80047fc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	031b      	lsls	r3, r3, #12
 8004802:	697a      	ldr	r2, [r7, #20]
 8004804:	4313      	orrs	r3, r2
 8004806:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800480e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	011b      	lsls	r3, r3, #4
 8004814:	693a      	ldr	r2, [r7, #16]
 8004816:	4313      	orrs	r3, r2
 8004818:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	697a      	ldr	r2, [r7, #20]
 800481e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	693a      	ldr	r2, [r7, #16]
 8004824:	621a      	str	r2, [r3, #32]
}
 8004826:	bf00      	nop
 8004828:	371c      	adds	r7, #28
 800482a:	46bd      	mov	sp, r7
 800482c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004830:	4770      	bx	lr

08004832 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004832:	b480      	push	{r7}
 8004834:	b085      	sub	sp, #20
 8004836:	af00      	add	r7, sp, #0
 8004838:	6078      	str	r0, [r7, #4]
 800483a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004848:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800484a:	683a      	ldr	r2, [r7, #0]
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	4313      	orrs	r3, r2
 8004850:	f043 0307 	orr.w	r3, r3, #7
 8004854:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	68fa      	ldr	r2, [r7, #12]
 800485a:	609a      	str	r2, [r3, #8]
}
 800485c:	bf00      	nop
 800485e:	3714      	adds	r7, #20
 8004860:	46bd      	mov	sp, r7
 8004862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004866:	4770      	bx	lr

08004868 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004868:	b480      	push	{r7}
 800486a:	b087      	sub	sp, #28
 800486c:	af00      	add	r7, sp, #0
 800486e:	60f8      	str	r0, [r7, #12]
 8004870:	60b9      	str	r1, [r7, #8]
 8004872:	607a      	str	r2, [r7, #4]
 8004874:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004882:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	021a      	lsls	r2, r3, #8
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	431a      	orrs	r2, r3
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	4313      	orrs	r3, r2
 8004890:	697a      	ldr	r2, [r7, #20]
 8004892:	4313      	orrs	r3, r2
 8004894:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	697a      	ldr	r2, [r7, #20]
 800489a:	609a      	str	r2, [r3, #8]
}
 800489c:	bf00      	nop
 800489e:	371c      	adds	r7, #28
 80048a0:	46bd      	mov	sp, r7
 80048a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a6:	4770      	bx	lr

080048a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b087      	sub	sp, #28
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	60f8      	str	r0, [r7, #12]
 80048b0:	60b9      	str	r1, [r7, #8]
 80048b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	f003 031f 	and.w	r3, r3, #31
 80048ba:	2201      	movs	r2, #1
 80048bc:	fa02 f303 	lsl.w	r3, r2, r3
 80048c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	6a1a      	ldr	r2, [r3, #32]
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	43db      	mvns	r3, r3
 80048ca:	401a      	ands	r2, r3
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	6a1a      	ldr	r2, [r3, #32]
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	f003 031f 	and.w	r3, r3, #31
 80048da:	6879      	ldr	r1, [r7, #4]
 80048dc:	fa01 f303 	lsl.w	r3, r1, r3
 80048e0:	431a      	orrs	r2, r3
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	621a      	str	r2, [r3, #32]
}
 80048e6:	bf00      	nop
 80048e8:	371c      	adds	r7, #28
 80048ea:	46bd      	mov	sp, r7
 80048ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f0:	4770      	bx	lr
	...

080048f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b085      	sub	sp, #20
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
 80048fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004904:	2b01      	cmp	r3, #1
 8004906:	d101      	bne.n	800490c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004908:	2302      	movs	r3, #2
 800490a:	e05a      	b.n	80049c2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2201      	movs	r2, #1
 8004910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2202      	movs	r2, #2
 8004918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004932:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	68fa      	ldr	r2, [r7, #12]
 800493a:	4313      	orrs	r3, r2
 800493c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	68fa      	ldr	r2, [r7, #12]
 8004944:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a21      	ldr	r2, [pc, #132]	; (80049d0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d022      	beq.n	8004996 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004958:	d01d      	beq.n	8004996 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a1d      	ldr	r2, [pc, #116]	; (80049d4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d018      	beq.n	8004996 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a1b      	ldr	r2, [pc, #108]	; (80049d8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d013      	beq.n	8004996 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a1a      	ldr	r2, [pc, #104]	; (80049dc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d00e      	beq.n	8004996 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a18      	ldr	r2, [pc, #96]	; (80049e0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d009      	beq.n	8004996 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a17      	ldr	r2, [pc, #92]	; (80049e4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d004      	beq.n	8004996 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a15      	ldr	r2, [pc, #84]	; (80049e8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d10c      	bne.n	80049b0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800499c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	68ba      	ldr	r2, [r7, #8]
 80049a4:	4313      	orrs	r3, r2
 80049a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	68ba      	ldr	r2, [r7, #8]
 80049ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2201      	movs	r2, #1
 80049b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2200      	movs	r2, #0
 80049bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80049c0:	2300      	movs	r3, #0
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3714      	adds	r7, #20
 80049c6:	46bd      	mov	sp, r7
 80049c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049cc:	4770      	bx	lr
 80049ce:	bf00      	nop
 80049d0:	40010000 	.word	0x40010000
 80049d4:	40000400 	.word	0x40000400
 80049d8:	40000800 	.word	0x40000800
 80049dc:	40000c00 	.word	0x40000c00
 80049e0:	40010400 	.word	0x40010400
 80049e4:	40014000 	.word	0x40014000
 80049e8:	40001800 	.word	0x40001800

080049ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b083      	sub	sp, #12
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80049f4:	bf00      	nop
 80049f6:	370c      	adds	r7, #12
 80049f8:	46bd      	mov	sp, r7
 80049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fe:	4770      	bx	lr

08004a00 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b083      	sub	sp, #12
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a08:	bf00      	nop
 8004a0a:	370c      	adds	r7, #12
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a12:	4770      	bx	lr

08004a14 <__errno>:
 8004a14:	4b01      	ldr	r3, [pc, #4]	; (8004a1c <__errno+0x8>)
 8004a16:	6818      	ldr	r0, [r3, #0]
 8004a18:	4770      	bx	lr
 8004a1a:	bf00      	nop
 8004a1c:	2000000c 	.word	0x2000000c

08004a20 <__libc_init_array>:
 8004a20:	b570      	push	{r4, r5, r6, lr}
 8004a22:	4d0d      	ldr	r5, [pc, #52]	; (8004a58 <__libc_init_array+0x38>)
 8004a24:	4c0d      	ldr	r4, [pc, #52]	; (8004a5c <__libc_init_array+0x3c>)
 8004a26:	1b64      	subs	r4, r4, r5
 8004a28:	10a4      	asrs	r4, r4, #2
 8004a2a:	2600      	movs	r6, #0
 8004a2c:	42a6      	cmp	r6, r4
 8004a2e:	d109      	bne.n	8004a44 <__libc_init_array+0x24>
 8004a30:	4d0b      	ldr	r5, [pc, #44]	; (8004a60 <__libc_init_array+0x40>)
 8004a32:	4c0c      	ldr	r4, [pc, #48]	; (8004a64 <__libc_init_array+0x44>)
 8004a34:	f000 fc4e 	bl	80052d4 <_init>
 8004a38:	1b64      	subs	r4, r4, r5
 8004a3a:	10a4      	asrs	r4, r4, #2
 8004a3c:	2600      	movs	r6, #0
 8004a3e:	42a6      	cmp	r6, r4
 8004a40:	d105      	bne.n	8004a4e <__libc_init_array+0x2e>
 8004a42:	bd70      	pop	{r4, r5, r6, pc}
 8004a44:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a48:	4798      	blx	r3
 8004a4a:	3601      	adds	r6, #1
 8004a4c:	e7ee      	b.n	8004a2c <__libc_init_array+0xc>
 8004a4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a52:	4798      	blx	r3
 8004a54:	3601      	adds	r6, #1
 8004a56:	e7f2      	b.n	8004a3e <__libc_init_array+0x1e>
 8004a58:	080053b4 	.word	0x080053b4
 8004a5c:	080053b4 	.word	0x080053b4
 8004a60:	080053b4 	.word	0x080053b4
 8004a64:	080053b8 	.word	0x080053b8

08004a68 <memset>:
 8004a68:	4402      	add	r2, r0
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d100      	bne.n	8004a72 <memset+0xa>
 8004a70:	4770      	bx	lr
 8004a72:	f803 1b01 	strb.w	r1, [r3], #1
 8004a76:	e7f9      	b.n	8004a6c <memset+0x4>

08004a78 <siprintf>:
 8004a78:	b40e      	push	{r1, r2, r3}
 8004a7a:	b500      	push	{lr}
 8004a7c:	b09c      	sub	sp, #112	; 0x70
 8004a7e:	ab1d      	add	r3, sp, #116	; 0x74
 8004a80:	9002      	str	r0, [sp, #8]
 8004a82:	9006      	str	r0, [sp, #24]
 8004a84:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004a88:	4809      	ldr	r0, [pc, #36]	; (8004ab0 <siprintf+0x38>)
 8004a8a:	9107      	str	r1, [sp, #28]
 8004a8c:	9104      	str	r1, [sp, #16]
 8004a8e:	4909      	ldr	r1, [pc, #36]	; (8004ab4 <siprintf+0x3c>)
 8004a90:	f853 2b04 	ldr.w	r2, [r3], #4
 8004a94:	9105      	str	r1, [sp, #20]
 8004a96:	6800      	ldr	r0, [r0, #0]
 8004a98:	9301      	str	r3, [sp, #4]
 8004a9a:	a902      	add	r1, sp, #8
 8004a9c:	f000 f868 	bl	8004b70 <_svfiprintf_r>
 8004aa0:	9b02      	ldr	r3, [sp, #8]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	701a      	strb	r2, [r3, #0]
 8004aa6:	b01c      	add	sp, #112	; 0x70
 8004aa8:	f85d eb04 	ldr.w	lr, [sp], #4
 8004aac:	b003      	add	sp, #12
 8004aae:	4770      	bx	lr
 8004ab0:	2000000c 	.word	0x2000000c
 8004ab4:	ffff0208 	.word	0xffff0208

08004ab8 <__ssputs_r>:
 8004ab8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004abc:	688e      	ldr	r6, [r1, #8]
 8004abe:	429e      	cmp	r6, r3
 8004ac0:	4682      	mov	sl, r0
 8004ac2:	460c      	mov	r4, r1
 8004ac4:	4690      	mov	r8, r2
 8004ac6:	461f      	mov	r7, r3
 8004ac8:	d838      	bhi.n	8004b3c <__ssputs_r+0x84>
 8004aca:	898a      	ldrh	r2, [r1, #12]
 8004acc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004ad0:	d032      	beq.n	8004b38 <__ssputs_r+0x80>
 8004ad2:	6825      	ldr	r5, [r4, #0]
 8004ad4:	6909      	ldr	r1, [r1, #16]
 8004ad6:	eba5 0901 	sub.w	r9, r5, r1
 8004ada:	6965      	ldr	r5, [r4, #20]
 8004adc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004ae0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004ae4:	3301      	adds	r3, #1
 8004ae6:	444b      	add	r3, r9
 8004ae8:	106d      	asrs	r5, r5, #1
 8004aea:	429d      	cmp	r5, r3
 8004aec:	bf38      	it	cc
 8004aee:	461d      	movcc	r5, r3
 8004af0:	0553      	lsls	r3, r2, #21
 8004af2:	d531      	bpl.n	8004b58 <__ssputs_r+0xa0>
 8004af4:	4629      	mov	r1, r5
 8004af6:	f000 fb47 	bl	8005188 <_malloc_r>
 8004afa:	4606      	mov	r6, r0
 8004afc:	b950      	cbnz	r0, 8004b14 <__ssputs_r+0x5c>
 8004afe:	230c      	movs	r3, #12
 8004b00:	f8ca 3000 	str.w	r3, [sl]
 8004b04:	89a3      	ldrh	r3, [r4, #12]
 8004b06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b0a:	81a3      	strh	r3, [r4, #12]
 8004b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8004b10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b14:	6921      	ldr	r1, [r4, #16]
 8004b16:	464a      	mov	r2, r9
 8004b18:	f000 fabe 	bl	8005098 <memcpy>
 8004b1c:	89a3      	ldrh	r3, [r4, #12]
 8004b1e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004b22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b26:	81a3      	strh	r3, [r4, #12]
 8004b28:	6126      	str	r6, [r4, #16]
 8004b2a:	6165      	str	r5, [r4, #20]
 8004b2c:	444e      	add	r6, r9
 8004b2e:	eba5 0509 	sub.w	r5, r5, r9
 8004b32:	6026      	str	r6, [r4, #0]
 8004b34:	60a5      	str	r5, [r4, #8]
 8004b36:	463e      	mov	r6, r7
 8004b38:	42be      	cmp	r6, r7
 8004b3a:	d900      	bls.n	8004b3e <__ssputs_r+0x86>
 8004b3c:	463e      	mov	r6, r7
 8004b3e:	4632      	mov	r2, r6
 8004b40:	6820      	ldr	r0, [r4, #0]
 8004b42:	4641      	mov	r1, r8
 8004b44:	f000 fab6 	bl	80050b4 <memmove>
 8004b48:	68a3      	ldr	r3, [r4, #8]
 8004b4a:	6822      	ldr	r2, [r4, #0]
 8004b4c:	1b9b      	subs	r3, r3, r6
 8004b4e:	4432      	add	r2, r6
 8004b50:	60a3      	str	r3, [r4, #8]
 8004b52:	6022      	str	r2, [r4, #0]
 8004b54:	2000      	movs	r0, #0
 8004b56:	e7db      	b.n	8004b10 <__ssputs_r+0x58>
 8004b58:	462a      	mov	r2, r5
 8004b5a:	f000 fb6f 	bl	800523c <_realloc_r>
 8004b5e:	4606      	mov	r6, r0
 8004b60:	2800      	cmp	r0, #0
 8004b62:	d1e1      	bne.n	8004b28 <__ssputs_r+0x70>
 8004b64:	6921      	ldr	r1, [r4, #16]
 8004b66:	4650      	mov	r0, sl
 8004b68:	f000 fabe 	bl	80050e8 <_free_r>
 8004b6c:	e7c7      	b.n	8004afe <__ssputs_r+0x46>
	...

08004b70 <_svfiprintf_r>:
 8004b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b74:	4698      	mov	r8, r3
 8004b76:	898b      	ldrh	r3, [r1, #12]
 8004b78:	061b      	lsls	r3, r3, #24
 8004b7a:	b09d      	sub	sp, #116	; 0x74
 8004b7c:	4607      	mov	r7, r0
 8004b7e:	460d      	mov	r5, r1
 8004b80:	4614      	mov	r4, r2
 8004b82:	d50e      	bpl.n	8004ba2 <_svfiprintf_r+0x32>
 8004b84:	690b      	ldr	r3, [r1, #16]
 8004b86:	b963      	cbnz	r3, 8004ba2 <_svfiprintf_r+0x32>
 8004b88:	2140      	movs	r1, #64	; 0x40
 8004b8a:	f000 fafd 	bl	8005188 <_malloc_r>
 8004b8e:	6028      	str	r0, [r5, #0]
 8004b90:	6128      	str	r0, [r5, #16]
 8004b92:	b920      	cbnz	r0, 8004b9e <_svfiprintf_r+0x2e>
 8004b94:	230c      	movs	r3, #12
 8004b96:	603b      	str	r3, [r7, #0]
 8004b98:	f04f 30ff 	mov.w	r0, #4294967295
 8004b9c:	e0d1      	b.n	8004d42 <_svfiprintf_r+0x1d2>
 8004b9e:	2340      	movs	r3, #64	; 0x40
 8004ba0:	616b      	str	r3, [r5, #20]
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	9309      	str	r3, [sp, #36]	; 0x24
 8004ba6:	2320      	movs	r3, #32
 8004ba8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004bac:	f8cd 800c 	str.w	r8, [sp, #12]
 8004bb0:	2330      	movs	r3, #48	; 0x30
 8004bb2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004d5c <_svfiprintf_r+0x1ec>
 8004bb6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004bba:	f04f 0901 	mov.w	r9, #1
 8004bbe:	4623      	mov	r3, r4
 8004bc0:	469a      	mov	sl, r3
 8004bc2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004bc6:	b10a      	cbz	r2, 8004bcc <_svfiprintf_r+0x5c>
 8004bc8:	2a25      	cmp	r2, #37	; 0x25
 8004bca:	d1f9      	bne.n	8004bc0 <_svfiprintf_r+0x50>
 8004bcc:	ebba 0b04 	subs.w	fp, sl, r4
 8004bd0:	d00b      	beq.n	8004bea <_svfiprintf_r+0x7a>
 8004bd2:	465b      	mov	r3, fp
 8004bd4:	4622      	mov	r2, r4
 8004bd6:	4629      	mov	r1, r5
 8004bd8:	4638      	mov	r0, r7
 8004bda:	f7ff ff6d 	bl	8004ab8 <__ssputs_r>
 8004bde:	3001      	adds	r0, #1
 8004be0:	f000 80aa 	beq.w	8004d38 <_svfiprintf_r+0x1c8>
 8004be4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004be6:	445a      	add	r2, fp
 8004be8:	9209      	str	r2, [sp, #36]	; 0x24
 8004bea:	f89a 3000 	ldrb.w	r3, [sl]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	f000 80a2 	beq.w	8004d38 <_svfiprintf_r+0x1c8>
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	f04f 32ff 	mov.w	r2, #4294967295
 8004bfa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004bfe:	f10a 0a01 	add.w	sl, sl, #1
 8004c02:	9304      	str	r3, [sp, #16]
 8004c04:	9307      	str	r3, [sp, #28]
 8004c06:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004c0a:	931a      	str	r3, [sp, #104]	; 0x68
 8004c0c:	4654      	mov	r4, sl
 8004c0e:	2205      	movs	r2, #5
 8004c10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c14:	4851      	ldr	r0, [pc, #324]	; (8004d5c <_svfiprintf_r+0x1ec>)
 8004c16:	f7fb fadb 	bl	80001d0 <memchr>
 8004c1a:	9a04      	ldr	r2, [sp, #16]
 8004c1c:	b9d8      	cbnz	r0, 8004c56 <_svfiprintf_r+0xe6>
 8004c1e:	06d0      	lsls	r0, r2, #27
 8004c20:	bf44      	itt	mi
 8004c22:	2320      	movmi	r3, #32
 8004c24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004c28:	0711      	lsls	r1, r2, #28
 8004c2a:	bf44      	itt	mi
 8004c2c:	232b      	movmi	r3, #43	; 0x2b
 8004c2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004c32:	f89a 3000 	ldrb.w	r3, [sl]
 8004c36:	2b2a      	cmp	r3, #42	; 0x2a
 8004c38:	d015      	beq.n	8004c66 <_svfiprintf_r+0xf6>
 8004c3a:	9a07      	ldr	r2, [sp, #28]
 8004c3c:	4654      	mov	r4, sl
 8004c3e:	2000      	movs	r0, #0
 8004c40:	f04f 0c0a 	mov.w	ip, #10
 8004c44:	4621      	mov	r1, r4
 8004c46:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004c4a:	3b30      	subs	r3, #48	; 0x30
 8004c4c:	2b09      	cmp	r3, #9
 8004c4e:	d94e      	bls.n	8004cee <_svfiprintf_r+0x17e>
 8004c50:	b1b0      	cbz	r0, 8004c80 <_svfiprintf_r+0x110>
 8004c52:	9207      	str	r2, [sp, #28]
 8004c54:	e014      	b.n	8004c80 <_svfiprintf_r+0x110>
 8004c56:	eba0 0308 	sub.w	r3, r0, r8
 8004c5a:	fa09 f303 	lsl.w	r3, r9, r3
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	9304      	str	r3, [sp, #16]
 8004c62:	46a2      	mov	sl, r4
 8004c64:	e7d2      	b.n	8004c0c <_svfiprintf_r+0x9c>
 8004c66:	9b03      	ldr	r3, [sp, #12]
 8004c68:	1d19      	adds	r1, r3, #4
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	9103      	str	r1, [sp, #12]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	bfbb      	ittet	lt
 8004c72:	425b      	neglt	r3, r3
 8004c74:	f042 0202 	orrlt.w	r2, r2, #2
 8004c78:	9307      	strge	r3, [sp, #28]
 8004c7a:	9307      	strlt	r3, [sp, #28]
 8004c7c:	bfb8      	it	lt
 8004c7e:	9204      	strlt	r2, [sp, #16]
 8004c80:	7823      	ldrb	r3, [r4, #0]
 8004c82:	2b2e      	cmp	r3, #46	; 0x2e
 8004c84:	d10c      	bne.n	8004ca0 <_svfiprintf_r+0x130>
 8004c86:	7863      	ldrb	r3, [r4, #1]
 8004c88:	2b2a      	cmp	r3, #42	; 0x2a
 8004c8a:	d135      	bne.n	8004cf8 <_svfiprintf_r+0x188>
 8004c8c:	9b03      	ldr	r3, [sp, #12]
 8004c8e:	1d1a      	adds	r2, r3, #4
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	9203      	str	r2, [sp, #12]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	bfb8      	it	lt
 8004c98:	f04f 33ff 	movlt.w	r3, #4294967295
 8004c9c:	3402      	adds	r4, #2
 8004c9e:	9305      	str	r3, [sp, #20]
 8004ca0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004d6c <_svfiprintf_r+0x1fc>
 8004ca4:	7821      	ldrb	r1, [r4, #0]
 8004ca6:	2203      	movs	r2, #3
 8004ca8:	4650      	mov	r0, sl
 8004caa:	f7fb fa91 	bl	80001d0 <memchr>
 8004cae:	b140      	cbz	r0, 8004cc2 <_svfiprintf_r+0x152>
 8004cb0:	2340      	movs	r3, #64	; 0x40
 8004cb2:	eba0 000a 	sub.w	r0, r0, sl
 8004cb6:	fa03 f000 	lsl.w	r0, r3, r0
 8004cba:	9b04      	ldr	r3, [sp, #16]
 8004cbc:	4303      	orrs	r3, r0
 8004cbe:	3401      	adds	r4, #1
 8004cc0:	9304      	str	r3, [sp, #16]
 8004cc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004cc6:	4826      	ldr	r0, [pc, #152]	; (8004d60 <_svfiprintf_r+0x1f0>)
 8004cc8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004ccc:	2206      	movs	r2, #6
 8004cce:	f7fb fa7f 	bl	80001d0 <memchr>
 8004cd2:	2800      	cmp	r0, #0
 8004cd4:	d038      	beq.n	8004d48 <_svfiprintf_r+0x1d8>
 8004cd6:	4b23      	ldr	r3, [pc, #140]	; (8004d64 <_svfiprintf_r+0x1f4>)
 8004cd8:	bb1b      	cbnz	r3, 8004d22 <_svfiprintf_r+0x1b2>
 8004cda:	9b03      	ldr	r3, [sp, #12]
 8004cdc:	3307      	adds	r3, #7
 8004cde:	f023 0307 	bic.w	r3, r3, #7
 8004ce2:	3308      	adds	r3, #8
 8004ce4:	9303      	str	r3, [sp, #12]
 8004ce6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ce8:	4433      	add	r3, r6
 8004cea:	9309      	str	r3, [sp, #36]	; 0x24
 8004cec:	e767      	b.n	8004bbe <_svfiprintf_r+0x4e>
 8004cee:	fb0c 3202 	mla	r2, ip, r2, r3
 8004cf2:	460c      	mov	r4, r1
 8004cf4:	2001      	movs	r0, #1
 8004cf6:	e7a5      	b.n	8004c44 <_svfiprintf_r+0xd4>
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	3401      	adds	r4, #1
 8004cfc:	9305      	str	r3, [sp, #20]
 8004cfe:	4619      	mov	r1, r3
 8004d00:	f04f 0c0a 	mov.w	ip, #10
 8004d04:	4620      	mov	r0, r4
 8004d06:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004d0a:	3a30      	subs	r2, #48	; 0x30
 8004d0c:	2a09      	cmp	r2, #9
 8004d0e:	d903      	bls.n	8004d18 <_svfiprintf_r+0x1a8>
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d0c5      	beq.n	8004ca0 <_svfiprintf_r+0x130>
 8004d14:	9105      	str	r1, [sp, #20]
 8004d16:	e7c3      	b.n	8004ca0 <_svfiprintf_r+0x130>
 8004d18:	fb0c 2101 	mla	r1, ip, r1, r2
 8004d1c:	4604      	mov	r4, r0
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e7f0      	b.n	8004d04 <_svfiprintf_r+0x194>
 8004d22:	ab03      	add	r3, sp, #12
 8004d24:	9300      	str	r3, [sp, #0]
 8004d26:	462a      	mov	r2, r5
 8004d28:	4b0f      	ldr	r3, [pc, #60]	; (8004d68 <_svfiprintf_r+0x1f8>)
 8004d2a:	a904      	add	r1, sp, #16
 8004d2c:	4638      	mov	r0, r7
 8004d2e:	f3af 8000 	nop.w
 8004d32:	1c42      	adds	r2, r0, #1
 8004d34:	4606      	mov	r6, r0
 8004d36:	d1d6      	bne.n	8004ce6 <_svfiprintf_r+0x176>
 8004d38:	89ab      	ldrh	r3, [r5, #12]
 8004d3a:	065b      	lsls	r3, r3, #25
 8004d3c:	f53f af2c 	bmi.w	8004b98 <_svfiprintf_r+0x28>
 8004d40:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004d42:	b01d      	add	sp, #116	; 0x74
 8004d44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d48:	ab03      	add	r3, sp, #12
 8004d4a:	9300      	str	r3, [sp, #0]
 8004d4c:	462a      	mov	r2, r5
 8004d4e:	4b06      	ldr	r3, [pc, #24]	; (8004d68 <_svfiprintf_r+0x1f8>)
 8004d50:	a904      	add	r1, sp, #16
 8004d52:	4638      	mov	r0, r7
 8004d54:	f000 f87a 	bl	8004e4c <_printf_i>
 8004d58:	e7eb      	b.n	8004d32 <_svfiprintf_r+0x1c2>
 8004d5a:	bf00      	nop
 8004d5c:	08005378 	.word	0x08005378
 8004d60:	08005382 	.word	0x08005382
 8004d64:	00000000 	.word	0x00000000
 8004d68:	08004ab9 	.word	0x08004ab9
 8004d6c:	0800537e 	.word	0x0800537e

08004d70 <_printf_common>:
 8004d70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d74:	4616      	mov	r6, r2
 8004d76:	4699      	mov	r9, r3
 8004d78:	688a      	ldr	r2, [r1, #8]
 8004d7a:	690b      	ldr	r3, [r1, #16]
 8004d7c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004d80:	4293      	cmp	r3, r2
 8004d82:	bfb8      	it	lt
 8004d84:	4613      	movlt	r3, r2
 8004d86:	6033      	str	r3, [r6, #0]
 8004d88:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004d8c:	4607      	mov	r7, r0
 8004d8e:	460c      	mov	r4, r1
 8004d90:	b10a      	cbz	r2, 8004d96 <_printf_common+0x26>
 8004d92:	3301      	adds	r3, #1
 8004d94:	6033      	str	r3, [r6, #0]
 8004d96:	6823      	ldr	r3, [r4, #0]
 8004d98:	0699      	lsls	r1, r3, #26
 8004d9a:	bf42      	ittt	mi
 8004d9c:	6833      	ldrmi	r3, [r6, #0]
 8004d9e:	3302      	addmi	r3, #2
 8004da0:	6033      	strmi	r3, [r6, #0]
 8004da2:	6825      	ldr	r5, [r4, #0]
 8004da4:	f015 0506 	ands.w	r5, r5, #6
 8004da8:	d106      	bne.n	8004db8 <_printf_common+0x48>
 8004daa:	f104 0a19 	add.w	sl, r4, #25
 8004dae:	68e3      	ldr	r3, [r4, #12]
 8004db0:	6832      	ldr	r2, [r6, #0]
 8004db2:	1a9b      	subs	r3, r3, r2
 8004db4:	42ab      	cmp	r3, r5
 8004db6:	dc26      	bgt.n	8004e06 <_printf_common+0x96>
 8004db8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004dbc:	1e13      	subs	r3, r2, #0
 8004dbe:	6822      	ldr	r2, [r4, #0]
 8004dc0:	bf18      	it	ne
 8004dc2:	2301      	movne	r3, #1
 8004dc4:	0692      	lsls	r2, r2, #26
 8004dc6:	d42b      	bmi.n	8004e20 <_printf_common+0xb0>
 8004dc8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004dcc:	4649      	mov	r1, r9
 8004dce:	4638      	mov	r0, r7
 8004dd0:	47c0      	blx	r8
 8004dd2:	3001      	adds	r0, #1
 8004dd4:	d01e      	beq.n	8004e14 <_printf_common+0xa4>
 8004dd6:	6823      	ldr	r3, [r4, #0]
 8004dd8:	68e5      	ldr	r5, [r4, #12]
 8004dda:	6832      	ldr	r2, [r6, #0]
 8004ddc:	f003 0306 	and.w	r3, r3, #6
 8004de0:	2b04      	cmp	r3, #4
 8004de2:	bf08      	it	eq
 8004de4:	1aad      	subeq	r5, r5, r2
 8004de6:	68a3      	ldr	r3, [r4, #8]
 8004de8:	6922      	ldr	r2, [r4, #16]
 8004dea:	bf0c      	ite	eq
 8004dec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004df0:	2500      	movne	r5, #0
 8004df2:	4293      	cmp	r3, r2
 8004df4:	bfc4      	itt	gt
 8004df6:	1a9b      	subgt	r3, r3, r2
 8004df8:	18ed      	addgt	r5, r5, r3
 8004dfa:	2600      	movs	r6, #0
 8004dfc:	341a      	adds	r4, #26
 8004dfe:	42b5      	cmp	r5, r6
 8004e00:	d11a      	bne.n	8004e38 <_printf_common+0xc8>
 8004e02:	2000      	movs	r0, #0
 8004e04:	e008      	b.n	8004e18 <_printf_common+0xa8>
 8004e06:	2301      	movs	r3, #1
 8004e08:	4652      	mov	r2, sl
 8004e0a:	4649      	mov	r1, r9
 8004e0c:	4638      	mov	r0, r7
 8004e0e:	47c0      	blx	r8
 8004e10:	3001      	adds	r0, #1
 8004e12:	d103      	bne.n	8004e1c <_printf_common+0xac>
 8004e14:	f04f 30ff 	mov.w	r0, #4294967295
 8004e18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e1c:	3501      	adds	r5, #1
 8004e1e:	e7c6      	b.n	8004dae <_printf_common+0x3e>
 8004e20:	18e1      	adds	r1, r4, r3
 8004e22:	1c5a      	adds	r2, r3, #1
 8004e24:	2030      	movs	r0, #48	; 0x30
 8004e26:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004e2a:	4422      	add	r2, r4
 8004e2c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004e30:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004e34:	3302      	adds	r3, #2
 8004e36:	e7c7      	b.n	8004dc8 <_printf_common+0x58>
 8004e38:	2301      	movs	r3, #1
 8004e3a:	4622      	mov	r2, r4
 8004e3c:	4649      	mov	r1, r9
 8004e3e:	4638      	mov	r0, r7
 8004e40:	47c0      	blx	r8
 8004e42:	3001      	adds	r0, #1
 8004e44:	d0e6      	beq.n	8004e14 <_printf_common+0xa4>
 8004e46:	3601      	adds	r6, #1
 8004e48:	e7d9      	b.n	8004dfe <_printf_common+0x8e>
	...

08004e4c <_printf_i>:
 8004e4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e50:	460c      	mov	r4, r1
 8004e52:	4691      	mov	r9, r2
 8004e54:	7e27      	ldrb	r7, [r4, #24]
 8004e56:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004e58:	2f78      	cmp	r7, #120	; 0x78
 8004e5a:	4680      	mov	r8, r0
 8004e5c:	469a      	mov	sl, r3
 8004e5e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004e62:	d807      	bhi.n	8004e74 <_printf_i+0x28>
 8004e64:	2f62      	cmp	r7, #98	; 0x62
 8004e66:	d80a      	bhi.n	8004e7e <_printf_i+0x32>
 8004e68:	2f00      	cmp	r7, #0
 8004e6a:	f000 80d8 	beq.w	800501e <_printf_i+0x1d2>
 8004e6e:	2f58      	cmp	r7, #88	; 0x58
 8004e70:	f000 80a3 	beq.w	8004fba <_printf_i+0x16e>
 8004e74:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004e78:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004e7c:	e03a      	b.n	8004ef4 <_printf_i+0xa8>
 8004e7e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004e82:	2b15      	cmp	r3, #21
 8004e84:	d8f6      	bhi.n	8004e74 <_printf_i+0x28>
 8004e86:	a001      	add	r0, pc, #4	; (adr r0, 8004e8c <_printf_i+0x40>)
 8004e88:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004e8c:	08004ee5 	.word	0x08004ee5
 8004e90:	08004ef9 	.word	0x08004ef9
 8004e94:	08004e75 	.word	0x08004e75
 8004e98:	08004e75 	.word	0x08004e75
 8004e9c:	08004e75 	.word	0x08004e75
 8004ea0:	08004e75 	.word	0x08004e75
 8004ea4:	08004ef9 	.word	0x08004ef9
 8004ea8:	08004e75 	.word	0x08004e75
 8004eac:	08004e75 	.word	0x08004e75
 8004eb0:	08004e75 	.word	0x08004e75
 8004eb4:	08004e75 	.word	0x08004e75
 8004eb8:	08005005 	.word	0x08005005
 8004ebc:	08004f29 	.word	0x08004f29
 8004ec0:	08004fe7 	.word	0x08004fe7
 8004ec4:	08004e75 	.word	0x08004e75
 8004ec8:	08004e75 	.word	0x08004e75
 8004ecc:	08005027 	.word	0x08005027
 8004ed0:	08004e75 	.word	0x08004e75
 8004ed4:	08004f29 	.word	0x08004f29
 8004ed8:	08004e75 	.word	0x08004e75
 8004edc:	08004e75 	.word	0x08004e75
 8004ee0:	08004fef 	.word	0x08004fef
 8004ee4:	680b      	ldr	r3, [r1, #0]
 8004ee6:	1d1a      	adds	r2, r3, #4
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	600a      	str	r2, [r1, #0]
 8004eec:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004ef0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	e0a3      	b.n	8005040 <_printf_i+0x1f4>
 8004ef8:	6825      	ldr	r5, [r4, #0]
 8004efa:	6808      	ldr	r0, [r1, #0]
 8004efc:	062e      	lsls	r6, r5, #24
 8004efe:	f100 0304 	add.w	r3, r0, #4
 8004f02:	d50a      	bpl.n	8004f1a <_printf_i+0xce>
 8004f04:	6805      	ldr	r5, [r0, #0]
 8004f06:	600b      	str	r3, [r1, #0]
 8004f08:	2d00      	cmp	r5, #0
 8004f0a:	da03      	bge.n	8004f14 <_printf_i+0xc8>
 8004f0c:	232d      	movs	r3, #45	; 0x2d
 8004f0e:	426d      	negs	r5, r5
 8004f10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f14:	485e      	ldr	r0, [pc, #376]	; (8005090 <_printf_i+0x244>)
 8004f16:	230a      	movs	r3, #10
 8004f18:	e019      	b.n	8004f4e <_printf_i+0x102>
 8004f1a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004f1e:	6805      	ldr	r5, [r0, #0]
 8004f20:	600b      	str	r3, [r1, #0]
 8004f22:	bf18      	it	ne
 8004f24:	b22d      	sxthne	r5, r5
 8004f26:	e7ef      	b.n	8004f08 <_printf_i+0xbc>
 8004f28:	680b      	ldr	r3, [r1, #0]
 8004f2a:	6825      	ldr	r5, [r4, #0]
 8004f2c:	1d18      	adds	r0, r3, #4
 8004f2e:	6008      	str	r0, [r1, #0]
 8004f30:	0628      	lsls	r0, r5, #24
 8004f32:	d501      	bpl.n	8004f38 <_printf_i+0xec>
 8004f34:	681d      	ldr	r5, [r3, #0]
 8004f36:	e002      	b.n	8004f3e <_printf_i+0xf2>
 8004f38:	0669      	lsls	r1, r5, #25
 8004f3a:	d5fb      	bpl.n	8004f34 <_printf_i+0xe8>
 8004f3c:	881d      	ldrh	r5, [r3, #0]
 8004f3e:	4854      	ldr	r0, [pc, #336]	; (8005090 <_printf_i+0x244>)
 8004f40:	2f6f      	cmp	r7, #111	; 0x6f
 8004f42:	bf0c      	ite	eq
 8004f44:	2308      	moveq	r3, #8
 8004f46:	230a      	movne	r3, #10
 8004f48:	2100      	movs	r1, #0
 8004f4a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004f4e:	6866      	ldr	r6, [r4, #4]
 8004f50:	60a6      	str	r6, [r4, #8]
 8004f52:	2e00      	cmp	r6, #0
 8004f54:	bfa2      	ittt	ge
 8004f56:	6821      	ldrge	r1, [r4, #0]
 8004f58:	f021 0104 	bicge.w	r1, r1, #4
 8004f5c:	6021      	strge	r1, [r4, #0]
 8004f5e:	b90d      	cbnz	r5, 8004f64 <_printf_i+0x118>
 8004f60:	2e00      	cmp	r6, #0
 8004f62:	d04d      	beq.n	8005000 <_printf_i+0x1b4>
 8004f64:	4616      	mov	r6, r2
 8004f66:	fbb5 f1f3 	udiv	r1, r5, r3
 8004f6a:	fb03 5711 	mls	r7, r3, r1, r5
 8004f6e:	5dc7      	ldrb	r7, [r0, r7]
 8004f70:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004f74:	462f      	mov	r7, r5
 8004f76:	42bb      	cmp	r3, r7
 8004f78:	460d      	mov	r5, r1
 8004f7a:	d9f4      	bls.n	8004f66 <_printf_i+0x11a>
 8004f7c:	2b08      	cmp	r3, #8
 8004f7e:	d10b      	bne.n	8004f98 <_printf_i+0x14c>
 8004f80:	6823      	ldr	r3, [r4, #0]
 8004f82:	07df      	lsls	r7, r3, #31
 8004f84:	d508      	bpl.n	8004f98 <_printf_i+0x14c>
 8004f86:	6923      	ldr	r3, [r4, #16]
 8004f88:	6861      	ldr	r1, [r4, #4]
 8004f8a:	4299      	cmp	r1, r3
 8004f8c:	bfde      	ittt	le
 8004f8e:	2330      	movle	r3, #48	; 0x30
 8004f90:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004f94:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004f98:	1b92      	subs	r2, r2, r6
 8004f9a:	6122      	str	r2, [r4, #16]
 8004f9c:	f8cd a000 	str.w	sl, [sp]
 8004fa0:	464b      	mov	r3, r9
 8004fa2:	aa03      	add	r2, sp, #12
 8004fa4:	4621      	mov	r1, r4
 8004fa6:	4640      	mov	r0, r8
 8004fa8:	f7ff fee2 	bl	8004d70 <_printf_common>
 8004fac:	3001      	adds	r0, #1
 8004fae:	d14c      	bne.n	800504a <_printf_i+0x1fe>
 8004fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8004fb4:	b004      	add	sp, #16
 8004fb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fba:	4835      	ldr	r0, [pc, #212]	; (8005090 <_printf_i+0x244>)
 8004fbc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004fc0:	6823      	ldr	r3, [r4, #0]
 8004fc2:	680e      	ldr	r6, [r1, #0]
 8004fc4:	061f      	lsls	r7, r3, #24
 8004fc6:	f856 5b04 	ldr.w	r5, [r6], #4
 8004fca:	600e      	str	r6, [r1, #0]
 8004fcc:	d514      	bpl.n	8004ff8 <_printf_i+0x1ac>
 8004fce:	07d9      	lsls	r1, r3, #31
 8004fd0:	bf44      	itt	mi
 8004fd2:	f043 0320 	orrmi.w	r3, r3, #32
 8004fd6:	6023      	strmi	r3, [r4, #0]
 8004fd8:	b91d      	cbnz	r5, 8004fe2 <_printf_i+0x196>
 8004fda:	6823      	ldr	r3, [r4, #0]
 8004fdc:	f023 0320 	bic.w	r3, r3, #32
 8004fe0:	6023      	str	r3, [r4, #0]
 8004fe2:	2310      	movs	r3, #16
 8004fe4:	e7b0      	b.n	8004f48 <_printf_i+0xfc>
 8004fe6:	6823      	ldr	r3, [r4, #0]
 8004fe8:	f043 0320 	orr.w	r3, r3, #32
 8004fec:	6023      	str	r3, [r4, #0]
 8004fee:	2378      	movs	r3, #120	; 0x78
 8004ff0:	4828      	ldr	r0, [pc, #160]	; (8005094 <_printf_i+0x248>)
 8004ff2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004ff6:	e7e3      	b.n	8004fc0 <_printf_i+0x174>
 8004ff8:	065e      	lsls	r6, r3, #25
 8004ffa:	bf48      	it	mi
 8004ffc:	b2ad      	uxthmi	r5, r5
 8004ffe:	e7e6      	b.n	8004fce <_printf_i+0x182>
 8005000:	4616      	mov	r6, r2
 8005002:	e7bb      	b.n	8004f7c <_printf_i+0x130>
 8005004:	680b      	ldr	r3, [r1, #0]
 8005006:	6826      	ldr	r6, [r4, #0]
 8005008:	6960      	ldr	r0, [r4, #20]
 800500a:	1d1d      	adds	r5, r3, #4
 800500c:	600d      	str	r5, [r1, #0]
 800500e:	0635      	lsls	r5, r6, #24
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	d501      	bpl.n	8005018 <_printf_i+0x1cc>
 8005014:	6018      	str	r0, [r3, #0]
 8005016:	e002      	b.n	800501e <_printf_i+0x1d2>
 8005018:	0671      	lsls	r1, r6, #25
 800501a:	d5fb      	bpl.n	8005014 <_printf_i+0x1c8>
 800501c:	8018      	strh	r0, [r3, #0]
 800501e:	2300      	movs	r3, #0
 8005020:	6123      	str	r3, [r4, #16]
 8005022:	4616      	mov	r6, r2
 8005024:	e7ba      	b.n	8004f9c <_printf_i+0x150>
 8005026:	680b      	ldr	r3, [r1, #0]
 8005028:	1d1a      	adds	r2, r3, #4
 800502a:	600a      	str	r2, [r1, #0]
 800502c:	681e      	ldr	r6, [r3, #0]
 800502e:	6862      	ldr	r2, [r4, #4]
 8005030:	2100      	movs	r1, #0
 8005032:	4630      	mov	r0, r6
 8005034:	f7fb f8cc 	bl	80001d0 <memchr>
 8005038:	b108      	cbz	r0, 800503e <_printf_i+0x1f2>
 800503a:	1b80      	subs	r0, r0, r6
 800503c:	6060      	str	r0, [r4, #4]
 800503e:	6863      	ldr	r3, [r4, #4]
 8005040:	6123      	str	r3, [r4, #16]
 8005042:	2300      	movs	r3, #0
 8005044:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005048:	e7a8      	b.n	8004f9c <_printf_i+0x150>
 800504a:	6923      	ldr	r3, [r4, #16]
 800504c:	4632      	mov	r2, r6
 800504e:	4649      	mov	r1, r9
 8005050:	4640      	mov	r0, r8
 8005052:	47d0      	blx	sl
 8005054:	3001      	adds	r0, #1
 8005056:	d0ab      	beq.n	8004fb0 <_printf_i+0x164>
 8005058:	6823      	ldr	r3, [r4, #0]
 800505a:	079b      	lsls	r3, r3, #30
 800505c:	d413      	bmi.n	8005086 <_printf_i+0x23a>
 800505e:	68e0      	ldr	r0, [r4, #12]
 8005060:	9b03      	ldr	r3, [sp, #12]
 8005062:	4298      	cmp	r0, r3
 8005064:	bfb8      	it	lt
 8005066:	4618      	movlt	r0, r3
 8005068:	e7a4      	b.n	8004fb4 <_printf_i+0x168>
 800506a:	2301      	movs	r3, #1
 800506c:	4632      	mov	r2, r6
 800506e:	4649      	mov	r1, r9
 8005070:	4640      	mov	r0, r8
 8005072:	47d0      	blx	sl
 8005074:	3001      	adds	r0, #1
 8005076:	d09b      	beq.n	8004fb0 <_printf_i+0x164>
 8005078:	3501      	adds	r5, #1
 800507a:	68e3      	ldr	r3, [r4, #12]
 800507c:	9903      	ldr	r1, [sp, #12]
 800507e:	1a5b      	subs	r3, r3, r1
 8005080:	42ab      	cmp	r3, r5
 8005082:	dcf2      	bgt.n	800506a <_printf_i+0x21e>
 8005084:	e7eb      	b.n	800505e <_printf_i+0x212>
 8005086:	2500      	movs	r5, #0
 8005088:	f104 0619 	add.w	r6, r4, #25
 800508c:	e7f5      	b.n	800507a <_printf_i+0x22e>
 800508e:	bf00      	nop
 8005090:	08005389 	.word	0x08005389
 8005094:	0800539a 	.word	0x0800539a

08005098 <memcpy>:
 8005098:	440a      	add	r2, r1
 800509a:	4291      	cmp	r1, r2
 800509c:	f100 33ff 	add.w	r3, r0, #4294967295
 80050a0:	d100      	bne.n	80050a4 <memcpy+0xc>
 80050a2:	4770      	bx	lr
 80050a4:	b510      	push	{r4, lr}
 80050a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80050aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80050ae:	4291      	cmp	r1, r2
 80050b0:	d1f9      	bne.n	80050a6 <memcpy+0xe>
 80050b2:	bd10      	pop	{r4, pc}

080050b4 <memmove>:
 80050b4:	4288      	cmp	r0, r1
 80050b6:	b510      	push	{r4, lr}
 80050b8:	eb01 0402 	add.w	r4, r1, r2
 80050bc:	d902      	bls.n	80050c4 <memmove+0x10>
 80050be:	4284      	cmp	r4, r0
 80050c0:	4623      	mov	r3, r4
 80050c2:	d807      	bhi.n	80050d4 <memmove+0x20>
 80050c4:	1e43      	subs	r3, r0, #1
 80050c6:	42a1      	cmp	r1, r4
 80050c8:	d008      	beq.n	80050dc <memmove+0x28>
 80050ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80050ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 80050d2:	e7f8      	b.n	80050c6 <memmove+0x12>
 80050d4:	4402      	add	r2, r0
 80050d6:	4601      	mov	r1, r0
 80050d8:	428a      	cmp	r2, r1
 80050da:	d100      	bne.n	80050de <memmove+0x2a>
 80050dc:	bd10      	pop	{r4, pc}
 80050de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80050e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80050e6:	e7f7      	b.n	80050d8 <memmove+0x24>

080050e8 <_free_r>:
 80050e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80050ea:	2900      	cmp	r1, #0
 80050ec:	d048      	beq.n	8005180 <_free_r+0x98>
 80050ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80050f2:	9001      	str	r0, [sp, #4]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	f1a1 0404 	sub.w	r4, r1, #4
 80050fa:	bfb8      	it	lt
 80050fc:	18e4      	addlt	r4, r4, r3
 80050fe:	f000 f8d3 	bl	80052a8 <__malloc_lock>
 8005102:	4a20      	ldr	r2, [pc, #128]	; (8005184 <_free_r+0x9c>)
 8005104:	9801      	ldr	r0, [sp, #4]
 8005106:	6813      	ldr	r3, [r2, #0]
 8005108:	4615      	mov	r5, r2
 800510a:	b933      	cbnz	r3, 800511a <_free_r+0x32>
 800510c:	6063      	str	r3, [r4, #4]
 800510e:	6014      	str	r4, [r2, #0]
 8005110:	b003      	add	sp, #12
 8005112:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005116:	f000 b8cd 	b.w	80052b4 <__malloc_unlock>
 800511a:	42a3      	cmp	r3, r4
 800511c:	d90b      	bls.n	8005136 <_free_r+0x4e>
 800511e:	6821      	ldr	r1, [r4, #0]
 8005120:	1862      	adds	r2, r4, r1
 8005122:	4293      	cmp	r3, r2
 8005124:	bf04      	itt	eq
 8005126:	681a      	ldreq	r2, [r3, #0]
 8005128:	685b      	ldreq	r3, [r3, #4]
 800512a:	6063      	str	r3, [r4, #4]
 800512c:	bf04      	itt	eq
 800512e:	1852      	addeq	r2, r2, r1
 8005130:	6022      	streq	r2, [r4, #0]
 8005132:	602c      	str	r4, [r5, #0]
 8005134:	e7ec      	b.n	8005110 <_free_r+0x28>
 8005136:	461a      	mov	r2, r3
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	b10b      	cbz	r3, 8005140 <_free_r+0x58>
 800513c:	42a3      	cmp	r3, r4
 800513e:	d9fa      	bls.n	8005136 <_free_r+0x4e>
 8005140:	6811      	ldr	r1, [r2, #0]
 8005142:	1855      	adds	r5, r2, r1
 8005144:	42a5      	cmp	r5, r4
 8005146:	d10b      	bne.n	8005160 <_free_r+0x78>
 8005148:	6824      	ldr	r4, [r4, #0]
 800514a:	4421      	add	r1, r4
 800514c:	1854      	adds	r4, r2, r1
 800514e:	42a3      	cmp	r3, r4
 8005150:	6011      	str	r1, [r2, #0]
 8005152:	d1dd      	bne.n	8005110 <_free_r+0x28>
 8005154:	681c      	ldr	r4, [r3, #0]
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	6053      	str	r3, [r2, #4]
 800515a:	4421      	add	r1, r4
 800515c:	6011      	str	r1, [r2, #0]
 800515e:	e7d7      	b.n	8005110 <_free_r+0x28>
 8005160:	d902      	bls.n	8005168 <_free_r+0x80>
 8005162:	230c      	movs	r3, #12
 8005164:	6003      	str	r3, [r0, #0]
 8005166:	e7d3      	b.n	8005110 <_free_r+0x28>
 8005168:	6825      	ldr	r5, [r4, #0]
 800516a:	1961      	adds	r1, r4, r5
 800516c:	428b      	cmp	r3, r1
 800516e:	bf04      	itt	eq
 8005170:	6819      	ldreq	r1, [r3, #0]
 8005172:	685b      	ldreq	r3, [r3, #4]
 8005174:	6063      	str	r3, [r4, #4]
 8005176:	bf04      	itt	eq
 8005178:	1949      	addeq	r1, r1, r5
 800517a:	6021      	streq	r1, [r4, #0]
 800517c:	6054      	str	r4, [r2, #4]
 800517e:	e7c7      	b.n	8005110 <_free_r+0x28>
 8005180:	b003      	add	sp, #12
 8005182:	bd30      	pop	{r4, r5, pc}
 8005184:	2000009c 	.word	0x2000009c

08005188 <_malloc_r>:
 8005188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800518a:	1ccd      	adds	r5, r1, #3
 800518c:	f025 0503 	bic.w	r5, r5, #3
 8005190:	3508      	adds	r5, #8
 8005192:	2d0c      	cmp	r5, #12
 8005194:	bf38      	it	cc
 8005196:	250c      	movcc	r5, #12
 8005198:	2d00      	cmp	r5, #0
 800519a:	4606      	mov	r6, r0
 800519c:	db01      	blt.n	80051a2 <_malloc_r+0x1a>
 800519e:	42a9      	cmp	r1, r5
 80051a0:	d903      	bls.n	80051aa <_malloc_r+0x22>
 80051a2:	230c      	movs	r3, #12
 80051a4:	6033      	str	r3, [r6, #0]
 80051a6:	2000      	movs	r0, #0
 80051a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80051aa:	f000 f87d 	bl	80052a8 <__malloc_lock>
 80051ae:	4921      	ldr	r1, [pc, #132]	; (8005234 <_malloc_r+0xac>)
 80051b0:	680a      	ldr	r2, [r1, #0]
 80051b2:	4614      	mov	r4, r2
 80051b4:	b99c      	cbnz	r4, 80051de <_malloc_r+0x56>
 80051b6:	4f20      	ldr	r7, [pc, #128]	; (8005238 <_malloc_r+0xb0>)
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	b923      	cbnz	r3, 80051c6 <_malloc_r+0x3e>
 80051bc:	4621      	mov	r1, r4
 80051be:	4630      	mov	r0, r6
 80051c0:	f000 f862 	bl	8005288 <_sbrk_r>
 80051c4:	6038      	str	r0, [r7, #0]
 80051c6:	4629      	mov	r1, r5
 80051c8:	4630      	mov	r0, r6
 80051ca:	f000 f85d 	bl	8005288 <_sbrk_r>
 80051ce:	1c43      	adds	r3, r0, #1
 80051d0:	d123      	bne.n	800521a <_malloc_r+0x92>
 80051d2:	230c      	movs	r3, #12
 80051d4:	6033      	str	r3, [r6, #0]
 80051d6:	4630      	mov	r0, r6
 80051d8:	f000 f86c 	bl	80052b4 <__malloc_unlock>
 80051dc:	e7e3      	b.n	80051a6 <_malloc_r+0x1e>
 80051de:	6823      	ldr	r3, [r4, #0]
 80051e0:	1b5b      	subs	r3, r3, r5
 80051e2:	d417      	bmi.n	8005214 <_malloc_r+0x8c>
 80051e4:	2b0b      	cmp	r3, #11
 80051e6:	d903      	bls.n	80051f0 <_malloc_r+0x68>
 80051e8:	6023      	str	r3, [r4, #0]
 80051ea:	441c      	add	r4, r3
 80051ec:	6025      	str	r5, [r4, #0]
 80051ee:	e004      	b.n	80051fa <_malloc_r+0x72>
 80051f0:	6863      	ldr	r3, [r4, #4]
 80051f2:	42a2      	cmp	r2, r4
 80051f4:	bf0c      	ite	eq
 80051f6:	600b      	streq	r3, [r1, #0]
 80051f8:	6053      	strne	r3, [r2, #4]
 80051fa:	4630      	mov	r0, r6
 80051fc:	f000 f85a 	bl	80052b4 <__malloc_unlock>
 8005200:	f104 000b 	add.w	r0, r4, #11
 8005204:	1d23      	adds	r3, r4, #4
 8005206:	f020 0007 	bic.w	r0, r0, #7
 800520a:	1ac2      	subs	r2, r0, r3
 800520c:	d0cc      	beq.n	80051a8 <_malloc_r+0x20>
 800520e:	1a1b      	subs	r3, r3, r0
 8005210:	50a3      	str	r3, [r4, r2]
 8005212:	e7c9      	b.n	80051a8 <_malloc_r+0x20>
 8005214:	4622      	mov	r2, r4
 8005216:	6864      	ldr	r4, [r4, #4]
 8005218:	e7cc      	b.n	80051b4 <_malloc_r+0x2c>
 800521a:	1cc4      	adds	r4, r0, #3
 800521c:	f024 0403 	bic.w	r4, r4, #3
 8005220:	42a0      	cmp	r0, r4
 8005222:	d0e3      	beq.n	80051ec <_malloc_r+0x64>
 8005224:	1a21      	subs	r1, r4, r0
 8005226:	4630      	mov	r0, r6
 8005228:	f000 f82e 	bl	8005288 <_sbrk_r>
 800522c:	3001      	adds	r0, #1
 800522e:	d1dd      	bne.n	80051ec <_malloc_r+0x64>
 8005230:	e7cf      	b.n	80051d2 <_malloc_r+0x4a>
 8005232:	bf00      	nop
 8005234:	2000009c 	.word	0x2000009c
 8005238:	200000a0 	.word	0x200000a0

0800523c <_realloc_r>:
 800523c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800523e:	4607      	mov	r7, r0
 8005240:	4614      	mov	r4, r2
 8005242:	460e      	mov	r6, r1
 8005244:	b921      	cbnz	r1, 8005250 <_realloc_r+0x14>
 8005246:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800524a:	4611      	mov	r1, r2
 800524c:	f7ff bf9c 	b.w	8005188 <_malloc_r>
 8005250:	b922      	cbnz	r2, 800525c <_realloc_r+0x20>
 8005252:	f7ff ff49 	bl	80050e8 <_free_r>
 8005256:	4625      	mov	r5, r4
 8005258:	4628      	mov	r0, r5
 800525a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800525c:	f000 f830 	bl	80052c0 <_malloc_usable_size_r>
 8005260:	42a0      	cmp	r0, r4
 8005262:	d20f      	bcs.n	8005284 <_realloc_r+0x48>
 8005264:	4621      	mov	r1, r4
 8005266:	4638      	mov	r0, r7
 8005268:	f7ff ff8e 	bl	8005188 <_malloc_r>
 800526c:	4605      	mov	r5, r0
 800526e:	2800      	cmp	r0, #0
 8005270:	d0f2      	beq.n	8005258 <_realloc_r+0x1c>
 8005272:	4631      	mov	r1, r6
 8005274:	4622      	mov	r2, r4
 8005276:	f7ff ff0f 	bl	8005098 <memcpy>
 800527a:	4631      	mov	r1, r6
 800527c:	4638      	mov	r0, r7
 800527e:	f7ff ff33 	bl	80050e8 <_free_r>
 8005282:	e7e9      	b.n	8005258 <_realloc_r+0x1c>
 8005284:	4635      	mov	r5, r6
 8005286:	e7e7      	b.n	8005258 <_realloc_r+0x1c>

08005288 <_sbrk_r>:
 8005288:	b538      	push	{r3, r4, r5, lr}
 800528a:	4d06      	ldr	r5, [pc, #24]	; (80052a4 <_sbrk_r+0x1c>)
 800528c:	2300      	movs	r3, #0
 800528e:	4604      	mov	r4, r0
 8005290:	4608      	mov	r0, r1
 8005292:	602b      	str	r3, [r5, #0]
 8005294:	f7fc f9c6 	bl	8001624 <_sbrk>
 8005298:	1c43      	adds	r3, r0, #1
 800529a:	d102      	bne.n	80052a2 <_sbrk_r+0x1a>
 800529c:	682b      	ldr	r3, [r5, #0]
 800529e:	b103      	cbz	r3, 80052a2 <_sbrk_r+0x1a>
 80052a0:	6023      	str	r3, [r4, #0]
 80052a2:	bd38      	pop	{r3, r4, r5, pc}
 80052a4:	20000230 	.word	0x20000230

080052a8 <__malloc_lock>:
 80052a8:	4801      	ldr	r0, [pc, #4]	; (80052b0 <__malloc_lock+0x8>)
 80052aa:	f000 b811 	b.w	80052d0 <__retarget_lock_acquire_recursive>
 80052ae:	bf00      	nop
 80052b0:	20000238 	.word	0x20000238

080052b4 <__malloc_unlock>:
 80052b4:	4801      	ldr	r0, [pc, #4]	; (80052bc <__malloc_unlock+0x8>)
 80052b6:	f000 b80c 	b.w	80052d2 <__retarget_lock_release_recursive>
 80052ba:	bf00      	nop
 80052bc:	20000238 	.word	0x20000238

080052c0 <_malloc_usable_size_r>:
 80052c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80052c4:	1f18      	subs	r0, r3, #4
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	bfbc      	itt	lt
 80052ca:	580b      	ldrlt	r3, [r1, r0]
 80052cc:	18c0      	addlt	r0, r0, r3
 80052ce:	4770      	bx	lr

080052d0 <__retarget_lock_acquire_recursive>:
 80052d0:	4770      	bx	lr

080052d2 <__retarget_lock_release_recursive>:
 80052d2:	4770      	bx	lr

080052d4 <_init>:
 80052d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052d6:	bf00      	nop
 80052d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052da:	bc08      	pop	{r3}
 80052dc:	469e      	mov	lr, r3
 80052de:	4770      	bx	lr

080052e0 <_fini>:
 80052e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052e2:	bf00      	nop
 80052e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052e6:	bc08      	pop	{r3}
 80052e8:	469e      	mov	lr, r3
 80052ea:	4770      	bx	lr
